{"version":3,"file":"KHR_materials_diffuse_transmission-BbaqFc-k.esm.min.js","sources":["../../../../../dev/loaders/dist/glTF/2.0/Extensions/KHR_materials_diffuse_transmission.js"],"sourcesContent":["import { GLTFLoader } from \"../glTFLoader\";\nimport { Color3 } from \"core/Maths/math.color\";\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\nconst NAME = \"KHR_materials_diffuse_transmission\";\n/**\n * [Proposed Specification](https://github.com/KhronosGroup/glTF/pull/1825)\n * !!! Experimental Extension Subject to Changes !!!\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_materials_diffuse_transmission {\n    /**\n     * @internal\n     */\n    constructor(loader) {\n        /**\n         * The name of this extension.\n         */\n        this.name = NAME;\n        /**\n         * Defines a number that determines the order the extensions are applied.\n         */\n        this.order = 174;\n        this._loader = loader;\n        this.enabled = this._loader.isExtensionUsed(NAME);\n        if (this.enabled) {\n            loader.parent.transparencyAsCoverage = true;\n        }\n    }\n    /** @internal */\n    dispose() {\n        this._loader = null;\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line no-restricted-syntax\n    loadMaterialPropertiesAsync(context, material, babylonMaterial) {\n        return GLTFLoader.LoadExtensionAsync(context, material, this.name, async (extensionContext, extension) => {\n            const promises = new Array();\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n            promises.push(this._loadTranslucentPropertiesAsync(extensionContext, material, babylonMaterial, extension));\n            return await Promise.all(promises).then(() => { });\n        });\n    }\n    // eslint-disable-next-line no-restricted-syntax, @typescript-eslint/promise-function-async\n    _loadTranslucentPropertiesAsync(context, material, babylonMaterial, extension) {\n        const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\n        adapter.configureSubsurface();\n        adapter.subsurfaceWeight = extension.diffuseTransmissionFactor ?? 0;\n        adapter.subsurfaceColor = extension.diffuseTransmissionColorFactor !== undefined ? Color3.FromArray(extension.diffuseTransmissionColorFactor) : Color3.White();\n        const promises = new Array();\n        if (extension.diffuseTransmissionTexture) {\n            extension.diffuseTransmissionTexture.nonColorData = true;\n            promises.push(this._loader.loadTextureInfoAsync(`${context}/diffuseTransmissionTexture`, extension.diffuseTransmissionTexture).then((texture) => {\n                texture.name = `${babylonMaterial.name} (Diffuse Transmission)`;\n                adapter.subsurfaceWeightTexture = texture;\n            }));\n        }\n        if (extension.diffuseTransmissionColorTexture) {\n            promises.push(this._loader.loadTextureInfoAsync(`${context}/diffuseTransmissionColorTexture`, extension.diffuseTransmissionColorTexture).then((texture) => {\n                texture.name = `${babylonMaterial.name} (Diffuse Transmission Color)`;\n                adapter.subsurfaceColorTexture = texture;\n            }));\n        }\n        return Promise.all(promises).then(() => { });\n    }\n}\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_diffuse_transmission(loader));\n//# sourceMappingURL=KHR_materials_diffuse_transmission.js.map"],"names":["NAME","KHR_materials_diffuse_transmission","constructor","loader","this","name","order","_loader","enabled","isExtensionUsed","parent","transparencyAsCoverage","dispose","loadMaterialPropertiesAsync","context","material","babylonMaterial","GLTFLoader","LoadExtensionAsync","async","extensionContext","extension","promises","Array","push","_loadTranslucentPropertiesAsync","Promise","all","then","adapter","_getOrCreateMaterialAdapter","configureSubsurface","subsurfaceWeight","diffuseTransmissionFactor","subsurfaceColor","undefined","diffuseTransmissionColorFactor","Color3","FromArray","White","diffuseTransmissionTexture","nonColorData","loadTextureInfoAsync","texture","subsurfaceWeightTexture","diffuseTransmissionColorTexture","subsurfaceColorTexture","unregisterGLTFExtension","registerGLTFExtension"],"mappings":"gVAGA,MAAMA,EAAO,qCAMN,MAAMC,EAIT,WAAAC,CAAYC,GAIRC,KAAKC,KAAOL,EAIZI,KAAKE,MAAQ,IACbF,KAAKG,QAAUJ,EACfC,KAAKI,QAAUJ,KAAKG,QAAQE,gBAAgBT,GACxCI,KAAKI,UACLL,EAAOO,OAAOC,wBAAyB,EAEnD,CAEI,OAAAC,GACIR,KAAKG,QAAU,IACvB,CAKI,2BAAAM,CAA4BC,EAASC,EAAUC,GAC3C,OAAOC,EAAWC,mBAAmBJ,EAASC,EAAUX,KAAKC,MAAMc,MAAOC,EAAkBC,KACxF,MAAMC,EAAW,IAAIC,MAGrB,OAFAD,EAASE,KAAKpB,KAAKG,QAAQM,4BAA4BC,EAASC,EAAUC,IAC1EM,EAASE,KAAKpB,KAAKqB,gCAAgCL,EAAkBL,EAAUC,EAAiBK,UACnFK,QAAQC,IAAIL,GAAUM,MAAK,WAEpD,CAEI,+BAAAH,CAAgCX,EAASC,EAAUC,EAAiBK,GAChE,MAAMQ,EAAUzB,KAAKG,QAAQuB,4BAA4Bd,GACzDa,EAAQE,sBACRF,EAAQG,iBAAmBX,EAAUY,2BAA6B,EAClEJ,EAAQK,qBAA+DC,IAA7Cd,EAAUe,+BAA+CC,EAAOC,UAAUjB,EAAUe,gCAAkCC,EAAOE,QACvJ,MAAMjB,EAAW,IAAIC,MAcrB,OAbIF,EAAUmB,6BACVnB,EAAUmB,2BAA2BC,cAAe,EACpDnB,EAASE,KAAKpB,KAAKG,QAAQmC,qBAAqB,GAAG5B,+BAAsCO,EAAUmB,4BAA4BZ,MAAMe,IACjIA,EAAQtC,KAAO,GAAGW,EAAgBX,8BAClCwB,EAAQe,wBAA0BD,OAGtCtB,EAAUwB,iCACVvB,EAASE,KAAKpB,KAAKG,QAAQmC,qBAAqB,GAAG5B,oCAA2CO,EAAUwB,iCAAiCjB,MAAMe,IAC3IA,EAAQtC,KAAO,GAAGW,EAAgBX,oCAClCwB,EAAQiB,uBAAyBH,MAGlCjB,QAAQC,IAAIL,GAAUM,MAAK,QAC1C,EAEAmB,EAAwB/C,GACxBgD,EAAsBhD,GAAM,GAAOG,GAAW,IAAIF,EAAmCE"}