import{d as e,M as t,C as s,aW as i,x as r,aX as a,L as n,T as o,H as h,bo as l,aZ as u,S as _,G as T,be as A,b2 as c,a2 as m,bf as E,bg as p,c as R,bp as g,X as S,bh as L,k as d,a4 as I,Y as f,a3 as O,a6 as P,b8 as y,b9 as C,ba as M,bb as N,a1 as x,bc as F,Z as b,I as D,bd as v,a_ as U,a$ as k,b0 as H,b1 as G,b3 as B,b4 as w,b5 as W,b6 as V,b7 as X,bi as Y,a0 as j,bj as z,bk as K,A as Q,_ as Z,bq as $,s as q,D as J,e as ee}from"./index-BeBPThKX.esm.min.js";const te={effect:null,subMesh:null};class se{populateVectorFromLinkedProperties(e){const t=e.dimension[0];for(const e in this.linkedProperties){const s=this.linkedProperties[e],i=s.numComponents;if(t<i||s.targetUniformComponentOffset>t-i)return void(1==i?n.Error(`Float property ${s.name} has an offset that is too large.`):n.Error(`Vector${i} property ${s.name} won't fit in Vector${t} or has an offset that is too large.`));"number"==typeof s.value?se._tmpArray[s.targetUniformComponentOffset]=s.value:s.value.toArray(se._tmpArray,s.targetUniformComponentOffset)}e.fromArray(se._tmpArray)}constructor(e,t){this.linkedProperties={},this.name=e,this.numComponents=t}}se._tmpArray=[0,0,0,0];class ie{constructor(e,t,s,i,r=0){this.targetUniformComponentNum=4,this.targetUniformComponentOffset=0,this.name=e,this.targetUniformName=s,this.defaultValue=t,this.value=t,this.targetUniformComponentNum=i,this.targetUniformComponentOffset=r}get numComponents(){return"number"==typeof this.defaultValue?1:this.defaultValue.dimension[0]}}class re{get samplerName(){return this.samplerPrefix+"Sampler"}get samplerInfoName(){return"v"+this.samplerPrefix.charAt(0).toUpperCase()+this.samplerPrefix.slice(1)+"Infos"}get samplerMatrixName(){return this.samplerPrefix+"Matrix"}constructor(e,t,s){this.value=null,this.samplerPrefix="",this.textureDefine="",this.name=e,this.samplerPrefix=t,this.textureDefine=s}}class ae extends(K(Q)){}class ne extends(z(ae)){constructor(e){super(e),this.NUM_SAMPLES="0",this.REALTIME_FILTERING=!1,this.IBL_CDF_FILTERING=!1,this.VERTEXCOLOR=!1,this.BAKED_VERTEX_ANIMATION_TEXTURE=!1,this.VERTEXALPHA=!1,this.ALPHATEST=!1,this.DEPTHPREPASS=!1,this.ALPHABLEND=!1,this.ALPHA_FROM_BASE_COLOR_TEXTURE=!1,this.ALPHATESTVALUE="0.5",this.PREMULTIPLYALPHA=!1,this.REFLECTIVITY_GAMMA=!1,this.REFLECTIVITYDIRECTUV=0,this.SPECULARTERM=!1,this.LODBASEDMICROSFURACE=!0,this.METALLICWORKFLOW=!0,this.ROUGHNESSSTOREINMETALMAPALPHA=!1,this.ROUGHNESSSTOREINMETALMAPGREEN=!1,this.METALLNESSSTOREINMETALMAPBLUE=!1,this.AOSTOREINMETALMAPRED=!1,this.SPECULAR_WEIGHT_IN_ALPHA=!1,this.SPECULAR_WEIGHT_FROM_SPECULAR_COLOR_TEXTURE=!1,this.SPECULAR_ROUGHNESS_ANISOTROPY_FROM_TANGENT_TEXTURE=!1,this.COAT_ROUGHNESS_ANISOTROPY_FROM_TANGENT_TEXTURE=!1,this.USE_GLTF_STYLE_ANISOTROPY=!1,this.THIN_FILM_THICKNESS_FROM_THIN_FILM_TEXTURE=!1,this.ENVIRONMENTBRDF=!1,this.ENVIRONMENTBRDF_RGBD=!1,this.NORMAL=!1,this.TANGENT=!1,this.OBJECTSPACE_NORMALMAP=!1,this.PARALLAX=!1,this.PARALLAX_RHS=!1,this.PARALLAXOCCLUSION=!1,this.NORMALXYSCALE=!0,this.ANISOTROPIC=!1,this.ANISOTROPIC_OPENPBR=!0,this.ANISOTROPIC_BASE=!1,this.ANISOTROPIC_COAT=!1,this.THIN_FILM=!1,this.IRIDESCENCE=!1,this.REFLECTION=!1,this.REFLECTIONMAP_3D=!1,this.REFLECTIONMAP_SPHERICAL=!1,this.REFLECTIONMAP_PLANAR=!1,this.REFLECTIONMAP_CUBIC=!1,this.USE_LOCAL_REFLECTIONMAP_CUBIC=!1,this.REFLECTIONMAP_PROJECTION=!1,this.REFLECTIONMAP_SKYBOX=!1,this.REFLECTIONMAP_EXPLICIT=!1,this.REFLECTIONMAP_EQUIRECTANGULAR=!1,this.REFLECTIONMAP_EQUIRECTANGULAR_FIXED=!1,this.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED=!1,this.INVERTCUBICMAP=!1,this.USESPHERICALFROMREFLECTIONMAP=!1,this.USEIRRADIANCEMAP=!1,this.USE_IRRADIANCE_DOMINANT_DIRECTION=!1,this.USESPHERICALINVERTEX=!1,this.REFLECTIONMAP_OPPOSITEZ=!1,this.LODINREFLECTIONALPHA=!1,this.GAMMAREFLECTION=!1,this.RGBDREFLECTION=!1,this.RADIANCEOCCLUSION=!1,this.HORIZONOCCLUSION=!1,this.INSTANCES=!1,this.THIN_INSTANCES=!1,this.INSTANCESCOLOR=!1,this.PREPASS=!1,this.PREPASS_COLOR=!1,this.PREPASS_COLOR_INDEX=-1,this.PREPASS_IRRADIANCE=!1,this.PREPASS_IRRADIANCE_INDEX=-1,this.PREPASS_ALBEDO=!1,this.PREPASS_ALBEDO_INDEX=-1,this.PREPASS_ALBEDO_SQRT=!1,this.PREPASS_ALBEDO_SQRT_INDEX=-1,this.PREPASS_DEPTH=!1,this.PREPASS_DEPTH_INDEX=-1,this.PREPASS_SCREENSPACE_DEPTH=!1,this.PREPASS_SCREENSPACE_DEPTH_INDEX=-1,this.PREPASS_NORMALIZED_VIEW_DEPTH=!1,this.PREPASS_NORMALIZED_VIEW_DEPTH_INDEX=-1,this.PREPASS_NORMAL=!1,this.PREPASS_NORMAL_INDEX=-1,this.PREPASS_NORMAL_WORLDSPACE=!1,this.PREPASS_WORLD_NORMAL=!1,this.PREPASS_WORLD_NORMAL_INDEX=-1,this.PREPASS_POSITION=!1,this.PREPASS_POSITION_INDEX=-1,this.PREPASS_LOCAL_POSITION=!1,this.PREPASS_LOCAL_POSITION_INDEX=-1,this.PREPASS_VELOCITY=!1,this.PREPASS_VELOCITY_INDEX=-1,this.PREPASS_VELOCITY_LINEAR=!1,this.PREPASS_VELOCITY_LINEAR_INDEX=-1,this.PREPASS_REFLECTIVITY=!1,this.PREPASS_REFLECTIVITY_INDEX=-1,this.SCENE_MRT_COUNT=0,this.NUM_BONE_INFLUENCERS=0,this.BonesPerMesh=0,this.BONETEXTURE=!1,this.BONES_VELOCITY_ENABLED=!1,this.NONUNIFORMSCALING=!1,this.MORPHTARGETS=!1,this.MORPHTARGETS_POSITION=!1,this.MORPHTARGETS_NORMAL=!1,this.MORPHTARGETS_TANGENT=!1,this.MORPHTARGETS_UV=!1,this.MORPHTARGETS_UV2=!1,this.MORPHTARGETS_COLOR=!1,this.MORPHTARGETTEXTURE_HASPOSITIONS=!1,this.MORPHTARGETTEXTURE_HASNORMALS=!1,this.MORPHTARGETTEXTURE_HASTANGENTS=!1,this.MORPHTARGETTEXTURE_HASUVS=!1,this.MORPHTARGETTEXTURE_HASUV2S=!1,this.MORPHTARGETTEXTURE_HASCOLORS=!1,this.NUM_MORPH_INFLUENCERS=0,this.MORPHTARGETS_TEXTURE=!1,this.USEPHYSICALLIGHTFALLOFF=!1,this.USEGLTFLIGHTFALLOFF=!1,this.TWOSIDEDLIGHTING=!1,this.MIRRORED=!1,this.SHADOWFLOAT=!1,this.CLIPPLANE=!1,this.CLIPPLANE2=!1,this.CLIPPLANE3=!1,this.CLIPPLANE4=!1,this.CLIPPLANE5=!1,this.CLIPPLANE6=!1,this.POINTSIZE=!1,this.FOG=!1,this.LOGARITHMICDEPTH=!1,this.CAMERA_ORTHOGRAPHIC=!1,this.CAMERA_PERSPECTIVE=!1,this.AREALIGHTSUPPORTED=!0,this.FORCENORMALFORWARD=!1,this.SPECULARAA=!1,this.UNLIT=!1,this.DECAL_AFTER_DETAIL=!1,this.DEBUGMODE=0,this.CLUSTLIGHT_SLICES=0,this.CLUSTLIGHT_BATCH=0,this.BRDF_V_HEIGHT_CORRELATED=!0,this.MS_BRDF_ENERGY_CONSERVATION=!0,this.SPHERICAL_HARMONICS=!0,this.SPECULAR_GLOSSINESS_ENERGY_CONSERVATION=!0,this.MIX_IBL_RADIANCE_WITH_IRRADIANCE=!0,this.LEGACY_SPECULAR_ENERGY_CONSERVATION=!1,this.BASE_DIFFUSE_MODEL=s.MATERIAL_DIFFUSE_MODEL_E_OREN_NAYAR,this.DIELECTRIC_SPECULAR_MODEL=s.MATERIAL_DIELECTRIC_SPECULAR_MODEL_OPENPBR,this.CONDUCTOR_SPECULAR_MODEL=s.MATERIAL_CONDUCTOR_SPECULAR_MODEL_OPENPBR,this.rebuild()}reset(){super.reset(),this.ALPHATESTVALUE="0.5",this.NORMALXYSCALE=!0}}class oe extends(Y(j)){}class he extends oe{get geometryTangentAngle(){return Math.atan2(this.geometryTangent.y,this.geometryTangent.x)}set geometryTangentAngle(t){this.geometryTangent=new e(Math.cos(t),Math.sin(t))}get geometryCoatTangentAngle(){return Math.atan2(this.geometryCoatTangent.y,this.geometryCoatTangent.x)}set geometryCoatTangentAngle(t){this.geometryCoatTangent=new e(Math.cos(t),Math.sin(t))}get usePhysicalLightFalloff(){return this._lightFalloff===t.LIGHTFALLOFF_PHYSICAL}set usePhysicalLightFalloff(e){e!==this.usePhysicalLightFalloff&&(this._markAllSubMeshesAsTexturesDirty(),this._lightFalloff=e?t.LIGHTFALLOFF_PHYSICAL:t.LIGHTFALLOFF_STANDARD)}get useGLTFLightFalloff(){return this._lightFalloff===t.LIGHTFALLOFF_GLTF}set useGLTFLightFalloff(e){e!==this.useGLTFLightFalloff&&(this._markAllSubMeshesAsTexturesDirty(),this._lightFalloff=e?t.LIGHTFALLOFF_GLTF:t.LIGHTFALLOFF_STANDARD)}get realTimeFiltering(){return this._realTimeFiltering}set realTimeFiltering(e){this._realTimeFiltering=e,this.markAsDirty(s.MATERIAL_TextureDirtyFlag)}get realTimeFilteringQuality(){return this._realTimeFilteringQuality}set realTimeFilteringQuality(e){this._realTimeFilteringQuality=e,this.markAsDirty(s.MATERIAL_TextureDirtyFlag)}get canRenderToMRT(){return!0}constructor(_,T,A=!1){super(_,T,void 0,A||he.ForceGLSL),this._baseWeight=new ie("base_weight",1,"vBaseWeight",1),this._baseWeightTexture=new re("base_weight","baseWeight","BASE_WEIGHT"),this._baseColor=new ie("base_color",i.White(),"vBaseColor",4),this._baseColorTexture=new re("base_color","baseColor","BASE_COLOR"),this._baseDiffuseRoughness=new ie("base_diffuse_roughness",0,"vBaseDiffuseRoughness",1),this._baseDiffuseRoughnessTexture=new re("base_diffuse_roughness","baseDiffuseRoughness","BASE_DIFFUSE_ROUGHNESS"),this._baseMetalness=new ie("base_metalness",0,"vReflectanceInfo",4,0),this._baseMetalnessTexture=new re("base_metalness","baseMetalness","BASE_METALNESS"),this._specularWeight=new ie("specular_weight",1,"vReflectanceInfo",4,3),this._specularWeightTexture=new re("specular_weight","specularWeight","SPECULAR_WEIGHT"),this._specularColor=new ie("specular_color",i.White(),"vSpecularColor",4),this._specularColorTexture=new re("specular_color","specularColor","SPECULAR_COLOR"),this._specularRoughness=new ie("specular_roughness",.3,"vReflectanceInfo",4,1),this._specularRoughnessTexture=new re("specular_roughness","specularRoughness","SPECULAR_ROUGHNESS"),this._specularRoughnessAnisotropy=new ie("specular_roughness_anisotropy",0,"vSpecularAnisotropy",3,2),this._specularRoughnessAnisotropyTexture=new re("specular_roughness_anisotropy","specularRoughnessAnisotropy","SPECULAR_ROUGHNESS_ANISOTROPY"),this._specularIor=new ie("specular_ior",1.5,"vReflectanceInfo",4,2),this._coatWeight=new ie("coat_weight",0,"vCoatWeight",1,0),this._coatWeightTexture=new re("coat_weight","coatWeight","COAT_WEIGHT"),this._coatColor=new ie("coat_color",i.White(),"vCoatColor",3,0),this._coatColorTexture=new re("coat_color","coatColor","COAT_COLOR"),this._coatRoughness=new ie("coat_roughness",0,"vCoatRoughness",1,0),this._coatRoughnessTexture=new re("coat_roughness","coatRoughness","COAT_ROUGHNESS"),this._coatRoughnessAnisotropy=new ie("coat_roughness_anisotropy",0,"vCoatRoughnessAnisotropy",1),this._coatRoughnessAnisotropyTexture=new re("coat_roughness_anisotropy","coatRoughnessAnisotropy","COAT_ROUGHNESS_ANISOTROPY"),this._coatIor=new ie("coat_ior",1.5,"vCoatIor",1,0),this._coatDarkening=new ie("coat_darkening",1,"vCoatDarkening",1,0),this._coatDarkeningTexture=new re("coat_darkening","coatDarkening","COAT_DARKENING"),this.useCoatRoughnessFromWeightTexture=!1,this._geometryNormalTexture=new re("geometry_normal","geometryNormal","GEOMETRY_NORMAL"),this._geometryTangent=new ie("geometry_tangent",new e(1,0),"vSpecularAnisotropy",3,0),this._geometryTangentTexture=new re("geometry_tangent","geometryTangent","GEOMETRY_TANGENT"),this._geometryCoatNormalTexture=new re("geometry_coat_normal","geometryCoatNormal","GEOMETRY_COAT_NORMAL"),this._geometryCoatTangent=new ie("geometry_coat_tangent",new e(1,0),"vGeometryCoatTangent",2,0),this._geometryCoatTangentTexture=new re("geometry_coat_tangent","geometryCoatTangent","GEOMETRY_COAT_TANGENT"),this._geometryOpacity=new ie("geometry_opacity",1,"vBaseColor",4,3),this._geometryOpacityTexture=new re("geometry_opacity","geometryOpacity","GEOMETRY_OPACITY"),this._emissionLuminance=new ie("emission_luminance",1,"vLightingIntensity",4,1),this._emissionColor=new ie("emission_color",i.Black(),"vEmissionColor",3),this._emissionColorTexture=new re("emission_color","emissionColor","EMISSION_COLOR"),this._thinFilmWeight=new ie("thin_film_weight",0,"vThinFilmWeight",1,0),this._thinFilmWeightTexture=new re("thin_film_weight","thinFilmWeight","THIN_FILM_WEIGHT"),this._thinFilmThickness=new ie("thin_film_thickness",.5,"vThinFilmThickness",2,0),this._thinFilmThicknessMin=new ie("thin_film_thickness_min",0,"vThinFilmThickness",2,1),this._thinFilmThicknessTexture=new re("thin_film_thickness","thinFilmThickness","THIN_FILM_THICKNESS"),this._thinFilmIor=new ie("thin_film_ior",1.4,"vThinFilmIor",1,0),this._ambientOcclusionTexture=new re("ambient_occlusion","ambientOcclusion","AMBIENT_OCCLUSION"),this._uniformsList={},this._samplersList={},this._samplerDefines={},this.directIntensity=1,this.environmentIntensity=1,this.useSpecularWeightFromTextureAlpha=!1,this.forceAlphaTest=!1,this.alphaCutOff=.4,this.useAmbientOcclusionFromMetallicTextureRed=!1,this.useAmbientInGrayScale=!1,this.useObjectSpaceNormalMap=!1,this.useParallax=!1,this.useParallaxOcclusion=!1,this.parallaxScaleBias=.05,this.disableLighting=!1,this.forceIrradianceInFragment=!1,this.maxSimultaneousLights=4,this.invertNormalMapX=!1,this.invertNormalMapY=!1,this.twoSidedLighting=!1,this.useAlphaFresnel=!1,this.useLinearAlphaFresnel=!1,this.environmentBRDFTexture=null,this.forceNormalForward=!1,this.enableSpecularAntiAliasing=!1,this.useHorizonOcclusion=!0,this.useRadianceOcclusion=!0,this.unlit=!1,this.applyDecalMapAfterDetailMap=!1,this._lightingInfos=new r(this.directIntensity,1,this.environmentIntensity,1),this._radianceTexture=null,this._useSpecularWeightFromAlpha=!1,this._useSpecularWeightFromSpecularColorTexture=!1,this._useSpecularRoughnessAnisotropyFromTangentTexture=!1,this._useCoatRoughnessAnisotropyFromTangentTexture=!1,this._useGltfStyleAnisotropy=!1,this._useHorizonOcclusion=!0,this._useRadianceOcclusion=!0,this._useAlphaFromBaseColorTexture=!1,this._useAmbientOcclusionFromMetallicTextureRed=!1,this._useRoughnessFromMetallicTextureGreen=!1,this._useMetallicFromMetallicTextureBlue=!1,this._useThinFilmThicknessFromTextureGreen=!1,this._lightFalloff=t.LIGHTFALLOFF_PHYSICAL,this._useObjectSpaceNormalMap=!1,this._useParallax=!1,this._useParallaxOcclusion=!1,this._parallaxScaleBias=.05,this._disableLighting=!1,this._maxSimultaneousLights=4,this._invertNormalMapX=!1,this._invertNormalMapY=!1,this._twoSidedLighting=!1,this._alphaCutOff=.4,this._useAlphaFresnel=!1,this._useLinearAlphaFresnel=!1,this._environmentBRDFTexture=null,this._forceIrradianceInFragment=!1,this._realTimeFiltering=!1,this._realTimeFilteringQuality=s.TEXTURE_FILTERING_QUALITY_LOW,this._forceNormalForward=!1,this._enableSpecularAntiAliasing=!1,this._renderTargets=new a(16),this._unlit=!1,this._applyDecalMapAfterDetailMap=!1,this._debugMode=0,this._shadersLoaded=!1,this._breakShaderLoadedCheck=!1,this.debugMode=0,this.debugLimit=-1,this.debugFactor=1,this._cacheHasRenderTargetTextures=!1,this._transparencyMode=t.MATERIAL_OPAQUE,this.getScene()&&!this.getScene()?.getEngine().isWebGPU&&this.getScene().getEngine().webGLVersion<2&&n.Error("OpenPBRMaterial: WebGL 2.0 or above is required for this material."),he._noiseTextures[this.getScene().uniqueId]||(he._noiseTextures[this.getScene().uniqueId]=new o("https://assets.babylonjs.com/textures/blue_noise/blue_noise_rgb.png",this.getScene(),!1,!0,s.TEXTURE_NEAREST_SAMPLINGMODE),this.getScene().onDisposeObservable.addOnce((()=>{he._noiseTextures[this.getScene().uniqueId]?.dispose(),delete he._noiseTextures[this.getScene().uniqueId]}))),this._attachImageProcessingConfiguration(null),this.getRenderTargetTextures=()=>(this._renderTargets.reset(),h.ReflectionTextureEnabled&&this._radianceTexture&&this._radianceTexture.isRenderTarget&&this._renderTargets.push(this._radianceTexture),this._eventInfo.renderTargets=this._renderTargets,this._callbackPluginEventFillRenderTargetTextures(this._eventInfo),this._renderTargets),this._environmentBRDFTexture=l(this.getScene()),this.prePassConfiguration=new u,this._propertyList={};for(const e of Object.getOwnPropertyNames(this)){const t=this[e];t instanceof ie&&(this._propertyList[e]=t)}Object.keys(this._propertyList).forEach((e=>{const t=this._propertyList[e];let s=this._uniformsList[t.targetUniformName];s?s.numComponents!==t.targetUniformComponentNum&&n.Error(`Uniform ${t.targetUniformName} already exists of size ${s.numComponents}, but trying to set it to ${t.targetUniformComponentNum}.`):(s=new se(t.targetUniformName,t.targetUniformComponentNum),this._uniformsList[t.targetUniformName]=s),s.linkedProperties[t.name]=t})),this._samplersList={};for(const e of Object.getOwnPropertyNames(this)){const t=this[e];t instanceof re&&(this._samplersList[e]=t)}for(const e in this._samplersList){const t=this._samplersList[e].textureDefine;this._samplerDefines[t]={type:"boolean",default:!1},this._samplerDefines[t+"DIRECTUV"]={type:"number",default:0},this._samplerDefines[t+"_GAMMA"]={type:"boolean",default:!1}}this._baseWeight,this._baseWeightTexture,this._baseColor,this._baseColorTexture,this._baseDiffuseRoughness,this._baseDiffuseRoughnessTexture,this._baseMetalness,this._baseMetalnessTexture,this._specularWeight,this._specularWeightTexture,this._specularColor,this._specularColorTexture,this._specularRoughness,this._specularIor,this._specularRoughnessTexture,this._specularRoughnessAnisotropy,this._specularRoughnessAnisotropyTexture,this._coatWeight,this._coatWeightTexture,this._coatColor,this._coatColorTexture,this._coatRoughness,this._coatRoughnessTexture,this._coatRoughnessAnisotropy,this._coatRoughnessAnisotropyTexture,this._coatIor,this._coatDarkening,this._coatDarkeningTexture,this._geometryNormalTexture,this._geometryTangent,this._geometryTangentTexture,this._geometryCoatNormalTexture,this._geometryCoatTangent,this._geometryCoatTangentTexture,this._geometryOpacity,this._geometryOpacityTexture,this._thinFilmWeight,this._thinFilmWeightTexture,this._thinFilmThickness,this._thinFilmThicknessMin,this._thinFilmThicknessTexture,this._thinFilmIor,this._emissionLuminance,this._emissionColor,this._emissionColorTexture,this._ambientOcclusionTexture}get hasRenderTargetTextures(){return!!(h.ReflectionTextureEnabled&&this._radianceTexture&&this._radianceTexture.isRenderTarget)||this._cacheHasRenderTargetTextures}get isPrePassCapable(){return!this.disableDepthWrite}getClassName(){return"OpenPBRMaterial"}get transparencyMode(){return this._transparencyMode}set transparencyMode(e){this._transparencyMode!==e&&(this._transparencyMode=e,this._markAllSubMeshesAsTexturesAndMiscDirty())}_shouldUseAlphaFromBaseColorTexture(){return this._hasAlphaChannel()&&this._transparencyMode!==t.MATERIAL_OPAQUE&&!this.geometryOpacityTexture}_hasAlphaChannel(){return null!=this.baseColorTexture&&this.baseColorTexture.hasAlpha&&this._useAlphaFromBaseColorTexture||null!=this.geometryOpacityTexture}clone(e,t=!0,s=""){const i=_.Clone((()=>new he(e,this.getScene())),this,{cloneTexturesOnlyOnce:t});return i.id=e,i.name=e,this.stencil.copyTo(i.stencil),this._clonePlugins(i,s),i}serialize(){const e=super.serialize();return e.customType="BABYLON.OpenPBRMaterial",e}static Parse(e,s,i){const r=_.Parse((()=>new he(e.name,s)),e,s,i);return e.stencil&&r.stencil.parse(e.stencil,s,i),t._ParsePlugins(e,r,s,i),r}forceCompilation(e,t,s){const i={clipPlane:!1,useInstances:!1,...s};this._uniformBufferLayoutBuilt||this.buildUniformLayout(),this._callbackPluginEventGeneric(4,this._eventInfo);(()=>{if(this._breakShaderLoadedCheck)return;const s=new ne({...this._eventInfo.defineNames||{},...this._samplerDefines||{}}),r=this._prepareEffect(e,e,s,void 0,void 0,i.useInstances,i.clipPlane);this._onEffectCreatedObservable&&(te.effect=r,te.subMesh=null,this._onEffectCreatedObservable.notifyObservers(te)),r.isReady()?t&&t(this):r.onCompileObservable.add((()=>{t&&t(this)}))})()}isReadyForSubMesh(e,t,s){this._uniformBufferLayoutBuilt||this.buildUniformLayout();const i=t._drawWrapper;if(i.effect&&this.isFrozen&&i._wasPreviouslyReady&&i._wasPreviouslyUsingInstances===s)return!0;t.materialDefines||(this._callbackPluginEventGeneric(4,this._eventInfo),t.materialDefines=new ne({...this._eventInfo.defineNames||{},...this._samplerDefines||{}}));const r=t.materialDefines;if(this._isReadyForSubMesh(t))return!0;const a=this.getScene(),o=a.getEngine();if(r._areTexturesDirty&&(this._eventInfo.hasRenderTargetTextures=!1,this._callbackPluginEventHasRenderTargetTextures(this._eventInfo),this._cacheHasRenderTargetTextures=this._eventInfo.hasRenderTargetTextures,a.texturesEnabled)){for(const e in this._samplersList){const t=this._samplersList[e];if(t.value&&!t.value.isReadyOrNotBlocking())return!1}const e=this._getRadianceTexture();if(e&&h.ReflectionTextureEnabled){if(!e.isReadyOrNotBlocking())return!1;if(e.irradianceTexture){if(!e.irradianceTexture.isReadyOrNotBlocking())return!1}else if(!e.sphericalPolynomial&&e.getInternalTexture()?._sphericalPolynomialPromise)return!1}if(this._environmentBRDFTexture&&h.ReflectionTextureEnabled&&!this._environmentBRDFTexture.isReady())return!1;if(he._noiseTextures[a.uniqueId]&&!he._noiseTextures[a.uniqueId].isReady())return!1}if(this._eventInfo.isReadyForSubMesh=!0,this._eventInfo.defines=r,this._eventInfo.subMesh=t,this._callbackPluginEventIsReadyForSubMesh(this._eventInfo),!this._eventInfo.isReadyForSubMesh)return!1;if(r._areImageProcessingDirty&&this._imageProcessingConfiguration&&!this._imageProcessingConfiguration.isReady())return!1;if(r.AREALIGHTUSED)for(let t=0;t<e.lightSources.length;t++)if(!e.lightSources[t]._isReady())return!1;o.getCaps().standardDerivatives||e.isVerticesDataPresent(T.NormalKind)||(e.createNormals(!0),n.Warn("OpenPBRMaterial: Normals have been created for the mesh: "+e.name));const l=t.effect,u=r._areLightsDisposed;let _=this._prepareEffect(e,t.getRenderingMesh(),r,this.onCompiled,this.onError,s,null),A=!1;if(_)if(this._onEffectCreatedObservable&&(te.effect=_,te.subMesh=t,this._onEffectCreatedObservable.notifyObservers(te)),this.allowShaderHotSwapping&&l&&!_.isReady()){if(_=l,r.markAsUnprocessed(),A=this.isFrozen,u)return r._areLightsDisposed=!0,!1}else a.resetCachedMaterial(),t.setEffect(_,r,this._materialContext);return!(!t.effect||!t.effect.isReady())&&(r._renderId=a.getRenderId(),i._wasPreviouslyReady=!A,i._wasPreviouslyUsingInstances=!!s,this._checkScenePerformancePriority(),!0)}buildUniformLayout(){const e=this._uniformBuffer;e.addUniform("vTangentSpaceParams",2),e.addUniform("vLightingIntensity",4),e.addUniform("pointSize",1),e.addUniform("vDebugMode",2),e.addUniform("cameraInfo",4),A(e,!0,!0,!0,!0,!0),Object.values(this._uniformsList).forEach((t=>{e.addUniform(t.name,t.numComponents)})),Object.values(this._samplersList).forEach((t=>{e.addUniform(t.samplerInfoName,2),e.addUniform(t.samplerMatrixName,16)})),super.buildUniformLayout()}bindForSubMesh(e,t,s){const r=this.getScene(),a=s.materialDefines;if(!a)return;const n=s.effect;if(!n)return;this._activeEffect=n,t.getMeshUniformBuffer().bindToEffect(n,"Mesh"),t.transferToEffect(e);const o=r.getEngine();this._uniformBuffer.bindToEffect(n,"Material"),this.prePassConfiguration.bindForSubMesh(this._activeEffect,r,t,e,this.isFrozen),c.Bind(o.currentRenderPassId,this._activeEffect,t,e,this);const h=r.activeCamera;h?this._uniformBuffer.updateFloat4("cameraInfo",h.minZ,h.maxZ,0,0):this._uniformBuffer.updateFloat4("cameraInfo",0,0,0,0),this._eventInfo.subMesh=s,this._callbackPluginEventHardBindForSubMesh(this._eventInfo),a.OBJECTSPACE_NORMALMAP&&(e.toNormalMatrix(this._normalMatrix),this.bindOnlyNormalMatrix(this._normalMatrix));const l=this._mustRebind(r,n,s,t.visibility);m(t,this._activeEffect,this.prePassConfiguration);let u=null;const _=this._uniformBuffer;if(l){if(this.bindViewProjection(n),u=this._getRadianceTexture(),!_.useUbo||!this.isFrozen||!_.isSync||s._drawWrapper._forceRebindOnNextCall){if(r.texturesEnabled){for(const e in this._samplersList){const t=this._samplersList[e];t.value&&(_.updateFloat2(t.samplerInfoName,t.value.coordinatesIndex,t.value.level),E(t.value,_,t.samplerPrefix))}this.geometryNormalTexture&&(r._mirroredCameraPosition?_.updateFloat2("vTangentSpaceParams",this._invertNormalMapX?1:-1,this._invertNormalMapY?1:-1):_.updateFloat2("vTangentSpaceParams",this._invertNormalMapX?-1:1,this._invertNormalMapY?-1:1)),p(r,a,_,i.White(),u,this.realTimeFiltering,!0,!0,!0,!0,!0)}this.pointsCloud&&_.updateFloat("pointSize",this.pointSize),Object.values(this._uniformsList).forEach((e=>{4===e.numComponents?(e.populateVectorFromLinkedProperties(R.Vector4[0]),_.updateVector4(e.name,R.Vector4[0])):3===e.numComponents?(e.populateVectorFromLinkedProperties(R.Vector3[0]),_.updateVector3(e.name,R.Vector3[0])):2===e.numComponents?(e.populateVectorFromLinkedProperties(R.Vector2[0]),_.updateFloat2(e.name,R.Vector2[0].x,R.Vector2[0].y)):1===e.numComponents&&_.updateFloat(e.name,e.linkedProperties[Object.keys(e.linkedProperties)[0]].value)})),this._lightingInfos.x=this.directIntensity,this._lightingInfos.y=this.emissionLuminance,this._lightingInfos.z=this.environmentIntensity*r.environmentIntensity,this._lightingInfos.w=1,_.updateVector4("vLightingIntensity",this._lightingInfos),_.updateFloat2("vDebugMode",this.debugLimit,this.debugFactor)}if(r.texturesEnabled){for(const e in this._samplersList){const t=this._samplersList[e];t.value&&_.setTexture(t.samplerName,t.value)}g(r,a,_,u,this.realTimeFiltering),a.ENVIRONMENTBRDF&&_.setTexture("environmentBrdfSampler",this._environmentBRDFTexture),a.ANISOTROPIC&&_.setTexture("blueNoiseSampler",he._noiseTextures[this.getScene().uniqueId])}this.getScene().useOrderIndependentTransparency&&this.needAlphaBlendingForMesh(t)&&this.getScene().depthPeelingRenderer.bind(n),this._eventInfo.subMesh=s,this._callbackPluginEventBindForSubMesh(this._eventInfo),S(this._activeEffect,this,r),this.bindEyePosition(n)}else r.getEngine()._features.needToAlwaysBindUniformBuffers&&(this._needToBindSceneUbo=!0);!l&&this.isFrozen||(r.lightsEnabled&&!this._disableLighting&&L(r,t,this._activeEffect,a,this._maxSimultaneousLights),(r.fogEnabled&&t.applyFog&&r.fogMode!==d.FOGMODE_NONE||u||t.receiveShadows||a.PREPASS)&&this.bindView(n),I(r,t,this._activeEffect,!0),a.NUM_MORPH_INFLUENCERS&&f(t,this._activeEffect),a.BAKED_VERTEX_ANIMATION_TEXTURE&&t.bakedVertexAnimationManager?.bind(n,a.INSTANCES),this._imageProcessingConfiguration.bind(this._activeEffect),O(a,this._activeEffect,r)),this._afterBind(t,this._activeEffect,s),_.update()}getAnimatables(){const e=super.getAnimatables();for(const t in this._samplersList){const s=this._samplersList[t];s.value&&s.value.animations&&s.value.animations.length>0&&e.push(s.value)}return this._radianceTexture&&this._radianceTexture.animations&&this._radianceTexture.animations.length>0&&e.push(this._radianceTexture),e}getActiveTextures(){const e=super.getActiveTextures();for(const t in this._samplersList){const s=this._samplersList[t];s.value&&e.push(s.value)}return this._radianceTexture&&e.push(this._radianceTexture),e}hasTexture(e){if(super.hasTexture(e))return!0;for(const t in this._samplersList){if(this._samplersList[t].value===e)return!0}return this._radianceTexture===e}setPrePassRenderer(){return!1}dispose(e,t){if(this._breakShaderLoadedCheck=!0,t){this._environmentBRDFTexture&&this.getScene().environmentBRDFTexture!==this._environmentBRDFTexture&&this._environmentBRDFTexture.dispose();for(const e in this._samplersList){const t=this._samplersList[e];t.value?.dispose()}this._radianceTexture?.dispose()}this._renderTargets.dispose(),this._imageProcessingConfiguration&&this._imageProcessingObserver&&this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver),super.dispose(e,t)}_getRadianceTexture(){return this._radianceTexture?this._radianceTexture:this.getScene().environmentTexture}_prepareEffect(e,t,i,r=null,a=null,n=null,o=null){if(this._prepareDefines(e,t,i,n,o),!i.isDirty)return null;i.markAsProcessed();const h=this.getScene().getEngine(),l=new P;let _=0;i.USESPHERICALINVERTEX&&l.addFallback(_++,"USESPHERICALINVERTEX"),i.FOG&&l.addFallback(_,"FOG"),i.SPECULARAA&&l.addFallback(_,"SPECULARAA"),i.POINTSIZE&&l.addFallback(_,"POINTSIZE"),i.LOGARITHMICDEPTH&&l.addFallback(_,"LOGARITHMICDEPTH"),i.PARALLAX&&l.addFallback(_,"PARALLAX"),i.PARALLAX_RHS&&l.addFallback(_,"PARALLAX_RHS"),i.PARALLAXOCCLUSION&&l.addFallback(_++,"PARALLAXOCCLUSION"),i.ENVIRONMENTBRDF&&l.addFallback(_++,"ENVIRONMENTBRDF"),i.TANGENT&&l.addFallback(_++,"TANGENT"),_=y(i,l,this._maxSimultaneousLights,_++),i.SPECULARTERM&&l.addFallback(_++,"SPECULARTERM"),i.USESPHERICALFROMREFLECTIONMAP&&l.addFallback(_++,"USESPHERICALFROMREFLECTIONMAP"),i.USEIRRADIANCEMAP&&l.addFallback(_++,"USEIRRADIANCEMAP"),i.NORMAL&&l.addFallback(_++,"NORMAL"),i.VERTEXCOLOR&&l.addFallback(_++,"VERTEXCOLOR"),i.MORPHTARGETS&&l.addFallback(_++,"MORPHTARGETS"),i.MULTIVIEW&&l.addFallback(0,"MULTIVIEW");const A=[T.PositionKind];i.NORMAL&&A.push(T.NormalKind),i.TANGENT&&A.push(T.TangentKind);for(let e=1;e<=s.MAX_SUPPORTED_UV_SETS;++e)i["UV"+e]&&A.push(`uv${1===e?"":e}`);i.VERTEXCOLOR&&A.push(T.ColorKind),C(A,e,i,l),M(A,i),N(A,e,i),x(A,e,i);let m="openpbr";const E=["world","view","viewProjection","vEyePosition","vLightsType","visibility","vFogInfos","vFogColor","pointSize","mBones","normalMatrix","vLightingIntensity","logarithmicDepthConstant","vTangentSpaceParams","boneTextureWidth","vDebugMode","morphTargetTextureInfo","morphTargetTextureIndices","cameraInfo"];for(const e in this._uniformsList)E.push(e);const p=["environmentBrdfSampler","blueNoiseSampler","boneSampler","morphTargets","oitDepthSampler","oitFrontColorSampler","areaLightsLTC1Sampler","areaLightsLTC2Sampler"];for(const e in this._samplersList){const t=this._samplersList[e];p.push(t.samplerName),E.push(t.samplerInfoName),E.push(t.samplerMatrixName)}F(E,p,!0);const R=["Material","Scene","Mesh"],g={maxSimultaneousLights:this._maxSimultaneousLights,maxSimultaneousMorphTargets:i.NUM_MORPH_INFLUENCERS};this._eventInfo.fallbacks=l,this._eventInfo.fallbackRank=_,this._eventInfo.defines=i,this._eventInfo.uniforms=E,this._eventInfo.attributes=A,this._eventInfo.samplers=p,this._eventInfo.uniformBuffersNames=R,this._eventInfo.customCode=void 0,this._eventInfo.mesh=e,this._eventInfo.indexParameters=g,this._callbackPluginEventGeneric(128,this._eventInfo),c.AddUniformsAndSamplers(E,p),u.AddUniforms(E),b(E),D&&(D.PrepareUniforms(E,i),D.PrepareSamplers(p,i)),v({uniformsNames:E,uniformBuffersNames:R,samplers:p,defines:i,maxSimultaneousLights:this._maxSimultaneousLights});const S={};this.customShaderNameResolve&&(m=this.customShaderNameResolve(m,E,R,p,i,A,S));const L=i.toString(),d=h.createEffect(m,{attributes:A,uniformsNames:E,uniformBuffersNames:R,samplers:p,defines:L,fallbacks:l,onCompiled:r,onError:a,indexParameters:g,processFinalCode:S.processFinalCode,processCodeAfterIncludes:this._eventInfo.customCode,multiTarget:i.PREPASS,shaderLanguage:this._shaderLanguage,extraInitializationsAsync:this._shadersLoaded?void 0:async()=>{1===this.shaderLanguage?await Promise.all([import("./openpbr.vertex-BAkCuefv.esm.min.js"),import("./openpbr.fragment-BJut9zIy.esm.min.js")]):await Promise.all([import("./openpbr.vertex-CpFHe12i.esm.min.js"),import("./openpbr.fragment-CSRqAuyS.esm.min.js")]),this._shadersLoaded=!0}},h);return this._eventInfo.customCode=void 0,d}_prepareDefines(e,i,r,a=null,n=null){const o=i.hasThinInstances,l=this.getScene(),u=l.getEngine();U(l,e,r,!0,this._maxSimultaneousLights,this._disableLighting),r._needNormals=!0,k(l,r);const _=this.needAlphaBlendingForMesh(e)&&this.getScene().useOrderIndependentTransparency;if(H(l,r,this.canRenderToMRT&&!_),G(l,r,_),c.PrepareDefines(u.currentRenderPassId,e,r),r.METALLICWORKFLOW=!0,r._areTexturesDirty){r._needUVs=!1;for(let e=1;e<=s.MAX_SUPPORTED_UV_SETS;++e)r["MAINUV"+e]=!1;if(l.texturesEnabled){for(const e in this._samplersList){const t=this._samplersList[e];t.value?(B(t.value,r,t.textureDefine),r[t.textureDefine+"_GAMMA"]=t.value.gammaSpace):r[t.textureDefine]=!1}const e=this._getRadianceTexture(),t=this._forceIrradianceInFragment||this.realTimeFiltering||this._twoSidedLighting||u.getCaps().maxVaryingVectors<=8||null!=this._baseDiffuseRoughnessTexture;w(l,e,r,this.realTimeFiltering,this.realTimeFilteringQuality,!t),this._baseMetalnessTexture&&(r.AOSTOREINMETALMAPRED=this._useAmbientOcclusionFromMetallicTextureRed),r.SPECULAR_WEIGHT_IN_ALPHA=this._useSpecularWeightFromAlpha,r.SPECULAR_WEIGHT_FROM_SPECULAR_COLOR_TEXTURE=this._useSpecularWeightFromSpecularColorTexture,r.SPECULAR_ROUGHNESS_ANISOTROPY_FROM_TANGENT_TEXTURE=this._useSpecularRoughnessAnisotropyFromTangentTexture,r.COAT_ROUGHNESS_ANISOTROPY_FROM_TANGENT_TEXTURE=this._useCoatRoughnessAnisotropyFromTangentTexture,r.ROUGHNESSSTOREINMETALMAPGREEN=this._useRoughnessFromMetallicTextureGreen,r.METALLNESSSTOREINMETALMAPBLUE=this._useMetallicFromMetallicTextureBlue,r.THIN_FILM_THICKNESS_FROM_THIN_FILM_TEXTURE=this._useThinFilmThicknessFromTextureGreen,this.geometryNormalTexture?(this._useParallax&&this.baseColorTexture&&h.DiffuseTextureEnabled?(r.PARALLAX=!0,r.PARALLAX_RHS=l.useRightHandedSystem,r.PARALLAXOCCLUSION=!!this._useParallaxOcclusion):r.PARALLAX=!1,r.OBJECTSPACE_NORMALMAP=this._useObjectSpaceNormalMap):(r.PARALLAX=!1,r.PARALLAX_RHS=!1,r.PARALLAXOCCLUSION=!1,r.OBJECTSPACE_NORMALMAP=!1),this._environmentBRDFTexture&&h.ReflectionTextureEnabled?(r.ENVIRONMENTBRDF=!0,r.ENVIRONMENTBRDF_RGBD=this._environmentBRDFTexture.isRGBD):(r.ENVIRONMENTBRDF=!1,r.ENVIRONMENTBRDF_RGBD=!1),this._shouldUseAlphaFromBaseColorTexture()?r.ALPHA_FROM_BASE_COLOR_TEXTURE=!0:r.ALPHA_FROM_BASE_COLOR_TEXTURE=!1}this._lightFalloff===t.LIGHTFALLOFF_STANDARD?(r.USEPHYSICALLIGHTFALLOFF=!1,r.USEGLTFLIGHTFALLOFF=!1):this._lightFalloff===t.LIGHTFALLOFF_GLTF?(r.USEPHYSICALLIGHTFALLOFF=!1,r.USEGLTFLIGHTFALLOFF=!0):(r.USEPHYSICALLIGHTFALLOFF=!0,r.USEGLTFLIGHTFALLOFF=!1),!this.backFaceCulling&&this._twoSidedLighting?r.TWOSIDEDLIGHTING=!0:r.TWOSIDEDLIGHTING=!1,r.MIRRORED=!!l._mirroredCameraPosition,r.SPECULARAA=u.getCaps().standardDerivatives&&this._enableSpecularAntiAliasing}(r._areTexturesDirty||r._areMiscDirty)&&(r.ALPHATESTVALUE=`${this._alphaCutOff}${this._alphaCutOff%1==0?".":""}`,r.PREMULTIPLYALPHA=this.alphaMode===s.ALPHA_PREMULTIPLIED||this.alphaMode===s.ALPHA_PREMULTIPLIED_PORTERDUFF,r.ALPHABLEND=this.needAlphaBlendingForMesh(e)),r._areImageProcessingDirty&&this._imageProcessingConfiguration&&this._imageProcessingConfiguration.prepareDefines(r),r.FORCENORMALFORWARD=this._forceNormalForward,r.RADIANCEOCCLUSION=this._useRadianceOcclusion,r.HORIZONOCCLUSION=this._useHorizonOcclusion,(this.specularRoughnessAnisotropy>0||this.coatRoughnessAnisotropy>0)&&he._noiseTextures[l.uniqueId]&&h.ReflectionTextureEnabled?(r.ANISOTROPIC=!0,e.isVerticesDataPresent(T.TangentKind)||(r._needUVs=!0,r.MAINUV1=!0),this._useGltfStyleAnisotropy&&(r.USE_GLTF_STYLE_ANISOTROPY=!0),r.ANISOTROPIC_BASE=this.specularRoughnessAnisotropy>0,r.ANISOTROPIC_COAT=this.coatRoughnessAnisotropy>0):(r.ANISOTROPIC=!1,r.USE_GLTF_STYLE_ANISOTROPY=!1,r.ANISOTROPIC_BASE=!1,r.ANISOTROPIC_COAT=!1),r.THIN_FILM=this.thinFilmWeight>0,r.IRIDESCENCE=this.thinFilmWeight>0,r._areMiscDirty&&(W(e,l,this._useLogarithmicDepth,this.pointsCloud,this.fogEnabled,this.needAlphaTestingForMesh(e),r,this._applyDecalMapAfterDetailMap,this._useVertexPulling,i,this._setVertexOutputInvariant),r.UNLIT=this._unlit||(this.pointsCloud||this.wireframe)&&!e.isVerticesDataPresent(T.NormalKind),r.DEBUGMODE=this._debugMode),V(l,u,this,r,!!a,n,o),this._eventInfo.defines=r,this._eventInfo.mesh=e,this._callbackPluginEventPrepareDefinesBeforeAttributes(this._eventInfo),X(e,r,!0,!0,!0,this._transparencyMode!==t.MATERIAL_OPAQUE),this._callbackPluginEventPrepareDefines(this._eventInfo)}}he._noiseTextures={},he.ForceGLSL=!1,Z([$("_markAllSubMeshesAsTexturesDirty","baseWeight")],he.prototype,"_baseWeight",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","baseWeightTexture")],he.prototype,"_baseWeightTexture",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","baseColor")],he.prototype,"_baseColor",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","baseColorTexture")],he.prototype,"_baseColorTexture",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","baseDiffuseRoughness")],he.prototype,"_baseDiffuseRoughness",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","baseDiffuseRoughnessTexture")],he.prototype,"_baseDiffuseRoughnessTexture",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","baseMetalness")],he.prototype,"_baseMetalness",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","baseMetalnessTexture")],he.prototype,"_baseMetalnessTexture",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","specularWeight")],he.prototype,"_specularWeight",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","specularWeightTexture")],he.prototype,"_specularWeightTexture",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","specularColor")],he.prototype,"_specularColor",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","specularColorTexture")],he.prototype,"_specularColorTexture",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","specularRoughness")],he.prototype,"_specularRoughness",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","specularRoughnessTexture")],he.prototype,"_specularRoughnessTexture",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","specularRoughnessAnisotropy")],he.prototype,"_specularRoughnessAnisotropy",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","specularRoughnessAnisotropyTexture")],he.prototype,"_specularRoughnessAnisotropyTexture",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","specularIor")],he.prototype,"_specularIor",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","coatWeight")],he.prototype,"_coatWeight",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","coatWeightTexture")],he.prototype,"_coatWeightTexture",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","coatColor")],he.prototype,"_coatColor",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","coatColorTexture")],he.prototype,"_coatColorTexture",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","coatRoughness")],he.prototype,"_coatRoughness",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","coatRoughnessTexture")],he.prototype,"_coatRoughnessTexture",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","coatRoughnessAnisotropy")],he.prototype,"_coatRoughnessAnisotropy",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","coatRoughnessAnisotropyTexture")],he.prototype,"_coatRoughnessAnisotropyTexture",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","coatIor")],he.prototype,"_coatIor",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","coatDarkening")],he.prototype,"_coatDarkening",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","coatDarkeningTexture")],he.prototype,"_coatDarkeningTexture",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","geometryNormalTexture")],he.prototype,"_geometryNormalTexture",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","geometryTangent")],he.prototype,"_geometryTangent",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","geometryTangentTexture")],he.prototype,"_geometryTangentTexture",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","geometryCoatNormalTexture")],he.prototype,"_geometryCoatNormalTexture",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","geometryCoatTangent")],he.prototype,"_geometryCoatTangent",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","geometryCoatTangentTexture")],he.prototype,"_geometryCoatTangentTexture",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","geometryOpacity")],he.prototype,"_geometryOpacity",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","geometryOpacityTexture")],he.prototype,"_geometryOpacityTexture",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","emissionLuminance")],he.prototype,"_emissionLuminance",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","emissionColor")],he.prototype,"_emissionColor",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","emissionColorTexture")],he.prototype,"_emissionColorTexture",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","thinFilmWeight")],he.prototype,"_thinFilmWeight",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","thinFilmWeightTexture")],he.prototype,"_thinFilmWeightTexture",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","thinFilmThickness")],he.prototype,"_thinFilmThickness",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","thinFilmThicknessMin")],he.prototype,"_thinFilmThicknessMin",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","thinFilmThicknessTexture")],he.prototype,"_thinFilmThicknessTexture",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","thinFilmIor")],he.prototype,"_thinFilmIor",void 0),Z([$("_markAllSubMeshesAsTexturesDirty","ambientOcclusionTexture")],he.prototype,"_ambientOcclusionTexture",void 0),Z([q(),J("_markAllSubMeshesAsTexturesDirty")],he.prototype,"directIntensity",void 0),Z([q(),J("_markAllSubMeshesAsTexturesDirty")],he.prototype,"environmentIntensity",void 0),Z([q(),J("_markAllSubMeshesAsTexturesDirty")],he.prototype,"useSpecularWeightFromTextureAlpha",void 0),Z([q(),J("_markAllSubMeshesAsTexturesAndMiscDirty")],he.prototype,"forceAlphaTest",void 0),Z([q(),J("_markAllSubMeshesAsTexturesAndMiscDirty")],he.prototype,"alphaCutOff",void 0),Z([q(),J("_markAllSubMeshesAsTexturesDirty")],he.prototype,"useAmbientOcclusionFromMetallicTextureRed",void 0),Z([q(),J("_markAllSubMeshesAsTexturesDirty")],he.prototype,"useAmbientInGrayScale",void 0),Z([q()],he.prototype,"usePhysicalLightFalloff",null),Z([q()],he.prototype,"useGLTFLightFalloff",null),Z([q(),J("_markAllSubMeshesAsTexturesDirty")],he.prototype,"useObjectSpaceNormalMap",void 0),Z([q(),J("_markAllSubMeshesAsTexturesDirty")],he.prototype,"useParallax",void 0),Z([q(),J("_markAllSubMeshesAsTexturesDirty")],he.prototype,"useParallaxOcclusion",void 0),Z([q(),J("_markAllSubMeshesAsTexturesDirty")],he.prototype,"parallaxScaleBias",void 0),Z([q(),J("_markAllSubMeshesAsLightsDirty")],he.prototype,"disableLighting",void 0),Z([q(),J("_markAllSubMeshesAsTexturesDirty")],he.prototype,"forceIrradianceInFragment",void 0),Z([q(),J("_markAllSubMeshesAsLightsDirty")],he.prototype,"maxSimultaneousLights",void 0),Z([q(),J("_markAllSubMeshesAsTexturesDirty")],he.prototype,"invertNormalMapX",void 0),Z([q(),J("_markAllSubMeshesAsTexturesDirty")],he.prototype,"invertNormalMapY",void 0),Z([q(),J("_markAllSubMeshesAsTexturesDirty")],he.prototype,"twoSidedLighting",void 0),Z([q(),J("_markAllSubMeshesAsTexturesDirty")],he.prototype,"useAlphaFresnel",void 0),Z([q(),J("_markAllSubMeshesAsTexturesDirty")],he.prototype,"useLinearAlphaFresnel",void 0),Z([J("_markAllSubMeshesAsTexturesDirty")],he.prototype,"environmentBRDFTexture",void 0),Z([q(),J("_markAllSubMeshesAsTexturesDirty")],he.prototype,"forceNormalForward",void 0),Z([q(),J("_markAllSubMeshesAsTexturesDirty")],he.prototype,"enableSpecularAntiAliasing",void 0),Z([q(),J("_markAllSubMeshesAsTexturesDirty")],he.prototype,"useHorizonOcclusion",void 0),Z([q(),J("_markAllSubMeshesAsTexturesDirty")],he.prototype,"useRadianceOcclusion",void 0),Z([q(),J("_markAllSubMeshesAsMiscDirty")],he.prototype,"unlit",void 0),Z([q(),J("_markAllSubMeshesAsMiscDirty")],he.prototype,"applyDecalMapAfterDetailMap",void 0),Z([J("_markAllSubMeshesAsMiscDirty")],he.prototype,"debugMode",void 0),Z([q()],he.prototype,"transparencyMode",null),ee("BABYLON.OpenPBRMaterial",he);export{he as OpenPBRMaterial,ne as OpenPBRMaterialDefines};
//# sourceMappingURL=openPbrMaterial-Brhqfoty.esm.min.js.map
