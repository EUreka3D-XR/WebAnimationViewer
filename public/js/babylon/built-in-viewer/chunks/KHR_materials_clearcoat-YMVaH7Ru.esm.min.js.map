{"version":3,"file":"KHR_materials_clearcoat-YMVaH7Ru.esm.min.js","sources":["../../../../../dev/loaders/dist/glTF/2.0/Extensions/KHR_materials_clearcoat.js"],"sourcesContent":["import { GLTFLoader } from \"../glTFLoader\";\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\nimport { Color3 } from \"core/Maths/math.color\";\nconst NAME = \"KHR_materials_clearcoat\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_clearcoat/README.md)\n * [Playground Sample](https://www.babylonjs-playground.com/frame.html#7F7PN6#8)\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_materials_clearcoat {\n    /**\n     * @internal\n     */\n    constructor(loader) {\n        /**\n         * The name of this extension.\n         */\n        this.name = NAME;\n        /**\n         * Defines a number that determines the order the extensions are applied.\n         */\n        this.order = 190;\n        this._loader = loader;\n        this.enabled = this._loader.isExtensionUsed(NAME);\n    }\n    /** @internal */\n    dispose() {\n        this._loader = null;\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line no-restricted-syntax\n    loadMaterialPropertiesAsync(context, material, babylonMaterial) {\n        return GLTFLoader.LoadExtensionAsync(context, material, this.name, async (extensionContext, extension) => {\n            const promises = new Array();\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n            promises.push(this._loadClearCoatPropertiesAsync(extensionContext, extension, babylonMaterial));\n            const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\n            if (extension.extensions && extension.extensions.KHR_materials_clearcoat_darkening) {\n                const darkeningExtension = extension.extensions.KHR_materials_clearcoat_darkening;\n                promises.push(this._loadClearCoatDarkeningPropertiesAsync(extensionContext, darkeningExtension, babylonMaterial));\n            }\n            if (extension.extensions && extension.extensions.KHR_materials_clearcoat_ior) {\n                const iorExtension = extension.extensions.KHR_materials_clearcoat_ior;\n                let ior = 1.5;\n                if (iorExtension.clearcoatIor !== undefined) {\n                    ior = iorExtension.clearcoatIor;\n                }\n                adapter.coatIor = ior;\n            }\n            if (extension.extensions && extension.extensions.KHR_materials_clearcoat_anisotropy) {\n                const anisotropyExtension = extension.extensions.KHR_materials_clearcoat_anisotropy;\n                promises.push(this._loadClearCoatAnisotropyPropertiesAsync(extensionContext, anisotropyExtension, babylonMaterial));\n            }\n            if (extension.extensions && extension.extensions.KHR_materials_clearcoat_color) {\n                const colorExtension = extension.extensions.KHR_materials_clearcoat_color;\n                promises.push(this._loadClearCoatColorPropertiesAsync(extensionContext, colorExtension, babylonMaterial));\n            }\n            await Promise.all(promises);\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\n    _loadClearCoatPropertiesAsync(context, properties, babylonMaterial) {\n        const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\n        const promises = new Array();\n        // Set non-texture properties immediately\n        adapter.configureCoat();\n        adapter.coatWeight = properties.clearcoatFactor !== undefined ? properties.clearcoatFactor : 0;\n        adapter.coatRoughness = properties.clearcoatRoughnessFactor !== undefined ? properties.clearcoatRoughnessFactor : 0;\n        // Load textures\n        if (properties.clearcoatTexture) {\n            promises.push(this._loader.loadTextureInfoAsync(`${context}/clearcoatTexture`, properties.clearcoatTexture, (texture) => {\n                texture.name = `${babylonMaterial.name} (ClearCoat)`;\n                adapter.coatWeightTexture = texture;\n            }));\n        }\n        if (properties.clearcoatRoughnessTexture) {\n            properties.clearcoatRoughnessTexture.nonColorData = true;\n            promises.push(this._loader.loadTextureInfoAsync(`${context}/clearcoatRoughnessTexture`, properties.clearcoatRoughnessTexture, (texture) => {\n                texture.name = `${babylonMaterial.name} (ClearCoat Roughness)`;\n                adapter.coatRoughnessTexture = texture;\n            }));\n        }\n        if (properties.clearcoatNormalTexture) {\n            properties.clearcoatNormalTexture.nonColorData = true;\n            promises.push(this._loader.loadTextureInfoAsync(`${context}/clearcoatNormalTexture`, properties.clearcoatNormalTexture, (texture) => {\n                texture.name = `${babylonMaterial.name} (ClearCoat Normal)`;\n                adapter.geometryCoatNormalTexture = texture;\n                if (properties.clearcoatNormalTexture?.scale != undefined) {\n                    adapter.geometryCoatNormalTextureScale = properties.clearcoatNormalTexture.scale;\n                }\n            }));\n            adapter.setNormalMapInversions(!babylonMaterial.getScene().useRightHandedSystem, babylonMaterial.getScene().useRightHandedSystem);\n        }\n        // eslint-disable-next-line github/no-then\n        return Promise.all(promises).then(() => { });\n    }\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\n    _loadClearCoatDarkeningPropertiesAsync(context, properties, babylonMaterial) {\n        const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\n        const promises = new Array();\n        adapter.coatDarkening = properties.clearcoatDarkeningFactor !== undefined ? properties.clearcoatDarkeningFactor : 1;\n        if (properties.clearcoatDarkeningTexture) {\n            properties.clearcoatDarkeningTexture.nonColorData = true;\n            promises.push(this._loader.loadTextureInfoAsync(`${context}/clearcoatDarkeningTexture`, properties.clearcoatDarkeningTexture, (texture) => {\n                texture.name = `${babylonMaterial.name} (ClearCoat Darkening)`;\n                adapter.coatDarkeningTexture = texture;\n            }));\n        }\n        // eslint-disable-next-line github/no-then\n        return Promise.all(promises).then(() => { });\n    }\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\n    _loadClearCoatColorPropertiesAsync(context, properties, babylonMaterial) {\n        const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\n        const promises = new Array();\n        const colorFactor = Color3.White();\n        if (properties.clearcoatColorFactor !== undefined) {\n            colorFactor.fromArray(properties.clearcoatColorFactor);\n        }\n        adapter.coatColor = colorFactor;\n        if (properties.clearcoatColorTexture) {\n            promises.push(this._loader.loadTextureInfoAsync(`${context}/clearcoatColorTexture`, properties.clearcoatColorTexture, (texture) => {\n                texture.name = `${babylonMaterial.name} (ClearCoat Color)`;\n                adapter.coatColorTexture = texture;\n            }));\n        }\n        // eslint-disable-next-line github/no-then\n        return Promise.all(promises).then(() => { });\n    }\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\n    _loadClearCoatAnisotropyPropertiesAsync(context, properties, babylonMaterial) {\n        const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\n        const promises = new Array();\n        // Set non-texture properties immediately\n        const clearcoatAnisotropyWeight = properties.clearcoatAnisotropyStrength ?? 0;\n        const clearcoatAnisotropyAngle = properties.clearcoatAnisotropyRotation ?? 0;\n        adapter.coatRoughnessAnisotropy = clearcoatAnisotropyWeight;\n        adapter.geometryCoatTangentAngle = clearcoatAnisotropyAngle;\n        // Check if this is glTF-style anisotropy\n        const extensions = properties.extensions ?? {};\n        if (!extensions.EXT_materials_anisotropy_openpbr || !extensions.EXT_materials_anisotropy_openpbr.openPbrAnisotropyEnabled) {\n            adapter.configureGltfStyleAnisotropy(true);\n        }\n        // Load texture if present\n        if (properties.clearcoatAnisotropyTexture) {\n            properties.clearcoatAnisotropyTexture.nonColorData = true;\n            promises.push(this._loader.loadTextureInfoAsync(`${context}/clearcoatAnisotropyTexture`, properties.clearcoatAnisotropyTexture, (texture) => {\n                texture.name = `${babylonMaterial.name} (Clearcoat Anisotropy)`;\n                adapter.geometryCoatTangentTexture = texture;\n            }));\n        }\n        // eslint-disable-next-line github/no-then\n        return Promise.all(promises).then(() => { });\n    }\n}\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_clearcoat(loader));\n//# sourceMappingURL=KHR_materials_clearcoat.js.map"],"names":["NAME","KHR_materials_clearcoat","constructor","loader","this","name","order","_loader","enabled","isExtensionUsed","dispose","loadMaterialPropertiesAsync","context","material","babylonMaterial","GLTFLoader","LoadExtensionAsync","async","extensionContext","extension","promises","Array","push","_loadClearCoatPropertiesAsync","adapter","_getOrCreateMaterialAdapter","extensions","KHR_materials_clearcoat_darkening","darkeningExtension","_loadClearCoatDarkeningPropertiesAsync","KHR_materials_clearcoat_ior","iorExtension","ior","undefined","clearcoatIor","coatIor","KHR_materials_clearcoat_anisotropy","anisotropyExtension","_loadClearCoatAnisotropyPropertiesAsync","KHR_materials_clearcoat_color","colorExtension","_loadClearCoatColorPropertiesAsync","Promise","all","properties","configureCoat","coatWeight","clearcoatFactor","coatRoughness","clearcoatRoughnessFactor","clearcoatTexture","loadTextureInfoAsync","texture","coatWeightTexture","clearcoatRoughnessTexture","nonColorData","coatRoughnessTexture","clearcoatNormalTexture","geometryCoatNormalTexture","scale","geometryCoatNormalTextureScale","setNormalMapInversions","getScene","useRightHandedSystem","then","coatDarkening","clearcoatDarkeningFactor","clearcoatDarkeningTexture","coatDarkeningTexture","colorFactor","Color3","White","clearcoatColorFactor","fromArray","coatColor","clearcoatColorTexture","coatColorTexture","clearcoatAnisotropyWeight","clearcoatAnisotropyStrength","clearcoatAnisotropyAngle","clearcoatAnisotropyRotation","coatRoughnessAnisotropy","geometryCoatTangentAngle","EXT_materials_anisotropy_openpbr","openPbrAnisotropyEnabled","configureGltfStyleAnisotropy","clearcoatAnisotropyTexture","geometryCoatTangentTexture","unregisterGLTFExtension","registerGLTFExtension"],"mappings":"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"}