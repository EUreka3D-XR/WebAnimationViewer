import{T as e,bK as t,bJ as o}from"./index-BeBPThKX.esm.min.js";import{GLTFLoader as s}from"./glTFLoader-ASl42hNE.esm.min.js";import"./bone-4zSTwM2L.esm.min.js";import"./skeleton-BM6jc2S2.esm.min.js";import"./rawTexture-OHFtV4yv.esm.min.js";import"./assetContainer-C4iCgc7c.esm.min.js";import"./objectModelMapping-C_2yKgOV.esm.min.js";const n="KHR_texture_transform";class r{constructor(e){this.name=n,this._loader=e,this.enabled=this._loader.isExtensionUsed(n)}dispose(){this._loader=null}loadTextureInfoAsync(t,o,n){return s.LoadExtensionAsync(t,o,this.name,(async(s,r)=>await this._loader.loadTextureInfoAsync(t,o,(t=>{if(!(t instanceof e))throw new Error(`${s}: Texture type not supported`);r.offset&&(t.uOffset=r.offset[0],t.vOffset=r.offset[1]),t.uRotationCenter=0,t.vRotationCenter=0,r.rotation&&(t.wAng=-r.rotation),r.scale&&(t.uScale=r.scale[0],t.vScale=r.scale[1]),null!=r.texCoord&&(t.coordinatesIndex=r.texCoord),n(t)}))))}}t(n),o(n,!0,(e=>new r(e)));export{r as KHR_texture_transform};
//# sourceMappingURL=KHR_texture_transform-BC-CEDAO.esm.min.js.map
