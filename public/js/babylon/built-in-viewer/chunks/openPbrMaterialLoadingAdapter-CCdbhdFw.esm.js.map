{"version":3,"file":"openPbrMaterialLoadingAdapter-CCdbhdFw.esm.js","sources":["../../../../../dev/loaders/dist/glTF/2.0/openPbrMaterialLoadingAdapter.js"],"sourcesContent":["/**\n * Material Loading Adapter for OpenPBR materials that provides a unified OpenPBR-like interface.\n */\nexport class OpenPBRMaterialLoadingAdapter {\n    /**\n     * Creates a new instance of the OpenPBRMaterialLoadingAdapter.\n     * @param material - The OpenPBR material to adapt.\n     */\n    constructor(material) {\n        this._material = material;\n    }\n    /**\n     * Gets the underlying material\n     */\n    get material() {\n        return this._material;\n    }\n    /**\n     * Whether the material should be treated as unlit\n     */\n    get isUnlit() {\n        return this._material.unlit;\n    }\n    /**\n     * Sets whether the material should be treated as unlit\n     */\n    set isUnlit(value) {\n        this._material.unlit = value;\n    }\n    // ========================================\n    // CULLING PROPERTIES\n    // ========================================\n    /**\n     * Sets whether back face culling is enabled.\n     * @param value True to enable back face culling\n     */\n    set backFaceCulling(value) {\n        this._material.backFaceCulling = value;\n    }\n    /**\n     * Gets whether back face culling is enabled.\n     * @returns True if back face culling is enabled\n     */\n    get backFaceCulling() {\n        return this._material.backFaceCulling;\n    }\n    /**\n     * Sets whether two-sided lighting is enabled.\n     * @param value True to enable two-sided lighting\n     */\n    set twoSidedLighting(value) {\n        this._material.twoSidedLighting = value;\n    }\n    /**\n     * Gets whether two-sided lighting is enabled.\n     * @returns True if two-sided lighting is enabled\n     */\n    get twoSidedLighting() {\n        return this._material.twoSidedLighting;\n    }\n    // ========================================\n    // ALPHA PROPERTIES\n    // ========================================\n    /**\n     * Sets the alpha cutoff value for alpha testing.\n     * Note: OpenPBR doesn't have a direct equivalent, so this is a no-op.\n     * @param value The alpha cutoff threshold (ignored for OpenPBR)\n     */\n    set alphaCutOff(value) {\n        // OpenPBR doesn't have a direct equivalent, but could be implemented if needed\n    }\n    /**\n     * Gets the alpha cutoff value.\n     * @returns Default value of 0.5 (OpenPBR doesn't support this directly)\n     */\n    get alphaCutOff() {\n        return 0.5; // Default value\n    }\n    /**\n     * Sets whether to use alpha from the base color texture.\n     * Note: OpenPBR handles this differently through the baseColorTexture alpha channel.\n     * @param value True to use alpha from base color texture (handled automatically in OpenPBR)\n     */\n    set useAlphaFromBaseColorTexture(value) {\n        this._material._useAlphaFromBaseColorTexture = value;\n    }\n    /**\n     * Gets whether alpha is used from the base color texture.\n     * @returns Always false for OpenPBR as it's handled automatically\n     */\n    get useAlphaFromBaseColorTexture() {\n        return false;\n    }\n    /**\n     * Gets whether the transparency is treated as alpha coverage.\n     */\n    get transparencyAsAlphaCoverage() {\n        // OpenPBR doesn't support treating transparency as alpha coverage.\n        return false;\n    }\n    /**\n     * Sets/Gets whether the transparency is treated as alpha coverage\n     */\n    set transparencyAsAlphaCoverage(value) {\n        // OpenPBR doesn't support treating transparency as alpha coverage.\n    }\n    // ========================================\n    // BASE PARAMETERS\n    // ========================================\n    /**\n     * Sets the base color of the OpenPBR material.\n     * @param value The base color as a Color3\n     */\n    set baseColor(value) {\n        this._material.baseColor = value;\n    }\n    /**\n     * Gets the base color of the OpenPBR material.\n     * @returns The base color as a Color3\n     */\n    get baseColor() {\n        return this._material.baseColor;\n    }\n    /**\n     * Sets the base color texture of the OpenPBR material.\n     * @param value The base color texture or null\n     */\n    set baseColorTexture(value) {\n        this._material.baseColorTexture = value;\n    }\n    /**\n     * Gets the base color texture of the OpenPBR material.\n     * @returns The base color texture or null\n     */\n    get baseColorTexture() {\n        return this._material.baseColorTexture;\n    }\n    /**\n     * Sets the base diffuse roughness of the OpenPBR material.\n     * @param value The diffuse roughness value (0-1)\n     */\n    set baseDiffuseRoughness(value) {\n        this._material.baseDiffuseRoughness = value;\n    }\n    /**\n     * Gets the base diffuse roughness of the OpenPBR material.\n     * @returns The diffuse roughness value (0-1)\n     */\n    get baseDiffuseRoughness() {\n        return this._material.baseDiffuseRoughness;\n    }\n    /**\n     * Sets the base diffuse roughness texture of the OpenPBR material.\n     * @param value The diffuse roughness texture or null\n     */\n    set baseDiffuseRoughnessTexture(value) {\n        this._material.baseDiffuseRoughnessTexture = value;\n    }\n    /**\n     * Gets the base diffuse roughness texture of the OpenPBR material.\n     * @returns The diffuse roughness texture or null\n     */\n    get baseDiffuseRoughnessTexture() {\n        return this._material.baseDiffuseRoughnessTexture;\n    }\n    /**\n     * Sets the base metalness value of the OpenPBR material.\n     * @param value The metalness value (0-1)\n     */\n    set baseMetalness(value) {\n        this._material.baseMetalness = value;\n    }\n    /**\n     * Gets the base metalness value of the OpenPBR material.\n     * @returns The metalness value (0-1)\n     */\n    get baseMetalness() {\n        return this._material.baseMetalness;\n    }\n    /**\n     * Sets the base metalness texture of the OpenPBR material.\n     * @param value The metalness texture or null\n     */\n    set baseMetalnessTexture(value) {\n        this._material.baseMetalnessTexture = value;\n    }\n    /**\n     * Gets the base metalness texture of the OpenPBR material.\n     * @returns The metalness texture or null\n     */\n    get baseMetalnessTexture() {\n        return this._material.baseMetalnessTexture;\n    }\n    /**\n     * Sets whether to use roughness from the metallic texture's green channel.\n     * @param value True to use green channel for roughness\n     */\n    set useRoughnessFromMetallicTextureGreen(value) {\n        this._material._useRoughnessFromMetallicTextureGreen = value;\n    }\n    /**\n     * Sets whether to use metalness from the metallic texture's blue channel.\n     * @param value True to use blue channel for metalness\n     */\n    set useMetallicFromMetallicTextureBlue(value) {\n        this._material._useMetallicFromMetallicTextureBlue = value;\n    }\n    // ========================================\n    // SPECULAR PARAMETERS\n    // ========================================\n    /**\n     * Configures specular properties for OpenPBR material.\n     * @param _enableEdgeColor Whether to enable edge color support (ignored for OpenPBR)\n     */\n    enableSpecularEdgeColor(_enableEdgeColor = false) {\n        // OpenPBR already supports edge color natively, no configuration needed\n    }\n    /**\n     * Sets the specular weight of the OpenPBR material.\n     * @param value The specular weight value (0-1)\n     */\n    set specularWeight(value) {\n        this._material.specularWeight = value;\n    }\n    /**\n     * Gets the specular weight of the OpenPBR material.\n     * @returns The specular weight value (0-1)\n     */\n    get specularWeight() {\n        return this._material.specularWeight;\n    }\n    /**\n     * Sets the specular weight texture of the OpenPBR material.\n     * If the same texture is used for specular color, optimizes by using alpha channel for weight.\n     * @param value The specular weight texture or null\n     */\n    set specularWeightTexture(value) {\n        if (this._material.specularColorTexture === value) {\n            this._material.specularWeightTexture = null;\n            this._material._useSpecularWeightFromSpecularColorTexture = true;\n            this._material._useSpecularWeightFromAlpha = true;\n        }\n        else {\n            this._material.specularWeightTexture = value;\n        }\n    }\n    /**\n     * Gets the specular weight texture of the OpenPBR material.\n     * @returns The specular weight texture or null\n     */\n    get specularWeightTexture() {\n        return this._material.specularWeightTexture;\n    }\n    /**\n     * Sets the specular color of the OpenPBR material.\n     * @param value The specular color as a Color3\n     */\n    set specularColor(value) {\n        this._material.specularColor = value;\n    }\n    /**\n     * Gets the specular color of the OpenPBR material.\n     * @returns The specular color as a Color3\n     */\n    get specularColor() {\n        return this._material.specularColor;\n    }\n    /**\n     * Sets the specular color texture of the OpenPBR material.\n     * If the same texture is used for specular weight, optimizes by using alpha channel for weight.\n     * @param value The specular color texture or null\n     */\n    set specularColorTexture(value) {\n        this._material.specularColorTexture = value;\n        if (this._material.specularWeightTexture === this._material.specularColorTexture) {\n            this._material.specularWeightTexture = null;\n            this._material._useSpecularWeightFromSpecularColorTexture = true;\n            this._material._useSpecularWeightFromAlpha = true;\n        }\n    }\n    /**\n     * Gets the specular color texture of the OpenPBR material.\n     * @returns The specular color texture or null\n     */\n    get specularColorTexture() {\n        return this._material.specularColorTexture;\n    }\n    /**\n     * Sets the specular roughness of the OpenPBR material.\n     * @param value The roughness value (0-1)\n     */\n    set specularRoughness(value) {\n        this._material.specularRoughness = value;\n    }\n    /**\n     * Gets the specular roughness of the OpenPBR material.\n     * @returns The roughness value (0-1)\n     */\n    get specularRoughness() {\n        return this._material.specularRoughness;\n    }\n    /**\n     * Sets the specular roughness texture of the OpenPBR material.\n     * @param value The roughness texture or null\n     */\n    set specularRoughnessTexture(value) {\n        this._material.specularRoughnessTexture = value;\n    }\n    /**\n     * Gets the specular roughness texture of the OpenPBR material.\n     * @returns The roughness texture or null\n     */\n    get specularRoughnessTexture() {\n        return this._material.specularRoughnessTexture;\n    }\n    /**\n     * Sets the specular index of refraction (IOR) of the OpenPBR material.\n     * @param value The IOR value\n     */\n    set specularIor(value) {\n        this._material.specularIor = value;\n    }\n    /**\n     * Gets the specular index of refraction (IOR) of the OpenPBR material.\n     * @returns The IOR value\n     */\n    get specularIor() {\n        return this._material.specularIor;\n    }\n    // ========================================\n    // EMISSION PARAMETERS\n    // ========================================\n    /**\n     * Sets the emission color of the OpenPBR material.\n     * @param value The emission color as a Color3\n     */\n    set emissionColor(value) {\n        this._material.emissionColor = value;\n    }\n    /**\n     * Gets the emission color of the OpenPBR material.\n     * @returns The emission color as a Color3\n     */\n    get emissionColor() {\n        return this._material.emissionColor;\n    }\n    /**\n     * Sets the emission luminance of the OpenPBR material.\n     * @param value The emission luminance value\n     */\n    set emissionLuminance(value) {\n        this._material.emissionLuminance = value;\n    }\n    /**\n     * Gets the emission luminance of the OpenPBR material.\n     * @returns The emission luminance value\n     */\n    get emissionLuminance() {\n        return this._material.emissionLuminance;\n    }\n    /**\n     * Sets the emission color texture of the OpenPBR material.\n     * @param value The emission texture or null\n     */\n    set emissionColorTexture(value) {\n        this._material.emissionColorTexture = value;\n    }\n    /**\n     * Gets the emission color texture of the OpenPBR material.\n     * @returns The emission texture or null\n     */\n    get emissionColorTexture() {\n        return this._material.emissionColorTexture;\n    }\n    // ========================================\n    // AMBIENT OCCLUSION\n    // ========================================\n    /**\n     * Sets the ambient occlusion texture of the OpenPBR material.\n     * @param value The ambient occlusion texture or null\n     */\n    set ambientOcclusionTexture(value) {\n        this._material.ambientOcclusionTexture = value;\n    }\n    /**\n     * Gets the ambient occlusion texture of the OpenPBR material.\n     * @returns The ambient occlusion texture or null\n     */\n    get ambientOcclusionTexture() {\n        return this._material.ambientOcclusionTexture;\n    }\n    /**\n     * Sets the ambient occlusion texture strength by modifying the texture's level.\n     * @param value The strength value (typically 0-1)\n     */\n    set ambientOcclusionTextureStrength(value) {\n        const texture = this._material.ambientOcclusionTexture;\n        if (texture) {\n            texture.level = value;\n        }\n    }\n    /**\n     * Gets the ambient occlusion texture strength from the texture's level property.\n     * @returns The strength value, defaults to 1.0 if no texture or level is set\n     */\n    get ambientOcclusionTextureStrength() {\n        const texture = this._material.ambientOcclusionTexture;\n        return texture?.level ?? 1.0;\n    }\n    // ========================================\n    // COAT PARAMETERS\n    // ========================================\n    /**\n     * Configures coat parameters for OpenPBR material.\n     * OpenPBR coat is already built-in, so no configuration is needed.\n     */\n    configureCoat() {\n        // OpenPBR coat is already built-in, no configuration needed\n    }\n    /**\n     * Sets the coat weight of the OpenPBR material.\n     * @param value The coat weight value (0-1)\n     */\n    set coatWeight(value) {\n        this._material.coatWeight = value;\n    }\n    /**\n     * Gets the coat weight of the OpenPBR material.\n     * @returns The coat weight value (0-1)\n     */\n    get coatWeight() {\n        return this._material.coatWeight;\n    }\n    /**\n     * Sets the coat weight texture of the OpenPBR material.\n     * @param value The coat weight texture or null\n     */\n    set coatWeightTexture(value) {\n        this._material.coatWeightTexture = value;\n    }\n    /**\n     * Gets the coat weight texture of the OpenPBR material.\n     * @returns The coat weight texture or null\n     */\n    get coatWeightTexture() {\n        return this._material.coatWeightTexture;\n    }\n    /**\n     * Sets the coat color of the OpenPBR material.\n     * @param value The coat color as a Color3\n     */\n    set coatColor(value) {\n        this._material.coatColor = value;\n    }\n    /**\n     * Sets the coat color texture of the OpenPBR material.\n     * @param value The coat color texture or null\n     */\n    set coatColorTexture(value) {\n        this._material.coatColorTexture = value;\n    }\n    /**\n     * Sets the coat roughness of the OpenPBR material.\n     * @param value The coat roughness value (0-1)\n     */\n    set coatRoughness(value) {\n        this._material.coatRoughness = value;\n    }\n    /**\n     * Gets the coat roughness of the OpenPBR material.\n     * @returns The coat roughness value (0-1)\n     */\n    get coatRoughness() {\n        return this._material.coatRoughness;\n    }\n    /**\n     * Sets the coat roughness texture of the OpenPBR material.\n     * @param value The coat roughness texture or null\n     */\n    set coatRoughnessTexture(value) {\n        this._material.coatRoughnessTexture = value;\n    }\n    /**\n     * Gets the coat roughness texture of the OpenPBR material.\n     * @returns The coat roughness texture or null\n     */\n    get coatRoughnessTexture() {\n        return this._material.coatRoughnessTexture;\n    }\n    /**\n     * Sets the coat index of refraction (IOR) of the OpenPBR material.\n     */\n    set coatIor(value) {\n        this._material.coatIor = value;\n    }\n    /**\n     * Sets the coat darkening value of the OpenPBR material.\n     * @param value The coat darkening value\n     */\n    set coatDarkening(value) {\n        this._material.coatDarkening = value;\n    }\n    /**\n     * Sets the coat darkening texture (OpenPBR: coatDarkeningTexture, no PBR equivalent)\n     */\n    set coatDarkeningTexture(value) {\n        this._material.coatDarkeningTexture = value;\n    }\n    /**\n     * Sets the coat roughness anisotropy.\n     * TODO: Implementation pending OpenPBR coat anisotropy feature availability.\n     * @param value The coat anisotropy intensity value\n     */\n    set coatRoughnessAnisotropy(value) {\n        this._material.coatRoughnessAnisotropy = value;\n    }\n    /**\n     * Gets the coat roughness anisotropy.\n     * TODO: Implementation pending OpenPBR coat anisotropy feature availability.\n     * @returns Currently returns 0 as coat anisotropy is not yet available\n     */\n    get coatRoughnessAnisotropy() {\n        return this._material.coatRoughnessAnisotropy;\n    }\n    /**\n     * Sets the coat tangent angle for anisotropy.\n     * TODO: Implementation pending OpenPBR coat anisotropy feature availability.\n     * @param value The coat anisotropy rotation angle in radians\n     */\n    set geometryCoatTangentAngle(value) {\n        this._material.geometryCoatTangentAngle = value;\n    }\n    /**\n     * Sets the coat tangent texture for anisotropy.\n     * TODO: Implementation pending OpenPBR coat anisotropy feature availability.\n     * @param value The coat anisotropy texture or null\n     */\n    set geometryCoatTangentTexture(value) {\n        this._material.geometryCoatTangentTexture = value;\n        if (value) {\n            this._material._useCoatRoughnessAnisotropyFromTangentTexture = true;\n        }\n    }\n    /**\n     * Gets the coat tangent texture for anisotropy.\n     * TODO: Implementation pending OpenPBR coat anisotropy feature availability.\n     * @returns Currently returns null as coat anisotropy is not yet available\n     */\n    get geometryCoatTangentTexture() {\n        return this._material.geometryCoatTangentTexture;\n    }\n    // ========================================\n    // TRANSMISSION LAYER\n    // ========================================\n    /**\n     * Sets the transmission weight.\n     * TODO: Implementation pending OpenPBR transmission feature availability.\n     * @param value The transmission weight value (0-1)\n     */\n    set transmissionWeight(value) {\n        // TODO: Implement when OpenPBR transmission is available\n        // this._material.transmissionWeight = value;\n    }\n    /**\n     * Sets the transmission weight texture.\n     * TODO: Implementation pending OpenPBR transmission feature availability.\n     * @param value The transmission weight texture or null\n     */\n    set transmissionWeightTexture(value) {\n        // TODO: Implement when OpenPBR transmission is available\n        // this._material.transmissionWeightTexture = value;\n    }\n    /**\n     * Gets the transmission weight.\n     * TODO: Implementation pending OpenPBR transmission feature availability.\n     * @returns Currently returns 0 as transmission is not yet available\n     */\n    get transmissionWeight() {\n        // TODO: Implement when OpenPBR transmission is available\n        // return this._material.transmissionWeight;\n        return 0;\n    }\n    /**\n     * Gets the transmission dispersion Abbe number.\n     * @param value The Abbe number value\n     */\n    set transmissionDispersionAbbeNumber(value) {\n        // TODO: Implement when OpenPBR transmission dispersion is available\n    }\n    /**\n     * Configures transmission for OpenPBR material.\n     * TODO: Implementation pending OpenPBR transmission feature availability.\n     */\n    configureTransmission() {\n        // OpenPBR transmission will be configured differently when available\n    }\n    // ========================================\n    // VOLUME PROPERTIES (Subsurface Scattering)\n    // ========================================\n    /**\n     * Sets the attenuation distance for volume scattering.\n     * TODO: Implementation pending OpenPBR volume feature availability.\n     * @param value The attenuation distance value\n     */\n    set transmissionDepth(value) {\n        // TODO: Implement when OpenPBR volume properties are available\n        // this._material.attenuationDistance = value;\n    }\n    /**\n     * Sets the attenuation color for volume scattering.\n     * TODO: Implementation pending OpenPBR volume feature availability.\n     * @param value The attenuation color as a Color3\n     */\n    set transmissionColor(value) {\n        // TODO: Implement when OpenPBR volume properties are available\n        // this._material.attenuationColor = value;\n    }\n    /**\n     * Sets the thickness texture for volume scattering.\n     * TODO: Implementation pending OpenPBR volume feature availability.\n     * @param value The thickness texture or null\n     */\n    set volumeThicknessTexture(value) {\n        // TODO: Implement when OpenPBR volume properties are available\n        // this._material.thicknessTexture = value;\n    }\n    /**\n     * Sets the thickness factor for volume scattering.\n     * TODO: Implementation pending OpenPBR volume feature availability.\n     * @param value The thickness value\n     */\n    set volumeThickness(value) {\n        // TODO: Implement when OpenPBR volume properties are available\n        // this._material.thickness = value;\n    }\n    // ========================================\n    // SUBSURFACE PROPERTIES (Subsurface Scattering)\n    // ========================================\n    /**\n     * Configures subsurface properties for PBR material\n     */\n    configureSubsurface() {\n        // TODO\n    }\n    /**\n     * Sets the subsurface weight\n     */\n    set subsurfaceWeight(value) {\n        // TODO\n    }\n    get subsurfaceWeight() {\n        // TODO\n        return 0;\n    }\n    /**\n     * Sets the subsurface weight texture\n     */\n    set subsurfaceWeightTexture(value) {\n        // TODO\n    }\n    /**\n     * Sets the subsurface color.\n     * @param value The subsurface tint color as a Color3\n     */\n    set subsurfaceColor(value) {\n        // TODO\n    }\n    /**\n     * Sets the subsurface color texture.\n     * @param value The subsurface tint texture or null\n     */\n    set subsurfaceColorTexture(value) {\n        // TODO\n    }\n    // ========================================\n    // FUZZ LAYER (Sheen)\n    // ========================================\n    /**\n     * Configures fuzz for OpenPBR.\n     * Enables fuzz and sets up proper configuration.\n     */\n    configureFuzz() {\n        // Currently no setup to do for OpenPBR\n    }\n    /**\n     * Sets the fuzz weight.\n     * TODO: Implementation pending OpenPBR fuzz feature availability.\n     * @param value The fuzz weight value\n     */\n    set fuzzWeight(value) {\n        // TODO: Implement when OpenPBR fuzz is available\n        // this._material.fuzzWeight = value;\n    }\n    /**\n     * Sets the fuzz color.\n     * TODO: Implementation pending OpenPBR fuzz feature availability.\n     * @param value The fuzz color as a Color3\n     */\n    set fuzzColor(value) {\n        // TODO: Implement when OpenPBR fuzz is available\n        // this._material.fuzzColor = value;\n    }\n    /**\n     * Sets the fuzz color texture.\n     * TODO: Implementation pending OpenPBR fuzz feature availability.\n     * @param value The fuzz color texture or null\n     */\n    set fuzzColorTexture(value) {\n        // TODO: Implement when OpenPBR fuzz is available\n        // this._material.fuzzColorTexture = value;\n    }\n    /**\n     * Sets the fuzz roughness.\n     * TODO: Implementation pending OpenPBR fuzz feature availability.\n     * @param value The fuzz roughness value (0-1)\n     */\n    set fuzzRoughness(value) {\n        // TODO: Implement when OpenPBR fuzz is available\n        // this._material.fuzzRoughness = value;\n    }\n    /**\n     * Sets the fuzz roughness texture.\n     * TODO: Implementation pending OpenPBR fuzz feature availability.\n     * @param value The fuzz roughness texture or null\n     */\n    set fuzzRoughnessTexture(value) {\n        // TODO: Implement when OpenPBR fuzz is available\n        // this._material.fuzzRoughnessTexture = value;\n    }\n    // ========================================\n    // ANISOTROPY\n    // ========================================\n    /**\n     * Sets the specular roughness anisotropy of the OpenPBR material.\n     * @param value The anisotropy intensity value\n     */\n    set specularRoughnessAnisotropy(value) {\n        this._material.specularRoughnessAnisotropy = value;\n    }\n    /**\n     * Gets the specular roughness anisotropy of the OpenPBR material.\n     * @returns The anisotropy intensity value\n     */\n    get specularRoughnessAnisotropy() {\n        return this._material.specularRoughnessAnisotropy;\n    }\n    /**\n     * Sets the anisotropy rotation angle.\n     * @param value The anisotropy rotation angle in radians\n     */\n    set geometryTangentAngle(value) {\n        this._material.geometryTangentAngle = value;\n    }\n    /**\n     * Sets the geometry tangent texture for anisotropy.\n     * Automatically enables using anisotropy from the tangent texture.\n     * @param value The anisotropy texture or null\n     */\n    set geometryTangentTexture(value) {\n        this._material.geometryTangentTexture = value;\n        this._material._useSpecularRoughnessAnisotropyFromTangentTexture = true;\n    }\n    /**\n     * Gets the geometry tangent texture for anisotropy.\n     * @returns The anisotropy texture or null\n     */\n    get geometryTangentTexture() {\n        return this._material.geometryTangentTexture;\n    }\n    /**\n     * Configures glTF-style anisotropy for the OpenPBR material.\n     * @param useGltfStyle Whether to use glTF-style anisotropy\n     */\n    configureGltfStyleAnisotropy(useGltfStyle = true) {\n        this._material._useGltfStyleAnisotropy = useGltfStyle;\n    }\n    // ========================================\n    // THIN FILM IRIDESCENCE\n    // ========================================\n    /**\n     * Sets the thin film weight.\n     * @param value The thin film weight value\n     */\n    set thinFilmWeight(value) {\n        this._material.thinFilmWeight = value;\n    }\n    /**\n     * Sets the thin film IOR.\n     * @param value The thin film IOR value\n     */\n    set thinFilmIor(value) {\n        this._material.thinFilmIor = value;\n    }\n    /**\n     * Sets the thin film thickness minimum.\n     * @param value The minimum thickness value in nanometers\n     */\n    set thinFilmThicknessMinimum(value) {\n        this._material.thinFilmThicknessMin = value / 1000.0; // Convert to micrometers for OpenPBR\n    }\n    /**\n     * Sets the thin film thickness maximum.\n     * @param value The maximum thickness value in nanometers\n     */\n    set thinFilmThicknessMaximum(value) {\n        this._material.thinFilmThickness = value / 1000.0; // Convert to micrometers for OpenPBR\n    }\n    /**\n     * Sets the thin film weight texture.\n     * @param value The thin film weight texture or null\n     */\n    set thinFilmWeightTexture(value) {\n        this._material.thinFilmWeightTexture = value;\n    }\n    /**\n     * Sets the thin film thickness texture.\n     * @param value The thin film thickness texture or null\n     */\n    set thinFilmThicknessTexture(value) {\n        this._material.thinFilmThicknessTexture = value;\n        this._material._useThinFilmThicknessFromTextureGreen = true;\n    }\n    // ========================================\n    // UNLIT MATERIALS\n    // ========================================\n    /**\n     * Sets whether the OpenPBR material is unlit.\n     * @param value True to make the material unlit\n     */\n    set unlit(value) {\n        this._material.unlit = value;\n    }\n    // ========================================\n    // GEOMETRY PARAMETERS\n    // ========================================\n    /**\n     * Sets the geometry opacity of the OpenPBR material.\n     * @param value The opacity value (0-1)\n     */\n    set geometryOpacity(value) {\n        this._material.geometryOpacity = value;\n    }\n    /**\n     * Gets the geometry opacity of the OpenPBR material.\n     * @returns The opacity value (0-1)\n     */\n    get geometryOpacity() {\n        return this._material.geometryOpacity;\n    }\n    /**\n     * Sets the geometry normal texture of the OpenPBR material.\n     * @param value The normal texture or null\n     */\n    set geometryNormalTexture(value) {\n        this._material.geometryNormalTexture = value;\n    }\n    /**\n     * Gets the geometry normal texture of the OpenPBR material.\n     * @returns The normal texture or null\n     */\n    get geometryNormalTexture() {\n        return this._material.geometryNormalTexture;\n    }\n    /**\n     * Sets the normal map inversions for the OpenPBR material.\n     * Note: OpenPBR may handle normal map inversions differently or may not need them.\n     * @param invertX Whether to invert the normal map on the X axis (may be ignored)\n     * @param invertY Whether to invert the normal map on the Y axis (may be ignored)\n     */\n    setNormalMapInversions(invertX, invertY) {\n        // OpenPBR handles normal map inversions differently or may not need them\n    }\n    /**\n     * Sets the geometry coat normal texture of the OpenPBR material.\n     * @param value The coat normal texture or null\n     */\n    set geometryCoatNormalTexture(value) {\n        this._material.geometryCoatNormalTexture = value;\n    }\n    /**\n     * Gets the geometry coat normal texture of the OpenPBR material.\n     * @returns The coat normal texture or null\n     */\n    get geometryCoatNormalTexture() {\n        return this._material.geometryCoatNormalTexture;\n    }\n    /**\n     * Sets the geometry coat normal texture scale.\n     * @param value The scale value for the coat normal texture\n     */\n    set geometryCoatNormalTextureScale(value) {\n        if (this._material.geometryCoatNormalTexture) {\n            this._material.geometryCoatNormalTexture.level = value;\n        }\n    }\n}\n//# sourceMappingURL=openPbrMaterialLoadingAdapter.js.map"],"names":[],"mappings":"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I,iBAAiB,CAAC,KAAK,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,iBAAiB,CAAC,KAAK,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,sBAAsB,CAAC,KAAK,EAAE;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,CAAC,KAAK,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,mBAAmB,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,gBAAgB,CAAC,KAAK,EAAE;AAChC;AACA;AACA,IAAI,IAAI,gBAAgB,GAAG;AAC3B;AACA,QAAQ,OAAO,CAAC;AAChB;AACA;AACA;AACA;AACA,IAAI,IAAI,uBAAuB,CAAC,KAAK,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,CAAC,KAAK,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,sBAAsB,CAAC,KAAK,EAAE;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,GAAG;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,UAAU,CAAC,KAAK,EAAE;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,SAAS,CAAC,KAAK,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,gBAAgB,CAAC,KAAK,EAAE;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,aAAa,CAAC,KAAK,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,oBAAoB,CAAC,KAAK,EAAE;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,2BAA2B,CAAC,KAAK,EAAE;AAC3C,QAAQ,IAAI,CAAC,SAA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"}