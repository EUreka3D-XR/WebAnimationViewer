import{w as e,C as t,T as i,F as n,h as s,G as r,H as a,J as o,K as l,N as u,o as d,W as h,X as f,Y as c,M as T,Z as _,i as p}from"./index-BeBPThKX.esm.min.js";import"./engine.multiRender-DyBGUrkO.esm.min.js";import"./bumpFragment--yeEWzNa.esm.min.js";import"./helperFunctions-KCrxHKgi.esm.min.js";import"./sceneUboDeclaration-BuZ8Ttoi.esm.min.js";import"./bumpVertex-DwzgudSD.esm.min.js";class E extends e{get isSupported(){return this._engine?.getCaps().drawBuffersExtension??!1}get textures(){return this._textures}get count(){return this._count}get depthTexture(){return this._textures[this._textures.length-1]}set wrapU(e){if(this._textures)for(let t=0;t<this._textures.length;t++)this._textures[t].wrapU=e}set wrapV(e){if(this._textures)for(let t=0;t<this._textures.length;t++)this._textures[t].wrapV=e}constructor(e,i,n,s,r,a){const o=!(!r||!r.generateMipMaps)&&r.generateMipMaps,l=!(!r||!r.generateDepthTexture)&&r.generateDepthTexture,u=r&&r.depthTextureFormat?r.depthTextureFormat:t.TEXTUREFORMAT_DEPTH16,d=!r||void 0===r.doNotChangeAspectRatio||r.doNotChangeAspectRatio,h=!(!r||!r.drawOnlyOnFirstAttachmentByDefault)&&r.drawOnlyOnFirstAttachmentByDefault;if(super(e,i,s,o,d,void 0,void 0,void 0,void 0,void 0,void 0,void 0,!0),!this.isSupported)return void this.dispose();this._textureNames=a;const f=[],c=[],T=[],_=[],p=[],E=[],m=[],g=[];this._initTypes(n,f,c,T,_,p,E,m,g,r);const v=!r||void 0===r.generateDepthBuffer||r.generateDepthBuffer,x=!(!r||void 0===r.generateStencilBuffer)&&r.generateStencilBuffer,R=r&&r.samples?r.samples:1;this._multiRenderTargetOptions={samplingModes:c,generateMipMaps:o,generateDepthBuffer:v,generateStencilBuffer:x,generateDepthTexture:l,depthTextureFormat:u,types:f,textureCount:n,useSRGBBuffers:T,samples:R,formats:_,targetTypes:p,faceIndex:E,layerIndex:m,layerCounts:g,labels:a,label:e},this._count=n,this._drawOnlyOnFirstAttachmentByDefault=h,n>0&&(this._createInternalTextures(),this._createTextures(a))}_initTypes(e,n,s,r,a,o,l,u,d,h){for(let f=0;f<e;f++)h&&h.types&&void 0!==h.types[f]?n.push(h.types[f]):n.push(h&&h.defaultType?h.defaultType:t.TEXTURETYPE_UNSIGNED_BYTE),h&&h.samplingModes&&void 0!==h.samplingModes[f]?s.push(h.samplingModes[f]):s.push(i.BILINEAR_SAMPLINGMODE),h&&h.useSRGBBuffers&&void 0!==h.useSRGBBuffers[f]?r.push(h.useSRGBBuffers[f]):r.push(!1),h&&h.formats&&void 0!==h.formats[f]?a.push(h.formats[f]):a.push(t.TEXTUREFORMAT_RGBA),h&&h.targetTypes&&void 0!==h.targetTypes[f]?o.push(h.targetTypes[f]):o.push(t.TEXTURE_2D),h&&h.faceIndex&&void 0!==h.faceIndex[f]?l.push(h.faceIndex[f]):l.push(0),h&&h.layerIndex&&void 0!==h.layerIndex[f]?u.push(h.layerIndex[f]):u.push(0),h&&h.layerCounts&&void 0!==h.layerCounts[f]?d.push(h.layerCounts[f]):d.push(1)}_createInternaTextureIndexMapping(){const e={},t=[];if(!this._renderTarget)return t;const i=this._renderTarget.textures;for(let n=0;n<i.length;n++){const s=i[n];if(!s)continue;const r=e[s.uniqueId];void 0!==r?t[n]=r:e[s.uniqueId]=n}return t}_rebuild(e=!1,t=!1,i){if(this._count<1||e)return;const n=this._createInternaTextureIndexMapping();this.releaseInternalTextures(),this._createInternalTextures(),t&&(this._releaseTextures(),this._createTextures(i));const s=this._renderTarget.textures;for(let e=0;e<s.length;e++){const t=this._textures[e];void 0!==n[e]&&this._renderTarget.setTexture(s[n[e]],e),t._texture=s[e],t._texture&&(t._noMipmap=!t._texture.useMipMaps,t._useSRGBBuffer=t._texture._useSRGBBuffer)}1!==this.samples&&this._renderTarget.setSamples(this.samples,!this._drawOnlyOnFirstAttachmentByDefault,!0)}_createInternalTextures(){this._renderTarget=this._getEngine().createMultipleRenderTarget(this._size,this._multiRenderTargetOptions,!this._drawOnlyOnFirstAttachmentByDefault),this._texture=this._renderTarget.texture}_releaseTextures(){if(this._textures)for(let e=0;e<this._textures.length;e++)this._textures[e]._texture=null,this._textures[e].dispose()}_createTextures(e){const t=this._renderTarget.textures;this._textures=[];for(let n=0;n<t.length;n++){const s=new i(null,this.getScene());e?.[n]&&(s.name=e[n]),s._texture=t[n],s._texture&&(s._noMipmap=!s._texture.useMipMaps,s._useSRGBBuffer=s._texture._useSRGBBuffer),this._textures.push(s)}}setInternalTexture(e,n,s=!0){if(this.renderTarget&&(0===n&&(this._texture=e),this.renderTarget.setTexture(e,n,s),this.textures[n]||(this.textures[n]=new i(null,this.getScene()),this.textures[n].name=this._textureNames?.[n]??this.textures[n].name),this.textures[n]._texture=e,this.textures[n]._noMipmap=!e.useMipMaps,this.textures[n]._useSRGBBuffer=e._useSRGBBuffer,this._count=this.renderTarget.textures?this.renderTarget.textures.length:0,this._multiRenderTargetOptions.types&&(this._multiRenderTargetOptions.types[n]=e.type),this._multiRenderTargetOptions.samplingModes&&(this._multiRenderTargetOptions.samplingModes[n]=e.samplingMode),this._multiRenderTargetOptions.useSRGBBuffers&&(this._multiRenderTargetOptions.useSRGBBuffers[n]=e._useSRGBBuffer),this._multiRenderTargetOptions.targetTypes&&-1!==this._multiRenderTargetOptions.targetTypes[n])){let i=0;i=e.is2DArray?t.TEXTURE_2D_ARRAY:e.isCube?t.TEXTURE_CUBE_MAP:e.is3D?t.TEXTURE_3D:t.TEXTURE_2D,this._multiRenderTargetOptions.targetTypes[n]=i}}setLayerAndFaceIndex(e,t=-1,i=-1){this.textures[e]&&this.renderTarget&&(this._multiRenderTargetOptions.layerIndex&&(this._multiRenderTargetOptions.layerIndex[e]=t),this._multiRenderTargetOptions.faceIndex&&(this._multiRenderTargetOptions.faceIndex[e]=i),this.renderTarget.setLayerAndFaceIndex(e,t,i))}setLayerAndFaceIndices(e,t){this.renderTarget&&(this._multiRenderTargetOptions.layerIndex=e,this._multiRenderTargetOptions.faceIndex=t,this.renderTarget.setLayerAndFaceIndices(e,t))}get samples(){return this._samples}set samples(e){this._renderTarget?this._samples=this._renderTarget.setSamples(e):this._samples=e}resize(e){this._processSizeParameter(e),this._rebuild(!1,void 0,this._textureNames)}updateCount(e,t,i){this._multiRenderTargetOptions.textureCount=e,this._count=e;const n=[],s=[],r=[],a=[],o=[],l=[],u=[],d=[];this._textureNames=i,this._initTypes(e,n,s,r,a,o,l,u,d,t),this._multiRenderTargetOptions.types=n,this._multiRenderTargetOptions.samplingModes=s,this._multiRenderTargetOptions.useSRGBBuffers=r,this._multiRenderTargetOptions.formats=a,this._multiRenderTargetOptions.targetTypes=o,this._multiRenderTargetOptions.faceIndex=l,this._multiRenderTargetOptions.layerIndex=u,this._multiRenderTargetOptions.layerCounts=d,this._multiRenderTargetOptions.labels=i,this._rebuild(!1,!0,i)}_unbindFrameBuffer(e,t){this._renderTarget&&e.unBindMultiColorAttachmentFramebuffer(this._renderTarget,this.isCube,(()=>{this.onAfterRenderObservable.notifyObservers(t)}))}dispose(e=!1){this._releaseTextures(),e?this._texture=null:this.releaseInternalTextures(),super.dispose()}releaseInternalTextures(){const e=this._renderTarget?.textures;if(e){for(let t=e.length-1;t>=0;t--)this._textures[t]._texture=null;this._renderTarget?.dispose(),this._renderTarget=null}}}const m="mrtFragmentDeclaration";n.IncludesShadersStore[m]||(n.IncludesShadersStore[m]="#if defined(WEBGL2) || defined(WEBGPU) || defined(NATIVE)\nlayout(location=0) out vec4 glFragData[{X}];\n#endif\n");const g="geometryPixelShader",v="#extension GL_EXT_draw_buffers : require\n#if defined(BUMP) || !defined(NORMAL)\n#extension GL_OES_standard_derivatives : enable\n#endif\nprecision highp float;\n#ifdef BUMP\nvarying mat4 vWorldView;varying vec3 vNormalW;\n#else\nvarying vec3 vNormalV;\n#endif\nvarying vec4 vViewPos;\n#if defined(POSITION) || defined(BUMP)\nvarying vec3 vPositionW;\n#endif\n#if defined(VELOCITY) || defined(VELOCITY_LINEAR)\nvarying vec4 vCurrentPosition;varying vec4 vPreviousPosition;\n#endif\n#ifdef NEED_UV\nvarying vec2 vUV;\n#endif\n#ifdef BUMP\nuniform vec3 vBumpInfos;uniform vec2 vTangentSpaceParams;\n#endif\n#if defined(REFLECTIVITY)\n#if defined(ORMTEXTURE) || defined(SPECULARGLOSSINESSTEXTURE) || defined(REFLECTIVITYTEXTURE)\nuniform sampler2D reflectivitySampler;varying vec2 vReflectivityUV;\n#else\n#ifdef METALLIC_TEXTURE\nuniform sampler2D metallicSampler;varying vec2 vMetallicUV;\n#endif\n#ifdef ROUGHNESS_TEXTURE\nuniform sampler2D roughnessSampler;varying vec2 vRoughnessUV;\n#endif\n#endif\n#ifdef ALBEDOTEXTURE\nvarying vec2 vAlbedoUV;uniform sampler2D albedoSampler;\n#endif\n#ifdef REFLECTIVITYCOLOR\nuniform vec3 reflectivityColor;\n#endif\n#ifdef ALBEDOCOLOR\nuniform vec3 albedoColor;\n#endif\n#ifdef METALLIC\nuniform float metallic;\n#endif\n#if defined(ROUGHNESS) || defined(GLOSSINESS)\nuniform float glossiness;\n#endif\n#endif\n#if defined(ALPHATEST) && defined(NEED_UV)\nuniform sampler2D diffuseSampler;\n#endif\n#include<clipPlaneFragmentDeclaration>\n#include<mrtFragmentDeclaration>[SCENE_MRT_COUNT]\n#include<bumpFragmentMainFunctions>\n#include<bumpFragmentFunctions>\n#include<helperFunctions>\nvoid main() {\n#include<clipPlaneFragment>\n#ifdef ALPHATEST\nif (texture2D(diffuseSampler,vUV).a<0.4)\ndiscard;\n#endif\nvec3 normalOutput;\n#ifdef BUMP\nvec3 normalW=normalize(vNormalW);\n#include<bumpFragment>\n#ifdef NORMAL_WORLDSPACE\nnormalOutput=normalW;\n#else\nnormalOutput=normalize(vec3(vWorldView*vec4(normalW,0.0)));\n#endif\n#elif defined(HAS_NORMAL_ATTRIBUTE)\nnormalOutput=normalize(vNormalV);\n#elif defined(POSITION)\nnormalOutput=normalize(-cross(dFdx(vPositionW),dFdy(vPositionW)));\n#endif\n#ifdef ENCODE_NORMAL\nnormalOutput=normalOutput*0.5+0.5;\n#endif\n#ifdef DEPTH\ngl_FragData[DEPTH_INDEX]=vec4(vViewPos.z/vViewPos.w,0.0,0.0,1.0);\n#endif\n#ifdef NORMAL\ngl_FragData[NORMAL_INDEX]=vec4(normalOutput,1.0);\n#endif\n#ifdef SCREENSPACE_DEPTH\ngl_FragData[SCREENSPACE_DEPTH_INDEX]=vec4(gl_FragCoord.z,0.0,0.0,1.0);\n#endif\n#ifdef POSITION\ngl_FragData[POSITION_INDEX]=vec4(vPositionW,1.0);\n#endif\n#ifdef VELOCITY\nvec2 a=(vCurrentPosition.xy/vCurrentPosition.w)*0.5+0.5;vec2 b=(vPreviousPosition.xy/vPreviousPosition.w)*0.5+0.5;vec2 velocity=abs(a-b);velocity=vec2(pow(velocity.x,1.0/3.0),pow(velocity.y,1.0/3.0))*sign(a-b)*0.5+0.5;gl_FragData[VELOCITY_INDEX]=vec4(velocity,0.0,1.0);\n#endif\n#ifdef VELOCITY_LINEAR\nvec2 velocity=vec2(0.5)*((vPreviousPosition.xy/vPreviousPosition.w) -\n(vCurrentPosition.xy/vCurrentPosition.w));gl_FragData[VELOCITY_LINEAR_INDEX]=vec4(velocity,0.0,1.0);\n#endif\n#ifdef REFLECTIVITY\nvec4 reflectivity=vec4(0.0,0.0,0.0,1.0);\n#ifdef METALLICWORKFLOW\nfloat metal=1.0;float roughness=1.0;\n#ifdef ORMTEXTURE\nmetal*=texture2D(reflectivitySampler,vReflectivityUV).b;roughness*=texture2D(reflectivitySampler,vReflectivityUV).g;\n#else\n#ifdef METALLIC_TEXTURE\nmetal*=texture2D(metallicSampler,vMetallicUV).r;\n#endif\n#ifdef ROUGHNESS_TEXTURE\nroughness*=texture2D(roughnessSampler,vRoughnessUV).r;\n#endif\n#endif\n#ifdef METALLIC\nmetal*=metallic;\n#endif\n#ifdef ROUGHNESS\nroughness*=(1.0-glossiness); \n#endif\nreflectivity.a-=roughness;vec3 color=vec3(1.0);\n#ifdef ALBEDOTEXTURE\ncolor=texture2D(albedoSampler,vAlbedoUV).rgb;\n#ifdef GAMMAALBEDO\ncolor=toLinearSpace(color);\n#endif\n#endif\n#ifdef ALBEDOCOLOR\ncolor*=albedoColor.xyz;\n#endif\nreflectivity.rgb=mix(vec3(0.04),color,metal);\n#else\n#if defined(SPECULARGLOSSINESSTEXTURE) || defined(REFLECTIVITYTEXTURE)\nreflectivity=texture2D(reflectivitySampler,vReflectivityUV);\n#ifdef GAMMAREFLECTIVITYTEXTURE\nreflectivity.rgb=toLinearSpace(reflectivity.rgb);\n#endif\n#else \n#ifdef REFLECTIVITYCOLOR\nreflectivity.rgb=toLinearSpace(reflectivityColor.xyz);reflectivity.a=1.0;\n#endif\n#endif\n#ifdef GLOSSINESSS\nreflectivity.a*=glossiness; \n#endif\n#endif\ngl_FragData[REFLECTIVITY_INDEX]=reflectivity;\n#endif\n}\n";n.ShadersStore[g]||(n.ShadersStore[g]=v);const x={name:g,shader:v};var R=Object.freeze({__proto__:null,geometryPixelShader:x});const I="geometryVertexDeclaration";n.IncludesShadersStore[I]||(n.IncludesShadersStore[I]="uniform mat4 viewProjection;uniform mat4 view;");const M="geometryUboDeclaration";n.IncludesShadersStore[M]||(n.IncludesShadersStore[M]="#include<sceneUboDeclaration>\n");const S="geometryVertexShader",L="precision highp float;\n#include<bonesDeclaration>\n#include<bakedVertexAnimationDeclaration>\n#include<morphTargetsVertexGlobalDeclaration>\n#include<morphTargetsVertexDeclaration>[0..maxSimultaneousMorphTargets]\n#include<instancesDeclaration>\n#include<__decl__geometryVertex>\n#include<clipPlaneVertexDeclaration>\nattribute vec3 position;\n#ifdef HAS_NORMAL_ATTRIBUTE\nattribute vec3 normal;\n#endif\n#ifdef NEED_UV\nvarying vec2 vUV;\n#ifdef ALPHATEST\nuniform mat4 diffuseMatrix;\n#endif\n#ifdef BUMP\nuniform mat4 bumpMatrix;varying vec2 vBumpUV;\n#endif\n#ifdef REFLECTIVITY\nuniform mat4 reflectivityMatrix;uniform mat4 albedoMatrix;varying vec2 vReflectivityUV;varying vec2 vAlbedoUV;\n#endif\n#ifdef METALLIC_TEXTURE\nvarying vec2 vMetallicUV;uniform mat4 metallicMatrix;\n#endif\n#ifdef ROUGHNESS_TEXTURE\nvarying vec2 vRoughnessUV;uniform mat4 roughnessMatrix;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#endif\n#ifdef BUMP\nvarying mat4 vWorldView;\n#endif\n#ifdef BUMP\nvarying vec3 vNormalW;\n#else\nvarying vec3 vNormalV;\n#endif\nvarying vec4 vViewPos;\n#if defined(POSITION) || defined(BUMP)\nvarying vec3 vPositionW;\n#endif\n#if defined(VELOCITY) || defined(VELOCITY_LINEAR)\nuniform mat4 previousViewProjection;varying vec4 vCurrentPosition;varying vec4 vPreviousPosition;\n#endif\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void)\n{vec3 positionUpdated=position;\n#ifdef HAS_NORMAL_ATTRIBUTE\nvec3 normalUpdated=normal;\n#else\nvec3 normalUpdated=vec3(0.0,0.0,0.0);\n#endif\n#ifdef UV1\nvec2 uvUpdated=uv;\n#endif\n#ifdef UV2\nvec2 uv2Updated=uv2;\n#endif\n#include<morphTargetsVertexGlobal>\n#include<morphTargetsVertex>[0..maxSimultaneousMorphTargets]\n#include<instancesVertex>\n#if (defined(VELOCITY) || defined(VELOCITY_LINEAR)) && !defined(BONES_VELOCITY_ENABLED)\nvCurrentPosition=viewProjection*finalWorld*vec4(positionUpdated,1.0);vPreviousPosition=previousViewProjection*finalPreviousWorld*vec4(positionUpdated,1.0);\n#endif\n#include<bonesVertex>\n#include<bakedVertexAnimation>\nvec4 worldPos=vec4(finalWorld*vec4(positionUpdated,1.0));\n#ifdef BUMP\nvWorldView=view*finalWorld;mat3 normalWorld=mat3(finalWorld);vNormalW=normalize(normalWorld*normalUpdated);\n#else\n#ifdef NORMAL_WORLDSPACE\nvNormalV=normalize(vec3(finalWorld*vec4(normalUpdated,0.0)));\n#else\nvNormalV=normalize(vec3((view*finalWorld)*vec4(normalUpdated,0.0)));\n#endif\n#endif\nvViewPos=view*worldPos;\n#if (defined(VELOCITY) || defined(VELOCITY_LINEAR)) && defined(BONES_VELOCITY_ENABLED)\nvCurrentPosition=viewProjection*finalWorld*vec4(positionUpdated,1.0);\n#if NUM_BONE_INFLUENCERS>0\nmat4 previousInfluence;previousInfluence=mPreviousBones[int(matricesIndices[0])]*matricesWeights[0];\n#if NUM_BONE_INFLUENCERS>1\npreviousInfluence+=mPreviousBones[int(matricesIndices[1])]*matricesWeights[1];\n#endif\n#if NUM_BONE_INFLUENCERS>2\npreviousInfluence+=mPreviousBones[int(matricesIndices[2])]*matricesWeights[2];\n#endif\n#if NUM_BONE_INFLUENCERS>3\npreviousInfluence+=mPreviousBones[int(matricesIndices[3])]*matricesWeights[3];\n#endif\n#if NUM_BONE_INFLUENCERS>4\npreviousInfluence+=mPreviousBones[int(matricesIndicesExtra[0])]*matricesWeightsExtra[0];\n#endif\n#if NUM_BONE_INFLUENCERS>5\npreviousInfluence+=mPreviousBones[int(matricesIndicesExtra[1])]*matricesWeightsExtra[1];\n#endif\n#if NUM_BONE_INFLUENCERS>6\npreviousInfluence+=mPreviousBones[int(matricesIndicesExtra[2])]*matricesWeightsExtra[2];\n#endif\n#if NUM_BONE_INFLUENCERS>7\npreviousInfluence+=mPreviousBones[int(matricesIndicesExtra[3])]*matricesWeightsExtra[3];\n#endif\nvPreviousPosition=previousViewProjection*finalPreviousWorld*previousInfluence*vec4(positionUpdated,1.0);\n#else\nvPreviousPosition=previousViewProjection*finalPreviousWorld*vec4(positionUpdated,1.0);\n#endif\n#endif\n#if defined(POSITION) || defined(BUMP)\nvPositionW=worldPos.xyz/worldPos.w;\n#endif\ngl_Position=viewProjection*finalWorld*vec4(positionUpdated,1.0);\n#include<clipPlaneVertex>\n#ifdef NEED_UV\n#ifdef UV1\n#if defined(ALPHATEST) && defined(ALPHATEST_UV1)\nvUV=vec2(diffuseMatrix*vec4(uvUpdated,1.0,0.0));\n#else\nvUV=uvUpdated;\n#endif\n#ifdef BUMP_UV1\nvBumpUV=vec2(bumpMatrix*vec4(uvUpdated,1.0,0.0));\n#endif\n#ifdef REFLECTIVITY_UV1\nvReflectivityUV=vec2(reflectivityMatrix*vec4(uvUpdated,1.0,0.0));\n#else\n#ifdef METALLIC_UV1\nvMetallicUV=vec2(metallicMatrix*vec4(uvUpdated,1.0,0.0));\n#endif\n#ifdef ROUGHNESS_UV1\nvRoughnessUV=vec2(roughnessMatrix*vec4(uvUpdated,1.0,0.0));\n#endif\n#endif\n#ifdef ALBEDO_UV1\nvAlbedoUV=vec2(albedoMatrix*vec4(uvUpdated,1.0,0.0));\n#endif\n#endif\n#ifdef UV2\n#if defined(ALPHATEST) && defined(ALPHATEST_UV2)\nvUV=vec2(diffuseMatrix*vec4(uv2Updated,1.0,0.0));\n#else\nvUV=uv2Updated;\n#endif\n#ifdef BUMP_UV2\nvBumpUV=vec2(bumpMatrix*vec4(uv2Updated,1.0,0.0));\n#endif\n#ifdef REFLECTIVITY_UV2\nvReflectivityUV=vec2(reflectivityMatrix*vec4(uv2Updated,1.0,0.0));\n#else\n#ifdef METALLIC_UV2\nvMetallicUV=vec2(metallicMatrix*vec4(uv2Updated,1.0,0.0));\n#endif\n#ifdef ROUGHNESS_UV2\nvRoughnessUV=vec2(roughnessMatrix*vec4(uv2Updated,1.0,0.0));\n#endif\n#endif\n#ifdef ALBEDO_UV2\nvAlbedoUV=vec2(albedoMatrix*vec4(uv2Updated,1.0,0.0));\n#endif\n#endif\n#endif\n#include<bumpVertex>\n}\n";n.ShadersStore[S]||(n.ShadersStore[S]=L);const O={name:S,shader:L};var U=Object.freeze({__proto__:null,geometryVertexShader:O});const P=["world","mBones","viewProjection","diffuseMatrix","view","previousWorld","previousViewProjection","mPreviousBones","bumpMatrix","reflectivityMatrix","albedoMatrix","reflectivityColor","albedoColor","metallic","glossiness","vTangentSpaceParams","vBumpInfos","morphTargetInfluences","morphTargetCount","morphTargetTextureInfo","morphTargetTextureIndices","boneTextureWidth"];_(P);class y{get normalsAreUnsigned(){return this._normalsAreUnsigned}_linkPrePassRenderer(e){this._linkedWithPrePass=!0,this._prePassRenderer=e,this._multiRenderTarget&&(this._multiRenderTarget.onClearObservable.clear(),this._multiRenderTarget.onClearObservable.add((()=>{})))}_unlinkPrePassRenderer(){this._linkedWithPrePass=!1,this._createRenderTargets()}_resetLayout(){this._enableDepth=!0,this._enableNormal=!0,this._enablePosition=!1,this._enableReflectivity=!1,this._enableVelocity=!1,this._enableVelocityLinear=!1,this._enableScreenspaceDepth=!1,this._attachmentsFromPrePass=[]}_forceTextureType(e,t){e===y.POSITION_TEXTURE_TYPE?(this._positionIndex=t,this._enablePosition=!0):e===y.VELOCITY_TEXTURE_TYPE?(this._velocityIndex=t,this._enableVelocity=!0):e===y.VELOCITY_LINEAR_TEXTURE_TYPE?(this._velocityLinearIndex=t,this._enableVelocityLinear=!0):e===y.REFLECTIVITY_TEXTURE_TYPE?(this._reflectivityIndex=t,this._enableReflectivity=!0):e===y.DEPTH_TEXTURE_TYPE?(this._depthIndex=t,this._enableDepth=!0):e===y.NORMAL_TEXTURE_TYPE?(this._normalIndex=t,this._enableNormal=!0):e===y.SCREENSPACE_DEPTH_TEXTURE_TYPE&&(this._screenspaceDepthIndex=t,this._enableScreenspaceDepth=!0)}_setAttachments(e){this._attachmentsFromPrePass=e}_linkInternalTexture(e){this._multiRenderTarget.setInternalTexture(e,0,!1)}get renderList(){return this._multiRenderTarget.renderList}set renderList(e){this._multiRenderTarget.renderList=e}get isSupported(){return this._multiRenderTarget.isSupported}getTextureIndex(e){switch(e){case y.POSITION_TEXTURE_TYPE:return this._positionIndex;case y.VELOCITY_TEXTURE_TYPE:return this._velocityIndex;case y.VELOCITY_LINEAR_TEXTURE_TYPE:return this._velocityLinearIndex;case y.REFLECTIVITY_TEXTURE_TYPE:return this._reflectivityIndex;case y.DEPTH_TEXTURE_TYPE:return this._depthIndex;case y.NORMAL_TEXTURE_TYPE:return this._normalIndex;case y.SCREENSPACE_DEPTH_TEXTURE_TYPE:return this._screenspaceDepthIndex;default:return-1}}get enableDepth(){return this._enableDepth}set enableDepth(e){this._enableDepth=e,this._linkedWithPrePass||(this.dispose(),this._createRenderTargets())}get enableNormal(){return this._enableNormal}set enableNormal(e){this._enableNormal=e,this._linkedWithPrePass||(this.dispose(),this._createRenderTargets())}get enablePosition(){return this._enablePosition}set enablePosition(e){this._enablePosition=e,this._linkedWithPrePass||(this.dispose(),this._createRenderTargets())}get enableVelocity(){return this._enableVelocity}set enableVelocity(e){this._enableVelocity=e,e||(this._previousTransformationMatrices={}),this._linkedWithPrePass||(this.dispose(),this._createRenderTargets()),this._scene.needsPreviousWorldMatrices=e}get enableVelocityLinear(){return this._enableVelocityLinear}set enableVelocityLinear(e){this._enableVelocityLinear=e,this._linkedWithPrePass||(this.dispose(),this._createRenderTargets())}get enableReflectivity(){return this._enableReflectivity}set enableReflectivity(e){this._enableReflectivity=e,this._linkedWithPrePass||(this.dispose(),this._createRenderTargets())}get enableScreenspaceDepth(){return this._enableScreenspaceDepth}set enableScreenspaceDepth(e){this._enableScreenspaceDepth=e,this._linkedWithPrePass||(this.dispose(),this._createRenderTargets())}get scene(){return this._scene}get ratio(){return"object"==typeof this._ratioOrDimensions?1:this._ratioOrDimensions}get shaderLanguage(){return this._shaderLanguage}constructor(e,i=1,n=t.TEXTUREFORMAT_DEPTH16,r){this._previousTransformationMatrices={},this._previousBonesTransformationMatrices={},this.excludedSkinnedMeshesFromVelocity=[],this.renderTransparentMeshes=!0,this.generateNormalsInWorldSpace=!1,this._normalsAreUnsigned=!1,this._resizeObserver=null,this._enableDepth=!0,this._enableNormal=!0,this._enablePosition=!1,this._enableVelocity=!1,this._enableVelocityLinear=!1,this._enableReflectivity=!1,this._enableScreenspaceDepth=!1,this._clearColor=new s(0,0,0,0),this._clearDepthColor=new s(0,0,0,1),this._positionIndex=-1,this._velocityIndex=-1,this._velocityLinearIndex=-1,this._reflectivityIndex=-1,this._depthIndex=-1,this._normalIndex=-1,this._screenspaceDepthIndex=-1,this._linkedWithPrePass=!1,this.useSpecificClearForDepthTexture=!1,this._shaderLanguage=0,this._shadersLoaded=!1,this._scene=e,this._ratioOrDimensions=i,this._useUbo=e.getEngine().supportsUniformBuffers,this._depthFormat=n,this._textureTypesAndFormats=r||{},this._initShaderSourceAsync(),y._SceneComponentInitialization(this._scene),this._createRenderTargets()}async _initShaderSourceAsync(){this._scene.getEngine().isWebGPU&&!y.ForceGLSL?(this._shaderLanguage=1,await Promise.all([import("./geometry.vertex-DYRFMQtq.esm.min.js"),import("./geometry.fragment-Jyoi4g_K.esm.min.js")])):await Promise.all([Promise.resolve().then((function(){return U})),Promise.resolve().then((function(){return R}))]),this._shadersLoaded=!0}isReady(e,t){if(!this._shadersLoaded)return!1;const i=e.getMaterial();if(i&&i.disableDepthWrite)return!1;const n=[],s=[r.PositionKind],d=e.getMesh();d.isVerticesDataPresent(r.NormalKind)&&(n.push("#define HAS_NORMAL_ATTRIBUTE"),s.push(r.NormalKind));let h=!1,f=!1;if(i){let e=!1;if(i.needAlphaTestingForMesh(d)&&i.getAlphaTestTexture()&&(n.push("#define ALPHATEST"),n.push(`#define ALPHATEST_UV${i.getAlphaTestTexture().coordinatesIndex+1}`),e=!0),(i.bumpTexture||i.normalTexture||i.geometryNormalTexture)&&a.BumpTextureEnabled){const t=i.bumpTexture||i.normalTexture||i.geometryNormalTexture;n.push("#define BUMP"),n.push(`#define BUMP_UV${t.coordinatesIndex+1}`),e=!0}if(this._enableReflectivity){let t=!1;if("PBRMetallicRoughnessMaterial"===i.getClassName())i.metallicRoughnessTexture&&(n.push("#define ORMTEXTURE"),n.push(`#define REFLECTIVITY_UV${i.metallicRoughnessTexture.coordinatesIndex+1}`),n.push("#define METALLICWORKFLOW"),e=!0,t=!0),null!=i.metallic&&(n.push("#define METALLIC"),n.push("#define METALLICWORKFLOW"),t=!0),null!=i.roughness&&(n.push("#define ROUGHNESS"),n.push("#define METALLICWORKFLOW"),t=!0),t&&(i.baseTexture&&(n.push("#define ALBEDOTEXTURE"),n.push(`#define ALBEDO_UV${i.baseTexture.coordinatesIndex+1}`),i.baseTexture.gammaSpace&&n.push("#define GAMMAALBEDO"),e=!0),i.baseColor&&n.push("#define ALBEDOCOLOR"));else if("PBRSpecularGlossinessMaterial"===i.getClassName())i.specularGlossinessTexture?(n.push("#define SPECULARGLOSSINESSTEXTURE"),n.push(`#define REFLECTIVITY_UV${i.specularGlossinessTexture.coordinatesIndex+1}`),e=!0,i.specularGlossinessTexture.gammaSpace&&n.push("#define GAMMAREFLECTIVITYTEXTURE")):i.specularColor&&n.push("#define REFLECTIVITYCOLOR"),null!=i.glossiness&&n.push("#define GLOSSINESS");else if("PBRMaterial"===i.getClassName())i.metallicTexture&&(n.push("#define ORMTEXTURE"),n.push(`#define REFLECTIVITY_UV${i.metallicTexture.coordinatesIndex+1}`),n.push("#define METALLICWORKFLOW"),e=!0,t=!0),null!=i.metallic&&(n.push("#define METALLIC"),n.push("#define METALLICWORKFLOW"),t=!0),null!=i.roughness&&(n.push("#define ROUGHNESS"),n.push("#define METALLICWORKFLOW"),t=!0),t?(i.albedoTexture&&(n.push("#define ALBEDOTEXTURE"),n.push(`#define ALBEDO_UV${i.albedoTexture.coordinatesIndex+1}`),i.albedoTexture.gammaSpace&&n.push("#define GAMMAALBEDO"),e=!0),i.albedoColor&&n.push("#define ALBEDOCOLOR")):(i.reflectivityTexture?(n.push("#define SPECULARGLOSSINESSTEXTURE"),n.push(`#define REFLECTIVITY_UV${i.reflectivityTexture.coordinatesIndex+1}`),i.reflectivityTexture.gammaSpace&&n.push("#define GAMMAREFLECTIVITYTEXTURE"),e=!0):i.reflectivityColor&&n.push("#define REFLECTIVITYCOLOR"),null!=i.microSurface&&n.push("#define GLOSSINESS"));else if("StandardMaterial"===i.getClassName())i.specularTexture&&(n.push("#define REFLECTIVITYTEXTURE"),n.push(`#define REFLECTIVITY_UV${i.specularTexture.coordinatesIndex+1}`),i.specularTexture.gammaSpace&&n.push("#define GAMMAREFLECTIVITYTEXTURE"),e=!0),i.specularColor&&n.push("#define REFLECTIVITYCOLOR");else if("OpenPBRMaterial"===i.getClassName()){const s=i;n.push("#define METALLICWORKFLOW"),t=!0,n.push("#define METALLIC"),n.push("#define ROUGHNESS"),s._useRoughnessFromMetallicTextureGreen&&s.baseMetalnessTexture?(n.push("#define ORMTEXTURE"),n.push(`#define REFLECTIVITY_UV${s.baseMetalnessTexture.coordinatesIndex+1}`),e=!0):s.baseMetalnessTexture?(n.push("#define METALLIC_TEXTURE"),n.push(`#define METALLIC_UV${s.baseMetalnessTexture.coordinatesIndex+1}`),e=!0):s.specularRoughnessTexture&&(n.push("#define ROUGHNESS_TEXTURE"),n.push(`#define ROUGHNESS_UV${s.specularRoughnessTexture.coordinatesIndex+1}`),e=!0),s.baseColorTexture&&(n.push("#define ALBEDOTEXTURE"),n.push(`#define ALBEDO_UV${s.baseColorTexture.coordinatesIndex+1}`),s.baseColorTexture.gammaSpace&&n.push("#define GAMMAALBEDO"),e=!0),s.baseColor&&n.push("#define ALBEDOCOLOR")}}e&&(n.push("#define NEED_UV"),d.isVerticesDataPresent(r.UVKind)&&(s.push(r.UVKind),n.push("#define UV1"),h=!0),d.isVerticesDataPresent(r.UV2Kind)&&(s.push(r.UV2Kind),n.push("#define UV2"),f=!0))}this._enableDepth&&(n.push("#define DEPTH"),n.push("#define DEPTH_INDEX "+this._depthIndex)),this._enableNormal&&(n.push("#define NORMAL"),n.push("#define NORMAL_INDEX "+this._normalIndex)),this._enablePosition&&(n.push("#define POSITION"),n.push("#define POSITION_INDEX "+this._positionIndex)),this._enableVelocity&&(n.push("#define VELOCITY"),n.push("#define VELOCITY_INDEX "+this._velocityIndex),-1===this.excludedSkinnedMeshesFromVelocity.indexOf(d)&&n.push("#define BONES_VELOCITY_ENABLED")),this._enableVelocityLinear&&(n.push("#define VELOCITY_LINEAR"),n.push("#define VELOCITY_LINEAR_INDEX "+this._velocityLinearIndex),-1===this.excludedSkinnedMeshesFromVelocity.indexOf(d)&&n.push("#define BONES_VELOCITY_ENABLED")),this._enableReflectivity&&(n.push("#define REFLECTIVITY"),n.push("#define REFLECTIVITY_INDEX "+this._reflectivityIndex)),this._enableScreenspaceDepth&&-1!==this._screenspaceDepthIndex&&(n.push("#define SCREENSPACE_DEPTH_INDEX "+this._screenspaceDepthIndex),n.push("#define SCREENSPACE_DEPTH")),this.generateNormalsInWorldSpace&&n.push("#define NORMAL_WORLDSPACE"),this._normalsAreUnsigned&&n.push("#define ENCODE_NORMAL"),d.useBones&&d.computeBonesUsingShaders&&d.skeleton?(s.push(r.MatricesIndicesKind),s.push(r.MatricesWeightsKind),d.numBoneInfluencers>4&&(s.push(r.MatricesIndicesExtraKind),s.push(r.MatricesWeightsExtraKind)),n.push("#define NUM_BONE_INFLUENCERS "+d.numBoneInfluencers),n.push("#define BONETEXTURE "+d.skeleton.isUsingTextureForMatrices),n.push("#define BonesPerMesh "+(d.skeleton.bones.length+1))):(n.push("#define NUM_BONE_INFLUENCERS 0"),n.push("#define BONETEXTURE false"),n.push("#define BonesPerMesh 0"));const c=d.morphTargetManager?o(d.morphTargetManager,n,s,d,!0,!0,!1,h,f,!1):0;t&&(n.push("#define INSTANCES"),l(s,this._enableVelocity||this._enableVelocityLinear),e.getRenderingMesh().hasThinInstances&&n.push("#define THIN_INSTANCES")),this._linkedWithPrePass?n.push("#define SCENE_MRT_COUNT "+this._attachmentsFromPrePass.length):n.push("#define SCENE_MRT_COUNT "+this._multiRenderTarget.textures.length),u(i,this._scene,n);const T=this._scene.getEngine(),_=e._getDrawWrapper(void 0,!0),p=_.defines,E=n.join("\n");return p!==E&&_.setEffect(T.createEffect("geometry",{attributes:s,uniformsNames:P,samplers:["diffuseSampler","bumpSampler","reflectivitySampler","albedoSampler","morphTargets","boneSampler"],defines:E,onCompiled:null,fallbacks:null,onError:null,uniformBuffersNames:["Scene"],indexParameters:{buffersCount:this._multiRenderTarget.textures.length-1,maxSimultaneousMorphTargets:c},shaderLanguage:this.shaderLanguage},T),E),_.effect.isReady()}getGBuffer(){return this._multiRenderTarget}get samples(){return this._multiRenderTarget.samples}set samples(e){this._multiRenderTarget.samples=e}dispose(){if(this._resizeObserver){this._scene.getEngine().onResizeObservable.remove(this._resizeObserver),this._resizeObserver=null}this.getGBuffer().dispose()}_assignRenderTargetIndices(){const e=[],t=[];let i=0;return this._enableDepth&&(this._depthIndex=i,i++,e.push("gBuffer_Depth"),t.push(this._textureTypesAndFormats[y.DEPTH_TEXTURE_TYPE])),this._enableNormal&&(this._normalIndex=i,i++,e.push("gBuffer_Normal"),t.push(this._textureTypesAndFormats[y.NORMAL_TEXTURE_TYPE])),this._enablePosition&&(this._positionIndex=i,i++,e.push("gBuffer_Position"),t.push(this._textureTypesAndFormats[y.POSITION_TEXTURE_TYPE])),this._enableVelocity&&(this._velocityIndex=i,i++,e.push("gBuffer_Velocity"),t.push(this._textureTypesAndFormats[y.VELOCITY_TEXTURE_TYPE])),this._enableVelocityLinear&&(this._velocityLinearIndex=i,i++,e.push("gBuffer_VelocityLinear"),t.push(this._textureTypesAndFormats[y.VELOCITY_LINEAR_TEXTURE_TYPE])),this._enableReflectivity&&(this._reflectivityIndex=i,i++,e.push("gBuffer_Reflectivity"),t.push(this._textureTypesAndFormats[y.REFLECTIVITY_TEXTURE_TYPE])),this._enableScreenspaceDepth&&(this._screenspaceDepthIndex=i,i++,e.push("gBuffer_ScreenspaceDepth"),t.push(this._textureTypesAndFormats[y.SCREENSPACE_DEPTH_TEXTURE_TYPE])),[i,e,t]}_createRenderTargets(){const e=this._scene.getEngine(),[n,s,r]=this._assignRenderTargetIndices();let o=t.TEXTURETYPE_UNSIGNED_BYTE;e._caps.textureFloat&&e._caps.textureFloatLinearFiltering?o=t.TEXTURETYPE_FLOAT:e._caps.textureHalfFloat&&e._caps.textureHalfFloatLinearFiltering&&(o=t.TEXTURETYPE_HALF_FLOAT);const l=void 0!==this._ratioOrDimensions.width?this._ratioOrDimensions:{width:e.getRenderWidth()*this._ratioOrDimensions,height:e.getRenderHeight()*this._ratioOrDimensions},u=[],_=[];for(const e of r)e?(u.push(e.textureType),_.push(e.textureFormat)):(u.push(o),_.push(t.TEXTUREFORMAT_RGBA));if(this._normalsAreUnsigned=u[y.NORMAL_TEXTURE_TYPE]===t.TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV||u[y.NORMAL_TEXTURE_TYPE]===t.TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV,this._multiRenderTarget=new E("gBuffer",l,n,this._scene,{generateMipMaps:!1,generateDepthTexture:!0,types:u,formats:_,depthTextureFormat:this._depthFormat},s.concat("gBuffer_DepthBuffer")),!this.isSupported)return;this._multiRenderTarget.wrapU=i.CLAMP_ADDRESSMODE,this._multiRenderTarget.wrapV=i.CLAMP_ADDRESSMODE,this._multiRenderTarget.refreshRate=1,this._multiRenderTarget.renderParticles=!1,this._multiRenderTarget.renderList=null;const p=[!0],m=[!1],g=[!0];for(let e=1;e<n;++e)p.push(!0),g.push(!1),m.push(!0);const v=e.buildTextureLayout(p),x=e.buildTextureLayout(m),R=e.buildTextureLayout(g);this._multiRenderTarget.onClearObservable.add((e=>{e.bindAttachments(this.useSpecificClearForDepthTexture?x:v),e.clear(this._clearColor,!0,!0,!0),this.useSpecificClearForDepthTexture&&(e.bindAttachments(R),e.clear(this._clearDepthColor,!0,!0,!0)),e.bindAttachments(v)})),this._resizeObserver=e.onResizeObservable.add((()=>{if(this._multiRenderTarget){const t=void 0!==this._ratioOrDimensions.width?this._ratioOrDimensions:{width:e.getRenderWidth()*this._ratioOrDimensions,height:e.getRenderHeight()*this._ratioOrDimensions};this._multiRenderTarget.resize(t)}}));const I=e=>{const t=e.getRenderingMesh(),i=e.getEffectiveMesh(),n=this._scene,s=n.getEngine(),r=e.getMaterial();if(!r)return;if(i._internalAbstractMeshDataInfo._isActiveIntermediate=!1,(this._enableVelocity||this._enableVelocityLinear)&&!this._previousTransformationMatrices[i.uniqueId]&&(this._previousTransformationMatrices[i.uniqueId]={world:d.Identity(),viewProjection:n.getTransformMatrix()},t.skeleton)){const e=t.skeleton.getTransformMatrices(t);this._previousBonesTransformationMatrices[t.uniqueId]=this._copyBonesTransformationMatrices(e,new Float32Array(e.length))}const o=t._getInstancesRenderList(e._id,!!e.getReplacementMesh());if(o.mustReturn)return;const l=s.getCaps().instancedArrays&&(null!==o.visibleInstances[e._id]||t.hasThinInstances),u=i.getWorldMatrix();if(this.isReady(e,l)){const d=e._getDrawWrapper();if(!d)return;const _=d.effect;let p;s.enableEffect(d),l||t._bind(e,_,r.fillMode),this._useUbo?(h(_,this._scene.getSceneUniformBuffer()),this._scene.finalizeSceneUbo()):(_.setMatrix("viewProjection",n.getTransformMatrix()),_.setMatrix("view",n.getViewMatrix()));if(t._instanceDataStorage.isFrozen||!r.backFaceCulling&&null===r.sideOrientation)p=t._effectiveSideOrientation;else{const e=i._getWorldMatrixDeterminant();p=r._getEffectiveOrientation(t),e<0&&(p=p===T.ClockWiseSideOrientation?T.CounterClockWiseSideOrientation:T.ClockWiseSideOrientation)}if(r._preBind(d,p),r.needAlphaTestingForMesh(i)){const e=r.getAlphaTestTexture();e&&(_.setTexture("diffuseSampler",e),_.setMatrix("diffuseMatrix",e.getTextureMatrix()))}if((r.bumpTexture||r.normalTexture||r.geometryNormalTexture)&&n.getEngine().getCaps().standardDerivatives&&a.BumpTextureEnabled){const e=r.bumpTexture||r.normalTexture||r.geometryNormalTexture;_.setFloat3("vBumpInfos",e.coordinatesIndex,1/e.level,r.parallaxScaleBias),_.setMatrix("bumpMatrix",e.getTextureMatrix()),_.setTexture("bumpSampler",e),_.setFloat2("vTangentSpaceParams",r.invertNormalMapX?-1:1,r.invertNormalMapY?-1:1)}if(this._enableReflectivity)if("PBRMetallicRoughnessMaterial"===r.getClassName())null!==r.metallicRoughnessTexture&&(_.setTexture("reflectivitySampler",r.metallicRoughnessTexture),_.setMatrix("reflectivityMatrix",r.metallicRoughnessTexture.getTextureMatrix())),null!==r.metallic&&_.setFloat("metallic",r.metallic),null!==r.roughness&&_.setFloat("glossiness",1-r.roughness),null!==r.baseTexture&&(_.setTexture("albedoSampler",r.baseTexture),_.setMatrix("albedoMatrix",r.baseTexture.getTextureMatrix())),null!==r.baseColor&&_.setColor3("albedoColor",r.baseColor);else if("PBRSpecularGlossinessMaterial"===r.getClassName())null!==r.specularGlossinessTexture?(_.setTexture("reflectivitySampler",r.specularGlossinessTexture),_.setMatrix("reflectivityMatrix",r.specularGlossinessTexture.getTextureMatrix())):null!==r.specularColor&&_.setColor3("reflectivityColor",r.specularColor),null!==r.glossiness&&_.setFloat("glossiness",r.glossiness);else if("PBRMaterial"===r.getClassName())null!==r.metallicTexture&&(_.setTexture("reflectivitySampler",r.metallicTexture),_.setMatrix("reflectivityMatrix",r.metallicTexture.getTextureMatrix())),null!==r.metallic&&_.setFloat("metallic",r.metallic),null!==r.roughness&&_.setFloat("glossiness",1-r.roughness),null!==r.roughness||null!==r.metallic||null!==r.metallicTexture?(null!==r.albedoTexture&&(_.setTexture("albedoSampler",r.albedoTexture),_.setMatrix("albedoMatrix",r.albedoTexture.getTextureMatrix())),null!==r.albedoColor&&_.setColor3("albedoColor",r.albedoColor)):(null!==r.reflectivityTexture?(_.setTexture("reflectivitySampler",r.reflectivityTexture),_.setMatrix("reflectivityMatrix",r.reflectivityTexture.getTextureMatrix())):null!==r.reflectivityColor&&_.setColor3("reflectivityColor",r.reflectivityColor),null!==r.microSurface&&_.setFloat("glossiness",r.microSurface));else if("StandardMaterial"===r.getClassName())null!==r.specularTexture&&(_.setTexture("reflectivitySampler",r.specularTexture),_.setMatrix("reflectivityMatrix",r.specularTexture.getTextureMatrix())),null!==r.specularColor&&_.setColor3("reflectivityColor",r.specularColor);else if("OpenPBRMaterial"===r.getClassName()){const e=r;e._useRoughnessFromMetallicTextureGreen&&e.baseMetalnessTexture?(_.setTexture("reflectivitySampler",e.baseMetalnessTexture),_.setMatrix("reflectivityMatrix",e.baseMetalnessTexture.getTextureMatrix())):e.baseMetalnessTexture?(_.setTexture("metallicSampler",e.baseMetalnessTexture),_.setMatrix("metallicMatrix",e.baseMetalnessTexture.getTextureMatrix())):e.specularRoughnessTexture&&(_.setTexture("roughnessSampler",e.specularRoughnessTexture),_.setMatrix("roughnessMatrix",e.specularRoughnessTexture.getTextureMatrix())),_.setFloat("metallic",e.baseMetalness),_.setFloat("glossiness",1-e.specularRoughness),null!==e.baseColorTexture&&(_.setTexture("albedoSampler",e.baseColorTexture),_.setMatrix("albedoMatrix",e.baseColorTexture.getTextureMatrix())),null!==e.baseColor&&_.setColor3("albedoColor",e.baseColor)}if(f(_,r,this._scene),t.useBones&&t.computeBonesUsingShaders&&t.skeleton){const e=t.skeleton;if(e.isUsingTextureForMatrices&&_.getUniformIndex("boneTextureWidth")>-1){const i=e.getTransformMatrixTexture(t);_.setTexture("boneSampler",i),_.setFloat("boneTextureWidth",4*(e.bones.length+1))}else _.setMatrices("mBones",t.skeleton.getTransformMatrices(t));(this._enableVelocity||this._enableVelocityLinear)&&_.setMatrices("mPreviousBones",this._previousBonesTransformationMatrices[t.uniqueId])}c(t,_),t.morphTargetManager&&t.morphTargetManager.isUsingTextureForTargets&&t.morphTargetManager._bind(_),(this._enableVelocity||this._enableVelocityLinear)&&(_.setMatrix("previousWorld",this._previousTransformationMatrices[i.uniqueId].world),_.setMatrix("previousViewProjection",this._previousTransformationMatrices[i.uniqueId].viewProjection)),l&&t.hasThinInstances&&_.setMatrix("world",u),t._processRendering(i,e,_,r.fillMode,o,l,((e,t)=>{e||_.setMatrix("world",t)}))}(this._enableVelocity||this._enableVelocityLinear)&&(this._previousTransformationMatrices[i.uniqueId].world=u.clone(),this._previousTransformationMatrices[i.uniqueId].viewProjection=this._scene.getTransformMatrix().clone(),t.skeleton&&this._copyBonesTransformationMatrices(t.skeleton.getTransformMatrices(t),this._previousBonesTransformationMatrices[i.uniqueId]))};this._multiRenderTarget.customIsReadyFunction=(t,i,n)=>{if((n||0===i)&&t.subMeshes)for(let i=0;i<t.subMeshes.length;++i){const n=t.subMeshes[i],s=n.getMaterial(),r=n.getRenderingMesh();if(!s)continue;const a=r._getInstancesRenderList(n._id,!!n.getReplacementMesh()),o=e.getCaps().instancedArrays&&(null!==a.visibleInstances[n._id]||r.hasThinInstances);if(!this.isReady(n,o))return!1}return!0},this._multiRenderTarget.customRenderFunction=(t,i,n,s)=>{let r;if(this._linkedWithPrePass){if(!this._prePassRenderer.enabled)return;this._scene.getEngine().bindAttachments(this._attachmentsFromPrePass)}if(s.length){for(e.setColorWrite(!1),r=0;r<s.length;r++)I(s.data[r]);e.setColorWrite(!0)}for(r=0;r<t.length;r++)I(t.data[r]);for(e.setDepthWrite(!1),r=0;r<i.length;r++)I(i.data[r]);if(this.renderTransparentMeshes)for(r=0;r<n.length;r++)I(n.data[r]);e.setDepthWrite(!0)}}_copyBonesTransformationMatrices(e,t){for(let i=0;i<e.length;i++)t[i]=e[i];return t}}y.ForceGLSL=!1,y.DEPTH_TEXTURE_TYPE=0,y.NORMAL_TEXTURE_TYPE=1,y.POSITION_TEXTURE_TYPE=2,y.VELOCITY_TEXTURE_TYPE=3,y.REFLECTIVITY_TEXTURE_TYPE=4,y.SCREENSPACE_DEPTH_TEXTURE_TYPE=5,y.VELOCITY_LINEAR_TEXTURE_TYPE=6,y._SceneComponentInitialization=e=>{throw p("GeometryBufferRendererSceneComponent")};export{y as G,E as M};
//# sourceMappingURL=geometryBufferRenderer-B36so5nd.esm.min.js.map
