{"version":3,"file":"KHR_materials_iridescence-xQVWvYmz.esm.min.js","sources":["../../../../../dev/loaders/dist/glTF/2.0/Extensions/KHR_materials_iridescence.js"],"sourcesContent":["import { GLTFLoader } from \"../glTFLoader\";\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\nconst NAME = \"KHR_materials_iridescence\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_iridescence/README.md)\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_materials_iridescence {\n    /**\n     * @internal\n     */\n    constructor(loader) {\n        /**\n         * The name of this extension.\n         */\n        this.name = NAME;\n        /**\n         * Defines a number that determines the order the extensions are applied.\n         */\n        this.order = 195;\n        this._loader = loader;\n        this.enabled = this._loader.isExtensionUsed(NAME);\n    }\n    /** @internal */\n    dispose() {\n        this._loader = null;\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line no-restricted-syntax\n    loadMaterialPropertiesAsync(context, material, babylonMaterial) {\n        return GLTFLoader.LoadExtensionAsync(context, material, this.name, async (extensionContext, extension) => {\n            const promises = new Array();\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n            promises.push(this._loadIridescencePropertiesAsync(extensionContext, extension, babylonMaterial));\n            // eslint-disable-next-line github/no-then\n            return await Promise.all(promises).then(() => { });\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\n    _loadIridescencePropertiesAsync(context, properties, babylonMaterial) {\n        const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\n        const promises = new Array();\n        // Set non-texture properties immediately\n        adapter.thinFilmWeight = properties.iridescenceFactor ?? 0;\n        adapter.thinFilmIor = properties.iridescenceIor ?? properties.iridescenceIOR ?? 1.3;\n        adapter.thinFilmThicknessMinimum = properties.iridescenceThicknessMinimum ?? 100;\n        adapter.thinFilmThicknessMaximum = properties.iridescenceThicknessMaximum ?? 400;\n        // Load textures\n        if (properties.iridescenceTexture) {\n            promises.push(this._loader.loadTextureInfoAsync(`${context}/iridescenceTexture`, properties.iridescenceTexture, (texture) => {\n                texture.name = `${babylonMaterial.name} (Iridescence)`;\n                adapter.thinFilmWeightTexture = texture;\n            }));\n        }\n        if (properties.iridescenceThicknessTexture) {\n            promises.push(this._loader.loadTextureInfoAsync(`${context}/iridescenceThicknessTexture`, properties.iridescenceThicknessTexture, (texture) => {\n                texture.name = `${babylonMaterial.name} (Iridescence Thickness)`;\n                adapter.thinFilmThicknessTexture = texture;\n            }));\n        }\n        // eslint-disable-next-line github/no-then\n        return Promise.all(promises).then(() => { });\n    }\n}\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_iridescence(loader));\n//# sourceMappingURL=KHR_materials_iridescence.js.map"],"names":["NAME","KHR_materials_iridescence","constructor","loader","this","name","order","_loader","enabled","isExtensionUsed","dispose","loadMaterialPropertiesAsync","context","material","babylonMaterial","GLTFLoader","LoadExtensionAsync","async","extensionContext","extension","promises","Array","push","_loadIridescencePropertiesAsync","Promise","all","then","properties","adapter","_getOrCreateMaterialAdapter","thinFilmWeight","iridescenceFactor","thinFilmIor","iridescenceIor","iridescenceIOR","thinFilmThicknessMinimum","iridescenceThicknessMinimum","thinFilmThicknessMaximum","iridescenceThicknessMaximum","iridescenceTexture","loadTextureInfoAsync","texture","thinFilmWeightTexture","iridescenceThicknessTexture","thinFilmThicknessTexture","unregisterGLTFExtension","registerGLTFExtension"],"mappings":"wUAEA,MAAMA,EAAO,4BAKN,MAAMC,EAIT,WAAAC,CAAYC,GAIRC,KAAKC,KAAOL,EAIZI,KAAKE,MAAQ,IACbF,KAAKG,QAAUJ,EACfC,KAAKI,QAAUJ,KAAKG,QAAQE,gBAAgBT,EACpD,CAEI,OAAAU,GACIN,KAAKG,QAAU,IACvB,CAKI,2BAAAI,CAA4BC,EAASC,EAAUC,GAC3C,OAAOC,EAAWC,mBAAmBJ,EAASC,EAAUT,KAAKC,MAAMY,MAAOC,EAAkBC,KACxF,MAAMC,EAAW,IAAIC,MAIrB,OAHAD,EAASE,KAAKlB,KAAKG,QAAQI,4BAA4BC,EAASC,EAAUC,IAC1EM,EAASE,KAAKlB,KAAKmB,gCAAgCL,EAAkBC,EAAWL,UAEnEU,QAAQC,IAAIL,GAAUM,MAAK,WAEpD,CAEI,+BAAAH,CAAgCX,EAASe,EAAYb,GACjD,MAAMc,EAAUxB,KAAKG,QAAQsB,4BAA4Bf,GACnDM,EAAW,IAAIC,MAoBrB,OAlBAO,EAAQE,eAAiBH,EAAWI,mBAAqB,EACzDH,EAAQI,YAAcL,EAAWM,gBAAkBN,EAAWO,gBAAkB,IAChFN,EAAQO,yBAA2BR,EAAWS,6BAA+B,IAC7ER,EAAQS,yBAA2BV,EAAWW,6BAA+B,IAEzEX,EAAWY,oBACXnB,EAASE,KAAKlB,KAAKG,QAAQiC,qBAAqB,GAAG5B,uBAA8Be,EAAWY,oBAAqBE,IAC7GA,EAAQpC,KAAO,GAAGS,EAAgBT,qBAClCuB,EAAQc,sBAAwBD,MAGpCd,EAAWgB,6BACXvB,EAASE,KAAKlB,KAAKG,QAAQiC,qBAAqB,GAAG5B,gCAAuCe,EAAWgB,6BAA8BF,IAC/HA,EAAQpC,KAAO,GAAGS,EAAgBT,+BAClCuB,EAAQgB,yBAA2BH,MAIpCjB,QAAQC,IAAIL,GAAUM,MAAK,QAC1C,EAEAmB,EAAwB7C,GACxB8C,EAAsB9C,GAAM,GAAOG,GAAW,IAAIF,EAA0BE"}