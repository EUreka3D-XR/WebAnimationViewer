{"version":3,"file":"openPbrMaterial-CC89Te4d.esm.js","sources":["../../../../../dev/core/dist/Materials/PBR/openPbrMaterial.js"],"sourcesContent":["import { __decorate } from \"tslib\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { serialize, expandToProperty, addAccessorsForMaterialProperty } from \"../../Misc/decorators\";\nimport { GetEnvironmentBRDFTexture } from \"../../Misc/brdfTextureTools\";\nimport { Scene } from \"../../scene\";\nimport { Color3 } from \"../../Maths/math.color\";\nimport { ImageProcessingConfiguration } from \"../imageProcessingConfiguration\";\nimport { Texture } from \"../../Materials/Textures/texture\";\nimport { RegisterClass } from \"../../Misc/typeStore\";\nimport { Material } from \"../material\";\nimport { SerializationHelper } from \"../../Misc/decorators.serialization\";\nimport { MaterialDefines } from \"../materialDefines\";\nimport { ImageProcessingDefinesMixin } from \"../imageProcessingConfiguration.defines\";\nimport { EffectFallbacks } from \"../effectFallbacks\";\nimport { AddClipPlaneUniforms, BindClipPlane } from \"../clipPlaneMaterialHelper\";\nimport { BindBonesParameters, BindFogParameters, BindLights, BindLogDepth, BindMorphTargetParameters, BindTextureMatrix, BindIBLParameters, BindIBLSamplers, HandleFallbacksForShadows, PrepareAttributesForBakedVertexAnimation, PrepareAttributesForBones, PrepareAttributesForInstances, PrepareAttributesForMorphTargets, PrepareDefinesForAttributes, PrepareDefinesForFrameBoundValues, PrepareDefinesForLights, PrepareDefinesForIBL, PrepareDefinesForMergedUV, PrepareDefinesForMisc, PrepareDefinesForMultiview, PrepareDefinesForOIT, PrepareDefinesForPrePass, PrepareUniformsAndSamplersList, PrepareUniformsAndSamplersForIBL, PrepareUniformLayoutForIBL, } from \"../materialHelper.functions\";\nimport { Constants } from \"../../Engines/constants\";\nimport { VertexBuffer } from \"../../Buffers/buffer\";\nimport { MaterialHelperGeometryRendering } from \"../materialHelper.geometryrendering\";\nimport { PrePassConfiguration } from \"../prePassConfiguration\";\nimport { MaterialFlags } from \"../materialFlags\";\nimport { Logger } from \"core/Misc/logger\";\nimport { UVDefinesMixin } from \"../uv.defines\";\nimport { Vector2, Vector4, TmpVectors } from \"core/Maths/math.vector\";\nimport { ImageProcessingMixin } from \"../imageProcessing\";\nimport { PushMaterial } from \"../pushMaterial\";\nimport { SmartArray } from \"../../Misc/smartArray\";\nconst onCreatedEffectParameters = { effect: null, subMesh: null };\nclass Uniform {\n    populateVectorFromLinkedProperties(vector) {\n        const destinationSize = vector.dimension[0];\n        for (const propKey in this.linkedProperties) {\n            const prop = this.linkedProperties[propKey];\n            const sourceSize = prop.numComponents;\n            if (destinationSize < sourceSize || prop.targetUniformComponentOffset > destinationSize - sourceSize) {\n                if (sourceSize == 1) {\n                    Logger.Error(`Float property ${prop.name} has an offset that is too large.`);\n                }\n                else {\n                    Logger.Error(`Vector${sourceSize} property ${prop.name} won't fit in Vector${destinationSize} or has an offset that is too large.`);\n                }\n                return;\n            }\n            if (typeof prop.value === \"number\") {\n                Uniform._tmpArray[prop.targetUniformComponentOffset] = prop.value;\n            }\n            else {\n                prop.value.toArray(Uniform._tmpArray, prop.targetUniformComponentOffset);\n            }\n        }\n        vector.fromArray(Uniform._tmpArray);\n    }\n    constructor(name, componentNum) {\n        this.linkedProperties = {};\n        this.name = name;\n        this.numComponents = componentNum;\n    }\n}\nUniform._tmpArray = [0, 0, 0, 0];\n/**\n * Defines a property for the OpenPBRMaterial.\n */\nclass Property {\n    /**\n     * Creates a new Property instance.\n     * @param name The name of the property in the shader\n     * @param defaultValue The default value of the property\n     * @param targetUniformName The name of the property in the shader uniform block\n     * @param targetUniformComponentNum The number of components in the target uniform. All properties that are\n     * packed into the same uniform must agree on the size of the target uniform.\n     * @param targetUniformComponentOffset The offset in the uniform where this property will be packed.\n     */\n    constructor(name, defaultValue, targetUniformName, targetUniformComponentNum, targetUniformComponentOffset = 0) {\n        // public includeAlphaFromProp: string = \"\";\n        /**\n         * If not given a type, there will be no uniform defined for this property and\n         * it will be assumed that the value will be packed into the already existing \"uniformName\" uniform.\n         */\n        this.targetUniformComponentNum = 4; // Default to vec4\n        this.targetUniformComponentOffset = 0;\n        this.name = name;\n        this.targetUniformName = targetUniformName;\n        this.defaultValue = defaultValue;\n        this.value = defaultValue;\n        this.targetUniformComponentNum = targetUniformComponentNum;\n        this.targetUniformComponentOffset = targetUniformComponentOffset;\n    }\n    /**\n     * Returns the number of components of the property based on its default value type.\n     */\n    get numComponents() {\n        if (typeof this.defaultValue === \"number\") {\n            return 1;\n        }\n        return this.defaultValue.dimension[0];\n    }\n}\nclass Sampler {\n    /**\n     * The name of the sampler used in the shader.\n     * If this naming changes, we'll also need to change:\n     * - samplerFragmentDeclaration.fx\n     * - openpbr.fragment.fx\n     */\n    get samplerName() {\n        return this.samplerPrefix + \"Sampler\";\n    }\n    /**\n     * The name of the sampler info used in the shader.\n     * If this naming changes, we'll also need to change:\n     * - openpbr.vertex.fx\n     * - openpbr.fragment.fx\n     */\n    get samplerInfoName() {\n        return \"v\" + this.samplerPrefix.charAt(0).toUpperCase() + this.samplerPrefix.slice(1) + \"Infos\";\n    }\n    /**\n     * The name of the matrix used for this sampler in the shader.\n     * If this naming changes, we'll also need to change:\n     * - materialHelper.functions.BindTextureMatrix\n     * - samplerVertexImplementation.fx\n     * - openpbr.fragment.fx\n     */\n    get samplerMatrixName() {\n        return this.samplerPrefix + \"Matrix\";\n    }\n    /**\n     * Creates a new Sampler instance.\n     * @param name The name of the texture property\n     * @param samplerPrefix The prefix used for the name of the sampler in the shader\n     * @param textureDefine The define used in the shader for this sampler\n     */\n    constructor(name, samplerPrefix, textureDefine) {\n        this.value = null; // Texture value, default to null\n        this.samplerPrefix = \"\"; // The name of the sampler in the shader\n        this.textureDefine = \"\"; // The define used in the shader for this sampler\n        this.name = name;\n        this.samplerPrefix = samplerPrefix;\n        this.textureDefine = textureDefine;\n    }\n}\nclass OpenPBRMaterialDefinesBase extends UVDefinesMixin(MaterialDefines) {\n}\n/**\n * Manages the defines for the PBR Material.\n * @internal\n */\nexport class OpenPBRMaterialDefines extends ImageProcessingDefinesMixin(OpenPBRMaterialDefinesBase) {\n    /**\n     * Initializes the PBR Material defines.\n     * @param externalProperties The external properties\n     */\n    constructor(externalProperties) {\n        super(externalProperties);\n        this.NUM_SAMPLES = \"0\";\n        this.REALTIME_FILTERING = false;\n        this.IBL_CDF_FILTERING = false;\n        this.VERTEXCOLOR = false;\n        this.BAKED_VERTEX_ANIMATION_TEXTURE = false;\n        this.VERTEXALPHA = false;\n        this.ALPHATEST = false;\n        this.DEPTHPREPASS = false;\n        this.ALPHABLEND = false;\n        this.ALPHA_FROM_BASE_COLOR_TEXTURE = false;\n        this.ALPHATESTVALUE = \"0.5\";\n        this.PREMULTIPLYALPHA = false;\n        this.REFLECTIVITY_GAMMA = false;\n        this.REFLECTIVITYDIRECTUV = 0;\n        this.SPECULARTERM = false;\n        this.LODBASEDMICROSFURACE = true;\n        this.METALLICWORKFLOW = true;\n        this.ROUGHNESSSTOREINMETALMAPALPHA = false;\n        this.ROUGHNESSSTOREINMETALMAPGREEN = false;\n        this.METALLNESSSTOREINMETALMAPBLUE = false;\n        this.AOSTOREINMETALMAPRED = false;\n        this.SPECULAR_WEIGHT_IN_ALPHA = false;\n        this.SPECULAR_WEIGHT_FROM_SPECULAR_COLOR_TEXTURE = false;\n        this.SPECULAR_ROUGHNESS_ANISOTROPY_FROM_TANGENT_TEXTURE = false;\n        this.COAT_ROUGHNESS_ANISOTROPY_FROM_TANGENT_TEXTURE = false;\n        this.USE_GLTF_STYLE_ANISOTROPY = false;\n        this.THIN_FILM_THICKNESS_FROM_THIN_FILM_TEXTURE = false;\n        this.ENVIRONMENTBRDF = false;\n        this.ENVIRONMENTBRDF_RGBD = false;\n        this.NORMAL = false;\n        this.TANGENT = false;\n        this.OBJECTSPACE_NORMALMAP = false;\n        this.PARALLAX = false;\n        this.PARALLAX_RHS = false;\n        this.PARALLAXOCCLUSION = false;\n        this.NORMALXYSCALE = true;\n        this.ANISOTROPIC = false; // Enables anisotropic logic. Still needed because it's used in pbrHelperFunctions\n        this.ANISOTROPIC_OPENPBR = true; // Tells the shader to use OpenPBR's anisotropic roughness remapping\n        this.ANISOTROPIC_BASE = false; // Tells the shader to apply anisotropy to the base layer\n        this.ANISOTROPIC_COAT = false; // Tells the shader to apply anisotropy to the coat layer\n        this.THIN_FILM = false; // Enables thin film layer\n        this.IRIDESCENCE = false; // Enables iridescence layer\n        this.REFLECTION = false;\n        this.REFLECTIONMAP_3D = false;\n        this.REFLECTIONMAP_SPHERICAL = false;\n        this.REFLECTIONMAP_PLANAR = false;\n        this.REFLECTIONMAP_CUBIC = false;\n        this.USE_LOCAL_REFLECTIONMAP_CUBIC = false;\n        this.REFLECTIONMAP_PROJECTION = false;\n        this.REFLECTIONMAP_SKYBOX = false;\n        this.REFLECTIONMAP_EXPLICIT = false;\n        this.REFLECTIONMAP_EQUIRECTANGULAR = false;\n        this.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\n        this.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\n        this.INVERTCUBICMAP = false;\n        this.USESPHERICALFROMREFLECTIONMAP = false;\n        this.USEIRRADIANCEMAP = false;\n        this.USE_IRRADIANCE_DOMINANT_DIRECTION = false;\n        this.USESPHERICALINVERTEX = false;\n        this.REFLECTIONMAP_OPPOSITEZ = false;\n        this.LODINREFLECTIONALPHA = false;\n        this.GAMMAREFLECTION = false;\n        this.RGBDREFLECTION = false;\n        this.RADIANCEOCCLUSION = false;\n        this.HORIZONOCCLUSION = false;\n        this.INSTANCES = false;\n        this.THIN_INSTANCES = false;\n        this.INSTANCESCOLOR = false;\n        this.PREPASS = false;\n        this.PREPASS_COLOR = false;\n        this.PREPASS_COLOR_INDEX = -1;\n        this.PREPASS_IRRADIANCE = false;\n        this.PREPASS_IRRADIANCE_INDEX = -1;\n        this.PREPASS_ALBEDO = false;\n        this.PREPASS_ALBEDO_INDEX = -1;\n        this.PREPASS_ALBEDO_SQRT = false;\n        this.PREPASS_ALBEDO_SQRT_INDEX = -1;\n        this.PREPASS_DEPTH = false;\n        this.PREPASS_DEPTH_INDEX = -1;\n        this.PREPASS_SCREENSPACE_DEPTH = false;\n        this.PREPASS_SCREENSPACE_DEPTH_INDEX = -1;\n        this.PREPASS_NORMALIZED_VIEW_DEPTH = false;\n        this.PREPASS_NORMALIZED_VIEW_DEPTH_INDEX = -1;\n        this.PREPASS_NORMAL = false;\n        this.PREPASS_NORMAL_INDEX = -1;\n        this.PREPASS_NORMAL_WORLDSPACE = false;\n        this.PREPASS_WORLD_NORMAL = false;\n        this.PREPASS_WORLD_NORMAL_INDEX = -1;\n        this.PREPASS_POSITION = false;\n        this.PREPASS_POSITION_INDEX = -1;\n        this.PREPASS_LOCAL_POSITION = false;\n        this.PREPASS_LOCAL_POSITION_INDEX = -1;\n        this.PREPASS_VELOCITY = false;\n        this.PREPASS_VELOCITY_INDEX = -1;\n        this.PREPASS_VELOCITY_LINEAR = false;\n        this.PREPASS_VELOCITY_LINEAR_INDEX = -1;\n        this.PREPASS_REFLECTIVITY = false;\n        this.PREPASS_REFLECTIVITY_INDEX = -1;\n        this.SCENE_MRT_COUNT = 0;\n        this.NUM_BONE_INFLUENCERS = 0;\n        this.BonesPerMesh = 0;\n        this.BONETEXTURE = false;\n        this.BONES_VELOCITY_ENABLED = false;\n        this.NONUNIFORMSCALING = false;\n        this.MORPHTARGETS = false;\n        this.MORPHTARGETS_POSITION = false;\n        this.MORPHTARGETS_NORMAL = false;\n        this.MORPHTARGETS_TANGENT = false;\n        this.MORPHTARGETS_UV = false;\n        this.MORPHTARGETS_UV2 = false;\n        this.MORPHTARGETS_COLOR = false;\n        this.MORPHTARGETTEXTURE_HASPOSITIONS = false;\n        this.MORPHTARGETTEXTURE_HASNORMALS = false;\n        this.MORPHTARGETTEXTURE_HASTANGENTS = false;\n        this.MORPHTARGETTEXTURE_HASUVS = false;\n        this.MORPHTARGETTEXTURE_HASUV2S = false;\n        this.MORPHTARGETTEXTURE_HASCOLORS = false;\n        this.NUM_MORPH_INFLUENCERS = 0;\n        this.MORPHTARGETS_TEXTURE = false;\n        this.USEPHYSICALLIGHTFALLOFF = false;\n        this.USEGLTFLIGHTFALLOFF = false;\n        this.TWOSIDEDLIGHTING = false;\n        this.MIRRORED = false;\n        this.SHADOWFLOAT = false;\n        this.CLIPPLANE = false;\n        this.CLIPPLANE2 = false;\n        this.CLIPPLANE3 = false;\n        this.CLIPPLANE4 = false;\n        this.CLIPPLANE5 = false;\n        this.CLIPPLANE6 = false;\n        this.POINTSIZE = false;\n        this.FOG = false;\n        this.LOGARITHMICDEPTH = false;\n        this.CAMERA_ORTHOGRAPHIC = false;\n        this.CAMERA_PERSPECTIVE = false;\n        this.AREALIGHTSUPPORTED = true;\n        this.FORCENORMALFORWARD = false;\n        this.SPECULARAA = false;\n        this.UNLIT = false;\n        this.DECAL_AFTER_DETAIL = false;\n        this.DEBUGMODE = 0;\n        this.CLUSTLIGHT_SLICES = 0;\n        this.CLUSTLIGHT_BATCH = 0;\n        // BRDF defines\n        this.BRDF_V_HEIGHT_CORRELATED = true;\n        this.MS_BRDF_ENERGY_CONSERVATION = true;\n        this.SPHERICAL_HARMONICS = true;\n        this.SPECULAR_GLOSSINESS_ENERGY_CONSERVATION = true;\n        this.MIX_IBL_RADIANCE_WITH_IRRADIANCE = true;\n        this.LEGACY_SPECULAR_ENERGY_CONSERVATION = false;\n        this.BASE_DIFFUSE_MODEL = Constants.MATERIAL_DIFFUSE_MODEL_E_OREN_NAYAR;\n        this.DIELECTRIC_SPECULAR_MODEL = Constants.MATERIAL_DIELECTRIC_SPECULAR_MODEL_OPENPBR;\n        this.CONDUCTOR_SPECULAR_MODEL = Constants.MATERIAL_CONDUCTOR_SPECULAR_MODEL_OPENPBR;\n        this.rebuild();\n    }\n    /**\n     * Resets the PBR Material defines.\n     */\n    reset() {\n        super.reset();\n        this.ALPHATESTVALUE = \"0.5\";\n        this.NORMALXYSCALE = true;\n    }\n}\nclass OpenPBRMaterialBase extends ImageProcessingMixin(PushMaterial) {\n}\n/**\n * A Physically based material that follows the specification of OpenPBR.\n *\n * For more information, please refer to the documentation :\n * https://academysoftwarefoundation.github.io/OpenPBR/index.html\n */\nexport class OpenPBRMaterial extends OpenPBRMaterialBase {\n    /**\n     * Defines the angle of the tangent of the material's geometry. Used only for anisotropic reflections.\n     * See OpenPBR's specs for geometry_tangent\n     */\n    get geometryTangentAngle() {\n        return Math.atan2(this.geometryTangent.y, this.geometryTangent.x);\n    }\n    set geometryTangentAngle(value) {\n        this.geometryTangent = new Vector2(Math.cos(value), Math.sin(value));\n    }\n    /**\n     * Defines the angle of the tangent of the material's coat layer.\n     */\n    get geometryCoatTangentAngle() {\n        return Math.atan2(this.geometryCoatTangent.y, this.geometryCoatTangent.x);\n    }\n    /**\n     * Defines the angle of the tangent of the material's coat layer.\n     */\n    set geometryCoatTangentAngle(value) {\n        this.geometryCoatTangent = new Vector2(Math.cos(value), Math.sin(value));\n    }\n    /**\n     * BJS is using an hardcoded light falloff based on a manually sets up range.\n     * In PBR, one way to represents the falloff is to use the inverse squared root algorithm.\n     * This parameter can help you switch back to the BJS mode in order to create scenes using both materials.\n     */\n    get usePhysicalLightFalloff() {\n        return this._lightFalloff === Material.LIGHTFALLOFF_PHYSICAL;\n    }\n    /**\n     * BJS is using an hardcoded light falloff based on a manually sets up range.\n     * In PBR, one way to represents the falloff is to use the inverse squared root algorithm.\n     * This parameter can help you switch back to the BJS mode in order to create scenes using both materials.\n     */\n    set usePhysicalLightFalloff(value) {\n        if (value !== this.usePhysicalLightFalloff) {\n            // Ensure the effect will be rebuilt.\n            this._markAllSubMeshesAsTexturesDirty();\n            if (value) {\n                this._lightFalloff = Material.LIGHTFALLOFF_PHYSICAL;\n            }\n            else {\n                this._lightFalloff = Material.LIGHTFALLOFF_STANDARD;\n            }\n        }\n    }\n    /**\n     * In order to support the falloff compatibility with gltf, a special mode has been added\n     * to reproduce the gltf light falloff.\n     */\n    get useGLTFLightFalloff() {\n        return this._lightFalloff === Material.LIGHTFALLOFF_GLTF;\n    }\n    /**\n     * In order to support the falloff compatibility with gltf, a special mode has been added\n     * to reproduce the gltf light falloff.\n     */\n    set useGLTFLightFalloff(value) {\n        if (value !== this.useGLTFLightFalloff) {\n            // Ensure the effect will be rebuilt.\n            this._markAllSubMeshesAsTexturesDirty();\n            if (value) {\n                this._lightFalloff = Material.LIGHTFALLOFF_GLTF;\n            }\n            else {\n                this._lightFalloff = Material.LIGHTFALLOFF_STANDARD;\n            }\n        }\n    }\n    /**\n     * Enables realtime filtering on the texture.\n     */\n    get realTimeFiltering() {\n        return this._realTimeFiltering;\n    }\n    set realTimeFiltering(b) {\n        this._realTimeFiltering = b;\n        this.markAsDirty(Constants.MATERIAL_TextureDirtyFlag);\n    }\n    /**\n     * Quality switch for realtime filtering\n     */\n    get realTimeFilteringQuality() {\n        return this._realTimeFilteringQuality;\n    }\n    set realTimeFilteringQuality(n) {\n        this._realTimeFilteringQuality = n;\n        this.markAsDirty(Constants.MATERIAL_TextureDirtyFlag);\n    }\n    /**\n     * Can this material render to several textures at once\n     */\n    get canRenderToMRT() {\n        return true;\n    }\n    /**\n     * Instantiates a new OpenPBRMaterial instance.\n     *\n     * @param name The material name\n     * @param scene The scene the material will be use in.\n     * @param forceGLSL Use the GLSL code generation for the shader (even on WebGPU). Default is false\n     */\n    constructor(name, scene, forceGLSL = false) {\n        super(name, scene, undefined, forceGLSL || OpenPBRMaterial.ForceGLSL);\n        this._baseWeight = new Property(\"base_weight\", 1, \"vBaseWeight\", 1);\n        this._baseWeightTexture = new Sampler(\"base_weight\", \"baseWeight\", \"BASE_WEIGHT\");\n        this._baseColor = new Property(\"base_color\", Color3.White(), \"vBaseColor\", 4);\n        this._baseColorTexture = new Sampler(\"base_color\", \"baseColor\", \"BASE_COLOR\");\n        this._baseDiffuseRoughness = new Property(\"base_diffuse_roughness\", 0, \"vBaseDiffuseRoughness\", 1);\n        this._baseDiffuseRoughnessTexture = new Sampler(\"base_diffuse_roughness\", \"baseDiffuseRoughness\", \"BASE_DIFFUSE_ROUGHNESS\");\n        this._baseMetalness = new Property(\"base_metalness\", 0, \"vReflectanceInfo\", 4, 0);\n        this._baseMetalnessTexture = new Sampler(\"base_metalness\", \"baseMetalness\", \"BASE_METALNESS\");\n        this._specularWeight = new Property(\"specular_weight\", 1, \"vReflectanceInfo\", 4, 3);\n        this._specularWeightTexture = new Sampler(\"specular_weight\", \"specularWeight\", \"SPECULAR_WEIGHT\");\n        this._specularColor = new Property(\"specular_color\", Color3.White(), \"vSpecularColor\", 4);\n        this._specularColorTexture = new Sampler(\"specular_color\", \"specularColor\", \"SPECULAR_COLOR\");\n        this._specularRoughness = new Property(\"specular_roughness\", 0.3, \"vReflectanceInfo\", 4, 1);\n        this._specularRoughnessTexture = new Sampler(\"specular_roughness\", \"specularRoughness\", \"SPECULAR_ROUGHNESS\");\n        this._specularRoughnessAnisotropy = new Property(\"specular_roughness_anisotropy\", 0, \"vSpecularAnisotropy\", 3, 2);\n        this._specularRoughnessAnisotropyTexture = new Sampler(\"specular_roughness_anisotropy\", \"specularRoughnessAnisotropy\", \"SPECULAR_ROUGHNESS_ANISOTROPY\");\n        this._specularIor = new Property(\"specular_ior\", 1.5, \"vReflectanceInfo\", 4, 2);\n        this._coatWeight = new Property(\"coat_weight\", 0.0, \"vCoatWeight\", 1, 0);\n        this._coatWeightTexture = new Sampler(\"coat_weight\", \"coatWeight\", \"COAT_WEIGHT\");\n        this._coatColor = new Property(\"coat_color\", Color3.White(), \"vCoatColor\", 3, 0);\n        this._coatColorTexture = new Sampler(\"coat_color\", \"coatColor\", \"COAT_COLOR\");\n        this._coatRoughness = new Property(\"coat_roughness\", 0.0, \"vCoatRoughness\", 1, 0);\n        this._coatRoughnessTexture = new Sampler(\"coat_roughness\", \"coatRoughness\", \"COAT_ROUGHNESS\");\n        this._coatRoughnessAnisotropy = new Property(\"coat_roughness_anisotropy\", 0, \"vCoatRoughnessAnisotropy\", 1);\n        this._coatRoughnessAnisotropyTexture = new Sampler(\"coat_roughness_anisotropy\", \"coatRoughnessAnisotropy\", \"COAT_ROUGHNESS_ANISOTROPY\");\n        this._coatIor = new Property(\"coat_ior\", 1.5, \"vCoatIor\", 1, 0);\n        this._coatDarkening = new Property(\"coat_darkening\", 1.0, \"vCoatDarkening\", 1, 0);\n        this._coatDarkeningTexture = new Sampler(\"coat_darkening\", \"coatDarkening\", \"COAT_DARKENING\");\n        /**\n         * Specifies whether the coat roughness is taken from the\n         * same texture as the coat_weight.\n         */\n        this.useCoatRoughnessFromWeightTexture = false;\n        this._geometryNormalTexture = new Sampler(\"geometry_normal\", \"geometryNormal\", \"GEOMETRY_NORMAL\");\n        this._geometryTangent = new Property(\"geometry_tangent\", new Vector2(1, 0), \"vSpecularAnisotropy\", 3, 0);\n        this._geometryTangentTexture = new Sampler(\"geometry_tangent\", \"geometryTangent\", \"GEOMETRY_TANGENT\");\n        this._geometryCoatNormalTexture = new Sampler(\"geometry_coat_normal\", \"geometryCoatNormal\", \"GEOMETRY_COAT_NORMAL\");\n        this._geometryCoatTangent = new Property(\"geometry_coat_tangent\", new Vector2(1, 0), \"vGeometryCoatTangent\", 2, 0);\n        this._geometryCoatTangentTexture = new Sampler(\"geometry_coat_tangent\", \"geometryCoatTangent\", \"GEOMETRY_COAT_TANGENT\");\n        this._geometryOpacity = new Property(\"geometry_opacity\", 1.0, \"vBaseColor\", 4, 3);\n        this._geometryOpacityTexture = new Sampler(\"geometry_opacity\", \"geometryOpacity\", \"GEOMETRY_OPACITY\");\n        this._emissionLuminance = new Property(\"emission_luminance\", 1.0, \"vLightingIntensity\", 4, 1);\n        this._emissionColor = new Property(\"emission_color\", Color3.Black(), \"vEmissionColor\", 3);\n        this._emissionColorTexture = new Sampler(\"emission_color\", \"emissionColor\", \"EMISSION_COLOR\");\n        this._thinFilmWeight = new Property(\"thin_film_weight\", 0.0, \"vThinFilmWeight\", 1, 0);\n        this._thinFilmWeightTexture = new Sampler(\"thin_film_weight\", \"thinFilmWeight\", \"THIN_FILM_WEIGHT\");\n        this._thinFilmThickness = new Property(\"thin_film_thickness\", 0.5, \"vThinFilmThickness\", 2, 0);\n        this._thinFilmThicknessMin = new Property(\"thin_film_thickness_min\", 0.0, \"vThinFilmThickness\", 2, 1);\n        this._thinFilmThicknessTexture = new Sampler(\"thin_film_thickness\", \"thinFilmThickness\", \"THIN_FILM_THICKNESS\");\n        this._thinFilmIor = new Property(\"thin_film_ior\", 1.4, \"vThinFilmIor\", 1, 0);\n        this._ambientOcclusionTexture = new Sampler(\"ambient_occlusion\", \"ambientOcclusion\", \"AMBIENT_OCCLUSION\");\n        this._uniformsList = {};\n        this._samplersList = {};\n        this._samplerDefines = {};\n        /**\n         * Intensity of the direct lights e.g. the four lights available in your scene.\n         * This impacts both the direct diffuse and specular highlights.\n         */\n        this.directIntensity = 1.0;\n        /**\n         * Intensity of the environment e.g. how much the environment will light the object\n         * either through harmonics for rough material or through the reflection for shiny ones.\n         */\n        this.environmentIntensity = 1.0;\n        /**\n         * Specifies that the specular weight is stored in the alpha channel of the specular weight texture.\n         */\n        this.useSpecularWeightFromTextureAlpha = false;\n        /**\n         * Enforces alpha test in opaque or blend mode in order to improve the performances of some situations.\n         */\n        this.forceAlphaTest = false;\n        /**\n         * Defines the alpha limits in alpha test mode.\n         */\n        this.alphaCutOff = 0.4;\n        /**\n         * Specifies if the metallic texture contains the ambient occlusion information in its red channel.\n         */\n        this.useAmbientOcclusionFromMetallicTextureRed = false;\n        /**\n         * Specifies if the ambient texture contains the ambient occlusion information in its red channel only.\n         */\n        this.useAmbientInGrayScale = false;\n        /**\n         * Allows using an object space normal map (instead of tangent space).\n         */\n        this.useObjectSpaceNormalMap = false;\n        /**\n         * Allows using the normal map in parallax mode.\n         */\n        this.useParallax = false;\n        /**\n         * Allows using the normal map in parallax occlusion mode.\n         */\n        this.useParallaxOcclusion = false;\n        /**\n         * Controls the scale bias of the parallax mode.\n         */\n        this.parallaxScaleBias = 0.05;\n        /**\n         * If sets to true, disables all the lights affecting the material.\n         */\n        this.disableLighting = false;\n        /**\n         * Force the shader to compute irradiance in the fragment shader in order to take normal mapping into account.\n         */\n        this.forceIrradianceInFragment = false;\n        /**\n         * Number of Simultaneous lights allowed on the material.\n         */\n        this.maxSimultaneousLights = 4;\n        /**\n         * If sets to true, x component of normal map value will invert (x = 1.0 - x).\n         */\n        this.invertNormalMapX = false;\n        /**\n         * If sets to true, y component of normal map value will invert (y = 1.0 - y).\n         */\n        this.invertNormalMapY = false;\n        /**\n         * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\n         */\n        this.twoSidedLighting = false;\n        /**\n         * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\n         * And/Or occlude the blended part. (alpha is converted to gamma to compute the fresnel)\n         */\n        this.useAlphaFresnel = false;\n        /**\n         * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\n         * And/Or occlude the blended part. (alpha stays linear to compute the fresnel)\n         */\n        this.useLinearAlphaFresnel = false;\n        /**\n         * Let user defines the brdf lookup texture used for IBL.\n         * A default 8bit version is embedded but you could point at :\n         * * Default texture: https://assets.babylonjs.com/environments/correlatedMSBRDF_RGBD.png\n         * * Default 16bit pixel depth texture: https://assets.babylonjs.com/environments/correlatedMSBRDF.dds\n         * * LEGACY Default None correlated https://assets.babylonjs.com/environments/uncorrelatedBRDF_RGBD.png\n         * * LEGACY Default None correlated 16bit pixel depth https://assets.babylonjs.com/environments/uncorrelatedBRDF.dds\n         */\n        this.environmentBRDFTexture = null;\n        /**\n         * Force normal to face away from face.\n         */\n        this.forceNormalForward = false;\n        /**\n         * Enables specular anti aliasing in the PBR shader.\n         * It will both interacts on the Geometry for analytical and IBL lighting.\n         * It also prefilter the roughness map based on the normalmap values.\n         */\n        this.enableSpecularAntiAliasing = false;\n        /**\n         * This parameters will enable/disable Horizon occlusion to prevent normal maps to look shiny when the normal\n         * makes the reflect vector face the model (under horizon).\n         */\n        this.useHorizonOcclusion = true;\n        /**\n         * This parameters will enable/disable radiance occlusion by preventing the radiance to lit\n         * too much the area relying on ambient texture to define their ambient occlusion.\n         */\n        this.useRadianceOcclusion = true;\n        /**\n         * If set to true, no lighting calculations will be applied.\n         */\n        this.unlit = false;\n        /**\n         * If sets to true, the decal map will be applied after the detail map. Else, it is applied before (default: false)\n         */\n        this.applyDecalMapAfterDetailMap = false;\n        /**\n         * This stores the direct, emissive, environment, and specular light intensities into a Vector4.\n         */\n        this._lightingInfos = new Vector4(this.directIntensity, 1.0, this.environmentIntensity, 1.0);\n        /**\n         * Stores the radiance (and, possibly, irradiance) values in a texture.\n         * @internal\n         */\n        this._radianceTexture = null;\n        /**\n         * Specifies that the specular weight will be read from the alpha channel.\n         * This is for compatibility with glTF's KHR_materials_specular extension.\n         * @internal\n         */\n        this._useSpecularWeightFromAlpha = false;\n        /**\n         * Specifies that the specular weight will be read from the alpha channel of the specular color texture.\n         * This is for compatibility with glTF's KHR_materials_specular extension.\n         * @internal\n         */\n        this._useSpecularWeightFromSpecularColorTexture = false;\n        /**\n         * Specifies if the material uses anisotropy weight read from the geometry tangent texture's blue channel.\n         * This is for compatibility with glTF's anisotropy extension.\n         * @internal\n         */\n        this._useSpecularRoughnessAnisotropyFromTangentTexture = false;\n        /**\n         * Specifies if the material uses coat anisotropy weight read from the coat's geometry tangent texture's blue channel.\n         * This is for compatibility with glTF's clearcoat_anisotropy extension.\n         * @internal\n         */\n        this._useCoatRoughnessAnisotropyFromTangentTexture = false;\n        /**\n         * Assume the anisotropy data is stored in the format specified by\n         * KHR_materials_anisotropy.\n         * @internal\n         */\n        this._useGltfStyleAnisotropy = false;\n        /**\n         * This parameters will enable/disable Horizon occlusion to prevent normal maps to look shiny when the normal\n         * makes the reflect vector face the model (under horizon).\n         * @internal\n         */\n        this._useHorizonOcclusion = true;\n        /**\n         * This parameters will enable/disable radiance occlusion by preventing the radiance to lit\n         * too much the area relying on ambient texture to define their ambient occlusion.\n         * @internal\n         */\n        this._useRadianceOcclusion = true;\n        /**\n         * Specifies that the alpha is coming from the base color texture's alpha channel.\n         * This is for compatibility with glTF.\n         * @internal\n         */\n        this._useAlphaFromBaseColorTexture = false;\n        /**\n         * Specifies if the metallic texture contains the ambient occlusion information in its red channel.\n         * This is for compatibility with glTF.\n         * @internal\n         */\n        this._useAmbientOcclusionFromMetallicTextureRed = false;\n        /**\n         * Specifies if the metallic texture contains the roughness information in its green channel.\n         * This is for compatibility with glTF.\n         * @internal\n         */\n        this._useRoughnessFromMetallicTextureGreen = false;\n        /**\n         * Specifies if the metallic texture contains the metallic information in its blue channel.\n         * This is for compatibility with glTF.\n         * @internal\n         */\n        this._useMetallicFromMetallicTextureBlue = false;\n        /**\n         * Specifies if the thin film thickness is stored in the green channel of the thin film thickness texture.\n         */\n        this._useThinFilmThicknessFromTextureGreen = false;\n        /**\n         * Defines the  falloff type used in this material.\n         * It by default is Physical.\n         * @internal\n         */\n        this._lightFalloff = Material.LIGHTFALLOFF_PHYSICAL;\n        /**\n         * Allows using an object space normal map (instead of tangent space).\n         * @internal\n         */\n        this._useObjectSpaceNormalMap = false;\n        /**\n         * Allows using the normal map in parallax mode.\n         * @internal\n         */\n        this._useParallax = false;\n        /**\n         * Allows using the normal map in parallax occlusion mode.\n         * @internal\n         */\n        this._useParallaxOcclusion = false;\n        /**\n         * Controls the scale bias of the parallax mode.\n         * @internal\n         */\n        this._parallaxScaleBias = 0.05;\n        /**\n         * If sets to true, disables all the lights affecting the material.\n         * @internal\n         */\n        this._disableLighting = false;\n        /**\n         * Number of Simultaneous lights allowed on the material.\n         * @internal\n         */\n        this._maxSimultaneousLights = 4;\n        /**\n         * If sets to true, x component of normal map value will be inverted (x = 1.0 - x).\n         * @internal\n         */\n        this._invertNormalMapX = false;\n        /**\n         * If sets to true, y component of normal map value will be inverted (y = 1.0 - y).\n         * @internal\n         */\n        this._invertNormalMapY = false;\n        /**\n         * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\n         * @internal\n         */\n        this._twoSidedLighting = false;\n        /**\n         * Defines the alpha limits in alpha test mode.\n         * @internal\n         */\n        this._alphaCutOff = 0.4;\n        /**\n         * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\n         * And/Or occlude the blended part. (alpha is converted to gamma to compute the fresnel)\n         * @internal\n         */\n        this._useAlphaFresnel = false;\n        /**\n         * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\n         * And/Or occlude the blended part. (alpha stays linear to compute the fresnel)\n         * @internal\n         */\n        this._useLinearAlphaFresnel = false;\n        /**\n         * Specifies the environment BRDF texture used to compute the scale and offset roughness values\n         * from cos theta and roughness:\n         * http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\n         * @internal\n         */\n        this._environmentBRDFTexture = null;\n        /**\n         * Force the shader to compute irradiance in the fragment shader in order to take normal mapping into account.\n         * @internal\n         */\n        this._forceIrradianceInFragment = false;\n        this._realTimeFiltering = false;\n        this._realTimeFilteringQuality = Constants.TEXTURE_FILTERING_QUALITY_LOW;\n        /**\n         * Force normal to face away from face.\n         * @internal\n         */\n        this._forceNormalForward = false;\n        /**\n         * Enables specular anti aliasing in the PBR shader.\n         * It will both interacts on the Geometry for analytical and IBL lighting.\n         * It also prefilter the roughness map based on the normalmap values.\n         * @internal\n         */\n        this._enableSpecularAntiAliasing = false;\n        /**\n         * Stores the available render targets.\n         */\n        this._renderTargets = new SmartArray(16);\n        /**\n         * If set to true, no lighting calculations will be applied.\n         */\n        this._unlit = false;\n        /**\n         * If sets to true, the decal map will be applied after the detail map. Else, it is applied before (default: false)\n         */\n        this._applyDecalMapAfterDetailMap = false;\n        this._debugMode = 0;\n        this._shadersLoaded = false;\n        this._breakShaderLoadedCheck = false;\n        /**\n         * @internal\n         * This is reserved for the inspector.\n         * Defines the material debug mode.\n         * It helps seeing only some components of the material while troubleshooting.\n         */\n        this.debugMode = 0;\n        /**\n         * @internal\n         * This is reserved for the inspector.\n         * Specify from where on screen the debug mode should start.\n         * The value goes from -1 (full screen) to 1 (not visible)\n         * It helps with side by side comparison against the final render\n         * This defaults to -1\n         */\n        this.debugLimit = -1;\n        /**\n         * @internal\n         * This is reserved for the inspector.\n         * As the default viewing range might not be enough (if the ambient is really small for instance)\n         * You can use the factor to better multiply the final value.\n         */\n        this.debugFactor = 1;\n        this._cacheHasRenderTargetTextures = false;\n        this._transparencyMode = Material.MATERIAL_OPAQUE;\n        // TODO: Check if we're running WebGL 2.0 or above\n        if (this.getScene() && !this.getScene()?.getEngine().isWebGPU && this.getScene().getEngine().webGLVersion < 2) {\n            Logger.Error(\"OpenPBRMaterial: WebGL 2.0 or above is required for this material.\");\n        }\n        if (!OpenPBRMaterial._noiseTextures[this.getScene().uniqueId]) {\n            OpenPBRMaterial._noiseTextures[this.getScene().uniqueId] = new Texture(\"https://assets.babylonjs.com/textures/blue_noise/blue_noise_rgb.png\", this.getScene(), false, true, Constants.TEXTURE_NEAREST_SAMPLINGMODE);\n            this.getScene().onDisposeObservable.addOnce(() => {\n                OpenPBRMaterial._noiseTextures[this.getScene().uniqueId]?.dispose();\n                delete OpenPBRMaterial._noiseTextures[this.getScene().uniqueId];\n            });\n        }\n        // Setup the default processing configuration to the scene.\n        this._attachImageProcessingConfiguration(null);\n        this.getRenderTargetTextures = () => {\n            this._renderTargets.reset();\n            if (MaterialFlags.ReflectionTextureEnabled && this._radianceTexture && this._radianceTexture.isRenderTarget) {\n                this._renderTargets.push(this._radianceTexture);\n            }\n            this._eventInfo.renderTargets = this._renderTargets;\n            this._callbackPluginEventFillRenderTargetTextures(this._eventInfo);\n            return this._renderTargets;\n        };\n        this._environmentBRDFTexture = GetEnvironmentBRDFTexture(this.getScene());\n        this.prePassConfiguration = new PrePassConfiguration();\n        // Build the internal property list that can be used to generate and update the uniform buffer\n        this._propertyList = {};\n        for (const key of Object.getOwnPropertyNames(this)) {\n            const value = this[key];\n            if (value instanceof Property) {\n                this._propertyList[key] = value;\n            }\n        }\n        // Build the internal uniforms list that is used for combining and updating\n        // property values in the uniform buffer\n        const propertyKeys = Object.keys(this._propertyList);\n        propertyKeys.forEach((key) => {\n            const prop = this._propertyList[key];\n            let uniform = this._uniformsList[prop.targetUniformName];\n            if (!uniform) {\n                uniform = new Uniform(prop.targetUniformName, prop.targetUniformComponentNum);\n                this._uniformsList[prop.targetUniformName] = uniform;\n            }\n            else if (uniform.numComponents !== prop.targetUniformComponentNum) {\n                Logger.Error(`Uniform ${prop.targetUniformName} already exists of size ${uniform.numComponents}, but trying to set it to ${prop.targetUniformComponentNum}.`);\n            }\n            uniform.linkedProperties[prop.name] = prop;\n        });\n        // Build the internal list of samplers\n        this._samplersList = {};\n        for (const key of Object.getOwnPropertyNames(this)) {\n            const value = this[key];\n            if (value instanceof Sampler) {\n                this._samplersList[key] = value;\n            }\n        }\n        // For each sampler in _samplersList, add defines to be added to OpenPBRMaterialDefines\n        for (const samplerKey in this._samplersList) {\n            const sampler = this._samplersList[samplerKey];\n            const defineName = sampler.textureDefine;\n            this._samplerDefines[defineName] = { type: \"boolean\", default: false };\n            this._samplerDefines[defineName + \"DIRECTUV\"] = { type: \"number\", default: 0 };\n            this._samplerDefines[defineName + \"_GAMMA\"] = { type: \"boolean\", default: false };\n        }\n        // Arg. Why do I have to add these references to get rid of the linting errors?\n        this._baseWeight;\n        this._baseWeightTexture;\n        this._baseColor;\n        this._baseColorTexture;\n        this._baseDiffuseRoughness;\n        this._baseDiffuseRoughnessTexture;\n        this._baseMetalness;\n        this._baseMetalnessTexture;\n        this._specularWeight;\n        this._specularWeightTexture;\n        this._specularColor;\n        this._specularColorTexture;\n        this._specularRoughness;\n        this._specularIor;\n        this._specularRoughnessTexture;\n        this._specularRoughnessAnisotropy;\n        this._specularRoughnessAnisotropyTexture;\n        this._coatWeight;\n        this._coatWeightTexture;\n        this._coatColor;\n        this._coatColorTexture;\n        this._coatRoughness;\n        this._coatRoughnessTexture;\n        this._coatRoughnessAnisotropy;\n        this._coatRoughnessAnisotropyTexture;\n        this._coatIor;\n        this._coatDarkening;\n        this._coatDarkeningTexture;\n        this._geometryNormalTexture;\n        this._geometryTangent;\n        this._geometryTangentTexture;\n        this._geometryCoatNormalTexture;\n        this._geometryCoatTangent;\n        this._geometryCoatTangentTexture;\n        this._geometryOpacity;\n        this._geometryOpacityTexture;\n        this._thinFilmWeight;\n        this._thinFilmWeightTexture;\n        this._thinFilmThickness;\n        this._thinFilmThicknessMin;\n        this._thinFilmThicknessTexture;\n        this._thinFilmIor;\n        this._emissionLuminance;\n        this._emissionColor;\n        this._emissionColorTexture;\n        this._ambientOcclusionTexture;\n    }\n    /**\n     * Gets a boolean indicating that current material needs to register RTT\n     */\n    get hasRenderTargetTextures() {\n        if (MaterialFlags.ReflectionTextureEnabled && this._radianceTexture && this._radianceTexture.isRenderTarget) {\n            return true;\n        }\n        return this._cacheHasRenderTargetTextures;\n    }\n    /**\n     * Can this material render to prepass\n     */\n    get isPrePassCapable() {\n        return !this.disableDepthWrite;\n    }\n    /**\n     * @returns the name of the material class.\n     */\n    getClassName() {\n        return \"OpenPBRMaterial\";\n    }\n    get transparencyMode() {\n        return this._transparencyMode;\n    }\n    set transparencyMode(value) {\n        if (this._transparencyMode === value) {\n            return;\n        }\n        this._transparencyMode = value;\n        this._markAllSubMeshesAsTexturesAndMiscDirty();\n    }\n    /**\n     * @returns whether or not the alpha value of the albedo texture should be used for alpha blending.\n     */\n    _shouldUseAlphaFromBaseColorTexture() {\n        return this._hasAlphaChannel() && this._transparencyMode !== Material.MATERIAL_OPAQUE && !this.geometryOpacityTexture;\n    }\n    /**\n     * @returns whether or not there is a usable alpha channel for transparency.\n     */\n    _hasAlphaChannel() {\n        return (this.baseColorTexture != null && this.baseColorTexture.hasAlpha && this._useAlphaFromBaseColorTexture) || this.geometryOpacityTexture != null;\n    }\n    /**\n     * Makes a duplicate of the current material.\n     * @param name - name to use for the new material.\n     * @param cloneTexturesOnlyOnce - if a texture is used in more than one channel (e.g baseColor and opacity), only clone it once and reuse it on the other channels. Default false.\n     * @param rootUrl defines the root URL to use to load textures\n     * @returns cloned material instance\n     */\n    clone(name, cloneTexturesOnlyOnce = true, rootUrl = \"\") {\n        const clone = SerializationHelper.Clone(() => new OpenPBRMaterial(name, this.getScene()), this, { cloneTexturesOnlyOnce });\n        clone.id = name;\n        clone.name = name;\n        this.stencil.copyTo(clone.stencil);\n        this._clonePlugins(clone, rootUrl);\n        return clone;\n    }\n    /**\n     * Serializes this PBR Material.\n     * @returns - An object with the serialized material.\n     */\n    serialize() {\n        const serializationObject = super.serialize();\n        serializationObject.customType = \"BABYLON.OpenPBRMaterial\";\n        return serializationObject;\n    }\n    // Statics\n    /**\n     * Parses a PBR Material from a serialized object.\n     * @param source - Serialized object.\n     * @param scene - BJS scene instance.\n     * @param rootUrl - url for the scene object\n     * @returns - OpenPBRMaterial\n     */\n    static Parse(source, scene, rootUrl) {\n        const material = SerializationHelper.Parse(() => new OpenPBRMaterial(source.name, scene), source, scene, rootUrl);\n        if (source.stencil) {\n            material.stencil.parse(source.stencil, scene, rootUrl);\n        }\n        Material._ParsePlugins(source, material, scene, rootUrl);\n        return material;\n    }\n    /**\n     * Force shader compilation\n     * @param mesh - Define the mesh we want to force the compilation for\n     * @param onCompiled - Define a callback triggered when the compilation completes\n     * @param options - Define the options used to create the compilation\n     */\n    forceCompilation(mesh, onCompiled, options) {\n        const localOptions = {\n            clipPlane: false,\n            useInstances: false,\n            ...options,\n        };\n        if (!this._uniformBufferLayoutBuilt) {\n            this.buildUniformLayout();\n        }\n        this._callbackPluginEventGeneric(4 /* MaterialPluginEvent.GetDefineNames */, this._eventInfo);\n        const checkReady = () => {\n            if (this._breakShaderLoadedCheck) {\n                return;\n            }\n            const defines = new OpenPBRMaterialDefines({\n                ...(this._eventInfo.defineNames || {}),\n                ...(this._samplerDefines || {}),\n            });\n            const effect = this._prepareEffect(mesh, mesh, defines, undefined, undefined, localOptions.useInstances, localOptions.clipPlane);\n            if (this._onEffectCreatedObservable) {\n                onCreatedEffectParameters.effect = effect;\n                onCreatedEffectParameters.subMesh = null;\n                this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\n            }\n            if (effect.isReady()) {\n                if (onCompiled) {\n                    onCompiled(this);\n                }\n            }\n            else {\n                effect.onCompileObservable.add(() => {\n                    if (onCompiled) {\n                        onCompiled(this);\n                    }\n                });\n            }\n        };\n        checkReady();\n    }\n    /**\n     * Specifies that the submesh is ready to be used.\n     * @param mesh - BJS mesh.\n     * @param subMesh - A submesh of the BJS mesh.  Used to check if it is ready.\n     * @param useInstances - Specifies that instances should be used.\n     * @returns - boolean indicating that the submesh is ready or not.\n     */\n    isReadyForSubMesh(mesh, subMesh, useInstances) {\n        if (!this._uniformBufferLayoutBuilt) {\n            this.buildUniformLayout();\n        }\n        const drawWrapper = subMesh._drawWrapper;\n        if (drawWrapper.effect && this.isFrozen) {\n            if (drawWrapper._wasPreviouslyReady && drawWrapper._wasPreviouslyUsingInstances === useInstances) {\n                return true;\n            }\n        }\n        if (!subMesh.materialDefines) {\n            this._callbackPluginEventGeneric(4 /* MaterialPluginEvent.GetDefineNames */, this._eventInfo);\n            subMesh.materialDefines = new OpenPBRMaterialDefines({\n                ...(this._eventInfo.defineNames || {}),\n                ...(this._samplerDefines || {}),\n            });\n        }\n        const defines = subMesh.materialDefines;\n        if (this._isReadyForSubMesh(subMesh)) {\n            return true;\n        }\n        const scene = this.getScene();\n        const engine = scene.getEngine();\n        if (defines._areTexturesDirty) {\n            this._eventInfo.hasRenderTargetTextures = false;\n            this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);\n            this._cacheHasRenderTargetTextures = this._eventInfo.hasRenderTargetTextures;\n            if (scene.texturesEnabled) {\n                // Loop through samplers, check MaterialFlag and whether the texture is ready or not.\n                for (const key in this._samplersList) {\n                    const sampler = this._samplersList[key];\n                    if (sampler.value) {\n                        if (!sampler.value.isReadyOrNotBlocking()) {\n                            return false;\n                        }\n                    }\n                }\n                const radianceTexture = this._getRadianceTexture();\n                if (radianceTexture && MaterialFlags.ReflectionTextureEnabled) {\n                    if (!radianceTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    if (radianceTexture.irradianceTexture) {\n                        if (!radianceTexture.irradianceTexture.isReadyOrNotBlocking()) {\n                            return false;\n                        }\n                    }\n                    else {\n                        // Not ready until spherical are ready too.\n                        if (!radianceTexture.sphericalPolynomial && radianceTexture.getInternalTexture()?._sphericalPolynomialPromise) {\n                            return false;\n                        }\n                    }\n                }\n                if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\n                    // This is blocking.\n                    if (!this._environmentBRDFTexture.isReady()) {\n                        return false;\n                    }\n                }\n                if (OpenPBRMaterial._noiseTextures[scene.uniqueId]) {\n                    if (!OpenPBRMaterial._noiseTextures[scene.uniqueId].isReady()) {\n                        return false;\n                    }\n                }\n            }\n        }\n        this._eventInfo.isReadyForSubMesh = true;\n        this._eventInfo.defines = defines;\n        this._eventInfo.subMesh = subMesh;\n        this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);\n        if (!this._eventInfo.isReadyForSubMesh) {\n            return false;\n        }\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\n            if (!this._imageProcessingConfiguration.isReady()) {\n                return false;\n            }\n        }\n        // Check if Area Lights have LTC texture.\n        if (defines[\"AREALIGHTUSED\"]) {\n            for (let index = 0; index < mesh.lightSources.length; index++) {\n                if (!mesh.lightSources[index]._isReady()) {\n                    return false;\n                }\n            }\n        }\n        if (!engine.getCaps().standardDerivatives && !mesh.isVerticesDataPresent(VertexBuffer.NormalKind)) {\n            mesh.createNormals(true);\n            Logger.Warn(\"OpenPBRMaterial: Normals have been created for the mesh: \" + mesh.name);\n        }\n        const previousEffect = subMesh.effect;\n        const lightDisposed = defines._areLightsDisposed;\n        let effect = this._prepareEffect(mesh, subMesh.getRenderingMesh(), defines, this.onCompiled, this.onError, useInstances, null);\n        let forceWasNotReadyPreviously = false;\n        if (effect) {\n            if (this._onEffectCreatedObservable) {\n                onCreatedEffectParameters.effect = effect;\n                onCreatedEffectParameters.subMesh = subMesh;\n                this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\n            }\n            // Use previous effect while new one is compiling\n            if (this.allowShaderHotSwapping && previousEffect && !effect.isReady()) {\n                effect = previousEffect;\n                defines.markAsUnprocessed();\n                forceWasNotReadyPreviously = this.isFrozen;\n                if (lightDisposed) {\n                    // re register in case it takes more than one frame.\n                    defines._areLightsDisposed = true;\n                    return false;\n                }\n            }\n            else {\n                scene.resetCachedMaterial();\n                subMesh.setEffect(effect, defines, this._materialContext);\n            }\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n        defines._renderId = scene.getRenderId();\n        drawWrapper._wasPreviouslyReady = forceWasNotReadyPreviously ? false : true;\n        drawWrapper._wasPreviouslyUsingInstances = !!useInstances;\n        this._checkScenePerformancePriority();\n        return true;\n    }\n    /**\n     * Initializes the uniform buffer layout for the shader.\n     */\n    buildUniformLayout() {\n        // Order is important !\n        const ubo = this._uniformBuffer;\n        ubo.addUniform(\"vTangentSpaceParams\", 2);\n        ubo.addUniform(\"vLightingIntensity\", 4);\n        ubo.addUniform(\"pointSize\", 1);\n        ubo.addUniform(\"vDebugMode\", 2);\n        ubo.addUniform(\"cameraInfo\", 4);\n        PrepareUniformLayoutForIBL(ubo, true, true, true, true, true);\n        Object.values(this._uniformsList).forEach((uniform) => {\n            ubo.addUniform(uniform.name, uniform.numComponents);\n        });\n        Object.values(this._samplersList).forEach((sampler) => {\n            ubo.addUniform(sampler.samplerInfoName, 2);\n            ubo.addUniform(sampler.samplerMatrixName, 16);\n        });\n        super.buildUniformLayout();\n    }\n    /**\n     * Binds the submesh data.\n     * @param world - The world matrix.\n     * @param mesh - The BJS mesh.\n     * @param subMesh - A submesh of the BJS mesh.\n     */\n    bindForSubMesh(world, mesh, subMesh) {\n        const scene = this.getScene();\n        const defines = subMesh.materialDefines;\n        if (!defines) {\n            return;\n        }\n        const effect = subMesh.effect;\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n        // Matrices Mesh.\n        mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\n        mesh.transferToEffect(world);\n        const engine = scene.getEngine();\n        // Binding unconditionally\n        this._uniformBuffer.bindToEffect(effect, \"Material\");\n        this.prePassConfiguration.bindForSubMesh(this._activeEffect, scene, mesh, world, this.isFrozen);\n        MaterialHelperGeometryRendering.Bind(engine.currentRenderPassId, this._activeEffect, mesh, world, this);\n        const camera = scene.activeCamera;\n        if (camera) {\n            this._uniformBuffer.updateFloat4(\"cameraInfo\", camera.minZ, camera.maxZ, 0, 0);\n        }\n        else {\n            this._uniformBuffer.updateFloat4(\"cameraInfo\", 0, 0, 0, 0);\n        }\n        this._eventInfo.subMesh = subMesh;\n        this._callbackPluginEventHardBindForSubMesh(this._eventInfo);\n        // Normal Matrix\n        if (defines.OBJECTSPACE_NORMALMAP) {\n            world.toNormalMatrix(this._normalMatrix);\n            this.bindOnlyNormalMatrix(this._normalMatrix);\n        }\n        const mustRebind = this._mustRebind(scene, effect, subMesh, mesh.visibility);\n        // Bones\n        BindBonesParameters(mesh, this._activeEffect, this.prePassConfiguration);\n        let radianceTexture = null;\n        const ubo = this._uniformBuffer;\n        if (mustRebind) {\n            this.bindViewProjection(effect);\n            radianceTexture = this._getRadianceTexture();\n            if (!ubo.useUbo || !this.isFrozen || !ubo.isSync || subMesh._drawWrapper._forceRebindOnNextCall) {\n                // Texture uniforms\n                if (scene.texturesEnabled) {\n                    // Loop through samplers and bind info and matrix for each texture.\n                    for (const key in this._samplersList) {\n                        const sampler = this._samplersList[key];\n                        if (sampler.value) {\n                            ubo.updateFloat2(sampler.samplerInfoName, sampler.value.coordinatesIndex, sampler.value.level);\n                            BindTextureMatrix(sampler.value, ubo, sampler.samplerPrefix);\n                        }\n                    }\n                    if (this.geometryNormalTexture) {\n                        if (scene._mirroredCameraPosition) {\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? 1.0 : -1.0, this._invertNormalMapY ? 1.0 : -1.0);\n                        }\n                        else {\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? -1.0 : 1.0, this._invertNormalMapY ? -1.0 : 1.0);\n                        }\n                    }\n                    BindIBLParameters(scene, defines, ubo, Color3.White(), radianceTexture, this.realTimeFiltering, true, true, true, true, true);\n                }\n                // Point size\n                if (this.pointsCloud) {\n                    ubo.updateFloat(\"pointSize\", this.pointSize);\n                }\n                Object.values(this._uniformsList).forEach((uniform) => {\n                    // If the property actually defines a uniform, update it.\n                    if (uniform.numComponents === 4) {\n                        uniform.populateVectorFromLinkedProperties(TmpVectors.Vector4[0]);\n                        ubo.updateVector4(uniform.name, TmpVectors.Vector4[0]);\n                    }\n                    else if (uniform.numComponents === 3) {\n                        uniform.populateVectorFromLinkedProperties(TmpVectors.Vector3[0]);\n                        ubo.updateVector3(uniform.name, TmpVectors.Vector3[0]);\n                    }\n                    else if (uniform.numComponents === 2) {\n                        uniform.populateVectorFromLinkedProperties(TmpVectors.Vector2[0]);\n                        ubo.updateFloat2(uniform.name, TmpVectors.Vector2[0].x, TmpVectors.Vector2[0].y);\n                    }\n                    else if (uniform.numComponents === 1) {\n                        ubo.updateFloat(uniform.name, uniform.linkedProperties[Object.keys(uniform.linkedProperties)[0]].value);\n                    }\n                });\n                // Misc\n                this._lightingInfos.x = this.directIntensity;\n                this._lightingInfos.y = this.emissionLuminance;\n                this._lightingInfos.z = this.environmentIntensity * scene.environmentIntensity;\n                this._lightingInfos.w = 1.0; // This is used to be _specularIntensity.\n                ubo.updateVector4(\"vLightingIntensity\", this._lightingInfos);\n                ubo.updateFloat2(\"vDebugMode\", this.debugLimit, this.debugFactor);\n            }\n            // Textures\n            if (scene.texturesEnabled) {\n                // Loop through samplers and set textures\n                for (const key in this._samplersList) {\n                    const sampler = this._samplersList[key];\n                    if (sampler.value) {\n                        ubo.setTexture(sampler.samplerName, sampler.value);\n                    }\n                }\n                BindIBLSamplers(scene, defines, ubo, radianceTexture, this.realTimeFiltering);\n                if (defines.ENVIRONMENTBRDF) {\n                    ubo.setTexture(\"environmentBrdfSampler\", this._environmentBRDFTexture);\n                }\n                if (defines.ANISOTROPIC) {\n                    ubo.setTexture(\"blueNoiseSampler\", OpenPBRMaterial._noiseTextures[this.getScene().uniqueId]);\n                }\n            }\n            // OIT with depth peeling\n            if (this.getScene().useOrderIndependentTransparency && this.needAlphaBlendingForMesh(mesh)) {\n                this.getScene().depthPeelingRenderer.bind(effect);\n            }\n            this._eventInfo.subMesh = subMesh;\n            this._callbackPluginEventBindForSubMesh(this._eventInfo);\n            // Clip plane\n            BindClipPlane(this._activeEffect, this, scene);\n            this.bindEyePosition(effect);\n        }\n        else if (scene.getEngine()._features.needToAlwaysBindUniformBuffers) {\n            this._needToBindSceneUbo = true;\n        }\n        if (mustRebind || !this.isFrozen) {\n            // Lights\n            if (scene.lightsEnabled && !this._disableLighting) {\n                BindLights(scene, mesh, this._activeEffect, defines, this._maxSimultaneousLights);\n            }\n            // View\n            if ((scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) || radianceTexture || mesh.receiveShadows || defines.PREPASS) {\n                this.bindView(effect);\n            }\n            // Fog\n            BindFogParameters(scene, mesh, this._activeEffect, true);\n            // Morph targets\n            if (defines.NUM_MORPH_INFLUENCERS) {\n                BindMorphTargetParameters(mesh, this._activeEffect);\n            }\n            if (defines.BAKED_VERTEX_ANIMATION_TEXTURE) {\n                mesh.bakedVertexAnimationManager?.bind(effect, defines.INSTANCES);\n            }\n            // image processing\n            this._imageProcessingConfiguration.bind(this._activeEffect);\n            // Log. depth\n            BindLogDepth(defines, this._activeEffect, scene);\n        }\n        this._afterBind(mesh, this._activeEffect, subMesh);\n        ubo.update();\n    }\n    /**\n     * Returns the animatable textures.\n     * If material have animatable metallic texture, then reflectivity texture will not be returned, even if it has animations.\n     * @returns - Array of animatable textures.\n     */\n    getAnimatables() {\n        const results = super.getAnimatables();\n        // Loop through samplers and push animated textures to list.\n        for (const key in this._samplersList) {\n            const sampler = this._samplersList[key];\n            if (sampler.value && sampler.value.animations && sampler.value.animations.length > 0) {\n                results.push(sampler.value);\n            }\n        }\n        if (this._radianceTexture && this._radianceTexture.animations && this._radianceTexture.animations.length > 0) {\n            results.push(this._radianceTexture);\n        }\n        return results;\n    }\n    /**\n     * Returns an array of the actively used textures.\n     * @returns - Array of BaseTextures\n     */\n    getActiveTextures() {\n        const activeTextures = super.getActiveTextures();\n        // Loop through samplers and push active textures\n        for (const key in this._samplersList) {\n            const sampler = this._samplersList[key];\n            if (sampler.value) {\n                activeTextures.push(sampler.value);\n            }\n        }\n        if (this._radianceTexture) {\n            activeTextures.push(this._radianceTexture);\n        }\n        return activeTextures;\n    }\n    /**\n     * Checks to see if a texture is used in the material.\n     * @param texture - Base texture to use.\n     * @returns - Boolean specifying if a texture is used in the material.\n     */\n    hasTexture(texture) {\n        if (super.hasTexture(texture)) {\n            return true;\n        }\n        // Loop through samplers and check each texture for equality\n        for (const key in this._samplersList) {\n            const sampler = this._samplersList[key];\n            if (sampler.value === texture) {\n                return true;\n            }\n        }\n        if (this._radianceTexture === texture) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Sets the required values to the prepass renderer.\n     * It can't be sets when subsurface scattering of this material is disabled.\n     * When scene have ability to enable subsurface prepass effect, it will enable.\n     * @returns - If prepass is enabled or not.\n     */\n    setPrePassRenderer() {\n        return false;\n    }\n    /**\n     * Disposes the resources of the material.\n     * @param forceDisposeEffect - Forces the disposal of effects.\n     * @param forceDisposeTextures - Forces the disposal of all textures.\n     */\n    dispose(forceDisposeEffect, forceDisposeTextures) {\n        this._breakShaderLoadedCheck = true;\n        if (forceDisposeTextures) {\n            if (this._environmentBRDFTexture && this.getScene().environmentBRDFTexture !== this._environmentBRDFTexture) {\n                this._environmentBRDFTexture.dispose();\n            }\n            // Loop through samplers and dispose the textures\n            for (const key in this._samplersList) {\n                const sampler = this._samplersList[key];\n                sampler.value?.dispose();\n            }\n            this._radianceTexture?.dispose();\n        }\n        this._renderTargets.dispose();\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n        }\n        super.dispose(forceDisposeEffect, forceDisposeTextures);\n    }\n    /**\n     * Returns the texture used for reflections.\n     * @returns - Reflection texture if present.  Otherwise, returns the environment texture.\n     */\n    _getRadianceTexture() {\n        if (this._radianceTexture) {\n            return this._radianceTexture;\n        }\n        return this.getScene().environmentTexture;\n    }\n    _prepareEffect(mesh, renderingMesh, defines, onCompiled = null, onError = null, useInstances = null, useClipPlane = null) {\n        this._prepareDefines(mesh, renderingMesh, defines, useInstances, useClipPlane);\n        if (!defines.isDirty) {\n            return null;\n        }\n        defines.markAsProcessed();\n        const scene = this.getScene();\n        const engine = scene.getEngine();\n        // Fallbacks\n        const fallbacks = new EffectFallbacks();\n        let fallbackRank = 0;\n        if (defines.USESPHERICALINVERTEX) {\n            fallbacks.addFallback(fallbackRank++, \"USESPHERICALINVERTEX\");\n        }\n        if (defines.FOG) {\n            fallbacks.addFallback(fallbackRank, \"FOG\");\n        }\n        if (defines.SPECULARAA) {\n            fallbacks.addFallback(fallbackRank, \"SPECULARAA\");\n        }\n        if (defines.POINTSIZE) {\n            fallbacks.addFallback(fallbackRank, \"POINTSIZE\");\n        }\n        if (defines.LOGARITHMICDEPTH) {\n            fallbacks.addFallback(fallbackRank, \"LOGARITHMICDEPTH\");\n        }\n        if (defines.PARALLAX) {\n            fallbacks.addFallback(fallbackRank, \"PARALLAX\");\n        }\n        if (defines.PARALLAX_RHS) {\n            fallbacks.addFallback(fallbackRank, \"PARALLAX_RHS\");\n        }\n        if (defines.PARALLAXOCCLUSION) {\n            fallbacks.addFallback(fallbackRank++, \"PARALLAXOCCLUSION\");\n        }\n        if (defines.ENVIRONMENTBRDF) {\n            fallbacks.addFallback(fallbackRank++, \"ENVIRONMENTBRDF\");\n        }\n        if (defines.TANGENT) {\n            fallbacks.addFallback(fallbackRank++, \"TANGENT\");\n        }\n        fallbackRank = HandleFallbacksForShadows(defines, fallbacks, this._maxSimultaneousLights, fallbackRank++);\n        if (defines.SPECULARTERM) {\n            fallbacks.addFallback(fallbackRank++, \"SPECULARTERM\");\n        }\n        if (defines.USESPHERICALFROMREFLECTIONMAP) {\n            fallbacks.addFallback(fallbackRank++, \"USESPHERICALFROMREFLECTIONMAP\");\n        }\n        if (defines.USEIRRADIANCEMAP) {\n            fallbacks.addFallback(fallbackRank++, \"USEIRRADIANCEMAP\");\n        }\n        if (defines.NORMAL) {\n            fallbacks.addFallback(fallbackRank++, \"NORMAL\");\n        }\n        if (defines.VERTEXCOLOR) {\n            fallbacks.addFallback(fallbackRank++, \"VERTEXCOLOR\");\n        }\n        if (defines.MORPHTARGETS) {\n            fallbacks.addFallback(fallbackRank++, \"MORPHTARGETS\");\n        }\n        if (defines.MULTIVIEW) {\n            fallbacks.addFallback(0, \"MULTIVIEW\");\n        }\n        //Attributes\n        const attribs = [VertexBuffer.PositionKind];\n        if (defines.NORMAL) {\n            attribs.push(VertexBuffer.NormalKind);\n        }\n        if (defines.TANGENT) {\n            attribs.push(VertexBuffer.TangentKind);\n        }\n        for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\n            if (defines[\"UV\" + i]) {\n                attribs.push(`uv${i === 1 ? \"\" : i}`);\n            }\n        }\n        if (defines.VERTEXCOLOR) {\n            attribs.push(VertexBuffer.ColorKind);\n        }\n        PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\n        PrepareAttributesForInstances(attribs, defines);\n        PrepareAttributesForMorphTargets(attribs, mesh, defines);\n        PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\n        let shaderName = \"openpbr\";\n        const uniforms = [\n            \"world\",\n            \"view\",\n            \"viewProjection\",\n            \"vEyePosition\",\n            \"vLightsType\",\n            \"visibility\",\n            \"vFogInfos\",\n            \"vFogColor\",\n            \"pointSize\",\n            \"mBones\",\n            \"normalMatrix\",\n            \"vLightingIntensity\",\n            \"logarithmicDepthConstant\",\n            \"vTangentSpaceParams\",\n            \"boneTextureWidth\",\n            \"vDebugMode\",\n            \"morphTargetTextureInfo\",\n            \"morphTargetTextureIndices\",\n            \"cameraInfo\",\n        ];\n        for (const uniformName in this._uniformsList) {\n            uniforms.push(uniformName);\n        }\n        const samplers = [\n            \"environmentBrdfSampler\",\n            \"blueNoiseSampler\",\n            \"boneSampler\",\n            \"morphTargets\",\n            \"oitDepthSampler\",\n            \"oitFrontColorSampler\",\n            \"areaLightsLTC1Sampler\",\n            \"areaLightsLTC2Sampler\",\n        ];\n        for (const key in this._samplersList) {\n            const sampler = this._samplersList[key];\n            samplers.push(sampler.samplerName);\n            // Push uniforms for texture infos and matrix\n            uniforms.push(sampler.samplerInfoName);\n            uniforms.push(sampler.samplerMatrixName);\n        }\n        PrepareUniformsAndSamplersForIBL(uniforms, samplers, true);\n        const uniformBuffers = [\"Material\", \"Scene\", \"Mesh\"];\n        const indexParameters = { maxSimultaneousLights: this._maxSimultaneousLights, maxSimultaneousMorphTargets: defines.NUM_MORPH_INFLUENCERS };\n        this._eventInfo.fallbacks = fallbacks;\n        this._eventInfo.fallbackRank = fallbackRank;\n        this._eventInfo.defines = defines;\n        this._eventInfo.uniforms = uniforms;\n        this._eventInfo.attributes = attribs;\n        this._eventInfo.samplers = samplers;\n        this._eventInfo.uniformBuffersNames = uniformBuffers;\n        this._eventInfo.customCode = undefined;\n        this._eventInfo.mesh = mesh;\n        this._eventInfo.indexParameters = indexParameters;\n        this._callbackPluginEventGeneric(128 /* MaterialPluginEvent.PrepareEffect */, this._eventInfo);\n        MaterialHelperGeometryRendering.AddUniformsAndSamplers(uniforms, samplers);\n        PrePassConfiguration.AddUniforms(uniforms);\n        PrePassConfiguration.AddSamplers(samplers);\n        AddClipPlaneUniforms(uniforms);\n        if (ImageProcessingConfiguration) {\n            ImageProcessingConfiguration.PrepareUniforms(uniforms, defines);\n            ImageProcessingConfiguration.PrepareSamplers(samplers, defines);\n        }\n        PrepareUniformsAndSamplersList({\n            uniformsNames: uniforms,\n            uniformBuffersNames: uniformBuffers,\n            samplers: samplers,\n            defines: defines,\n            maxSimultaneousLights: this._maxSimultaneousLights,\n        });\n        const csnrOptions = {};\n        if (this.customShaderNameResolve) {\n            shaderName = this.customShaderNameResolve(shaderName, uniforms, uniformBuffers, samplers, defines, attribs, csnrOptions);\n        }\n        const join = defines.toString();\n        const effect = engine.createEffect(shaderName, {\n            attributes: attribs,\n            uniformsNames: uniforms,\n            uniformBuffersNames: uniformBuffers,\n            samplers: samplers,\n            defines: join,\n            fallbacks: fallbacks,\n            onCompiled: onCompiled,\n            onError: onError,\n            indexParameters,\n            processFinalCode: csnrOptions.processFinalCode,\n            processCodeAfterIncludes: this._eventInfo.customCode,\n            multiTarget: defines.PREPASS,\n            shaderLanguage: this._shaderLanguage,\n            extraInitializationsAsync: this._shadersLoaded\n                ? undefined\n                : async () => {\n                    if (this.shaderLanguage === 1 /* ShaderLanguage.WGSL */) {\n                        await Promise.all([import(\"../../ShadersWGSL/openpbr.vertex\"), import(\"../../ShadersWGSL/openpbr.fragment\")]);\n                    }\n                    else {\n                        await Promise.all([import(\"../../Shaders/openpbr.vertex\"), import(\"../../Shaders/openpbr.fragment\")]);\n                    }\n                    this._shadersLoaded = true;\n                },\n        }, engine);\n        this._eventInfo.customCode = undefined;\n        return effect;\n    }\n    _prepareDefines(mesh, renderingMesh, defines, useInstances = null, useClipPlane = null) {\n        const useThinInstances = renderingMesh.hasThinInstances;\n        const scene = this.getScene();\n        const engine = scene.getEngine();\n        // Lights\n        PrepareDefinesForLights(scene, mesh, defines, true, this._maxSimultaneousLights, this._disableLighting);\n        defines._needNormals = true;\n        // Multiview\n        PrepareDefinesForMultiview(scene, defines);\n        // PrePass\n        const oit = this.needAlphaBlendingForMesh(mesh) && this.getScene().useOrderIndependentTransparency;\n        PrepareDefinesForPrePass(scene, defines, this.canRenderToMRT && !oit);\n        // Order independant transparency\n        PrepareDefinesForOIT(scene, defines, oit);\n        MaterialHelperGeometryRendering.PrepareDefines(engine.currentRenderPassId, mesh, defines);\n        // Textures\n        defines.METALLICWORKFLOW = true;\n        if (defines._areTexturesDirty) {\n            defines._needUVs = false;\n            for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\n                defines[\"MAINUV\" + i] = false;\n            }\n            if (scene.texturesEnabled) {\n                // Loop through samplers and prepare defines for each texture\n                for (const key in this._samplersList) {\n                    const sampler = this._samplersList[key];\n                    if (sampler.value) {\n                        PrepareDefinesForMergedUV(sampler.value, defines, sampler.textureDefine);\n                        defines[sampler.textureDefine + \"_GAMMA\"] = sampler.value.gammaSpace;\n                    }\n                    else {\n                        defines[sampler.textureDefine] = false;\n                    }\n                }\n                const radianceTexture = this._getRadianceTexture();\n                const useSHInFragment = this._forceIrradianceInFragment ||\n                    this.realTimeFiltering ||\n                    this._twoSidedLighting ||\n                    engine.getCaps().maxVaryingVectors <= 8 ||\n                    this._baseDiffuseRoughnessTexture != null;\n                PrepareDefinesForIBL(scene, radianceTexture, defines, this.realTimeFiltering, this.realTimeFilteringQuality, !useSHInFragment);\n                if (this._baseMetalnessTexture) {\n                    defines.AOSTOREINMETALMAPRED = this._useAmbientOcclusionFromMetallicTextureRed;\n                }\n                defines.SPECULAR_WEIGHT_IN_ALPHA = this._useSpecularWeightFromAlpha;\n                defines.SPECULAR_WEIGHT_FROM_SPECULAR_COLOR_TEXTURE = this._useSpecularWeightFromSpecularColorTexture;\n                defines.SPECULAR_ROUGHNESS_ANISOTROPY_FROM_TANGENT_TEXTURE = this._useSpecularRoughnessAnisotropyFromTangentTexture;\n                defines.COAT_ROUGHNESS_ANISOTROPY_FROM_TANGENT_TEXTURE = this._useCoatRoughnessAnisotropyFromTangentTexture;\n                defines.ROUGHNESSSTOREINMETALMAPGREEN = this._useRoughnessFromMetallicTextureGreen;\n                defines.METALLNESSSTOREINMETALMAPBLUE = this._useMetallicFromMetallicTextureBlue;\n                defines.THIN_FILM_THICKNESS_FROM_THIN_FILM_TEXTURE = this._useThinFilmThicknessFromTextureGreen;\n                if (this.geometryNormalTexture) {\n                    if (this._useParallax && this.baseColorTexture && MaterialFlags.DiffuseTextureEnabled) {\n                        defines.PARALLAX = true;\n                        defines.PARALLAX_RHS = scene.useRightHandedSystem;\n                        defines.PARALLAXOCCLUSION = !!this._useParallaxOcclusion;\n                    }\n                    else {\n                        defines.PARALLAX = false;\n                    }\n                    defines.OBJECTSPACE_NORMALMAP = this._useObjectSpaceNormalMap;\n                }\n                else {\n                    defines.PARALLAX = false;\n                    defines.PARALLAX_RHS = false;\n                    defines.PARALLAXOCCLUSION = false;\n                    defines.OBJECTSPACE_NORMALMAP = false;\n                }\n                if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\n                    defines.ENVIRONMENTBRDF = true;\n                    defines.ENVIRONMENTBRDF_RGBD = this._environmentBRDFTexture.isRGBD;\n                }\n                else {\n                    defines.ENVIRONMENTBRDF = false;\n                    defines.ENVIRONMENTBRDF_RGBD = false;\n                }\n                if (this._shouldUseAlphaFromBaseColorTexture()) {\n                    defines.ALPHA_FROM_BASE_COLOR_TEXTURE = true;\n                }\n                else {\n                    defines.ALPHA_FROM_BASE_COLOR_TEXTURE = false;\n                }\n            }\n            if (this._lightFalloff === Material.LIGHTFALLOFF_STANDARD) {\n                defines.USEPHYSICALLIGHTFALLOFF = false;\n                defines.USEGLTFLIGHTFALLOFF = false;\n            }\n            else if (this._lightFalloff === Material.LIGHTFALLOFF_GLTF) {\n                defines.USEPHYSICALLIGHTFALLOFF = false;\n                defines.USEGLTFLIGHTFALLOFF = true;\n            }\n            else {\n                defines.USEPHYSICALLIGHTFALLOFF = true;\n                defines.USEGLTFLIGHTFALLOFF = false;\n            }\n            if (!this.backFaceCulling && this._twoSidedLighting) {\n                defines.TWOSIDEDLIGHTING = true;\n            }\n            else {\n                defines.TWOSIDEDLIGHTING = false;\n            }\n            // We need it to not invert normals in two sided lighting mode (based on the winding of the face)\n            defines.MIRRORED = !!scene._mirroredCameraPosition;\n            defines.SPECULARAA = engine.getCaps().standardDerivatives && this._enableSpecularAntiAliasing;\n        }\n        if (defines._areTexturesDirty || defines._areMiscDirty) {\n            defines.ALPHATESTVALUE = `${this._alphaCutOff}${this._alphaCutOff % 1 === 0 ? \".\" : \"\"}`;\n            defines.PREMULTIPLYALPHA = this.alphaMode === Constants.ALPHA_PREMULTIPLIED || this.alphaMode === Constants.ALPHA_PREMULTIPLIED_PORTERDUFF;\n            defines.ALPHABLEND = this.needAlphaBlendingForMesh(mesh);\n        }\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\n            this._imageProcessingConfiguration.prepareDefines(defines);\n        }\n        defines.FORCENORMALFORWARD = this._forceNormalForward;\n        defines.RADIANCEOCCLUSION = this._useRadianceOcclusion;\n        defines.HORIZONOCCLUSION = this._useHorizonOcclusion;\n        if ((this.specularRoughnessAnisotropy > 0.0 || this.coatRoughnessAnisotropy > 0.0) &&\n            OpenPBRMaterial._noiseTextures[scene.uniqueId] &&\n            MaterialFlags.ReflectionTextureEnabled) {\n            // ANISOTROPIC is used to include common shader functions needed for anisotropy\n            // ANISOTROPIC_BASE is used to process anisotropy for the base layer\n            // ANISOTROPIC_COAT is used to process anisotropy for the coat layer\n            defines.ANISOTROPIC = true;\n            if (!mesh.isVerticesDataPresent(VertexBuffer.TangentKind)) {\n                defines._needUVs = true;\n                defines.MAINUV1 = true;\n            }\n            if (this._useGltfStyleAnisotropy) {\n                defines.USE_GLTF_STYLE_ANISOTROPY = true;\n            }\n            defines.ANISOTROPIC_BASE = this.specularRoughnessAnisotropy > 0.0;\n            defines.ANISOTROPIC_COAT = this.coatRoughnessAnisotropy > 0.0;\n        }\n        else {\n            defines.ANISOTROPIC = false;\n            defines.USE_GLTF_STYLE_ANISOTROPY = false;\n            defines.ANISOTROPIC_BASE = false;\n            defines.ANISOTROPIC_COAT = false;\n        }\n        defines.THIN_FILM = this.thinFilmWeight > 0.0;\n        defines.IRIDESCENCE = this.thinFilmWeight > 0.0;\n        // Misc.\n        if (defines._areMiscDirty) {\n            PrepareDefinesForMisc(mesh, scene, this._useLogarithmicDepth, this.pointsCloud, this.fogEnabled, this.needAlphaTestingForMesh(mesh), defines, this._applyDecalMapAfterDetailMap, this._useVertexPulling, renderingMesh, this._setVertexOutputInvariant);\n            defines.UNLIT = this._unlit || ((this.pointsCloud || this.wireframe) && !mesh.isVerticesDataPresent(VertexBuffer.NormalKind));\n            defines.DEBUGMODE = this._debugMode;\n        }\n        // Values that need to be evaluated on every frame\n        PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances ? true : false, useClipPlane, useThinInstances);\n        // External config\n        this._eventInfo.defines = defines;\n        this._eventInfo.mesh = mesh;\n        this._callbackPluginEventPrepareDefinesBeforeAttributes(this._eventInfo);\n        // Attribs\n        PrepareDefinesForAttributes(mesh, defines, true, true, true, this._transparencyMode !== Material.MATERIAL_OPAQUE);\n        // External config\n        this._callbackPluginEventPrepareDefines(this._eventInfo);\n    }\n}\nOpenPBRMaterial._noiseTextures = {};\n/**\n * Force all the PBR materials to compile to glsl even on WebGPU engines.\n * False by default. This is mostly meant for backward compatibility.\n */\nOpenPBRMaterial.ForceGLSL = false;\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"baseWeight\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_baseWeight\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"baseWeightTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_baseWeightTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"baseColor\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_baseColor\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"baseColorTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_baseColorTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"baseDiffuseRoughness\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_baseDiffuseRoughness\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"baseDiffuseRoughnessTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_baseDiffuseRoughnessTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"baseMetalness\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_baseMetalness\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"baseMetalnessTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_baseMetalnessTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"specularWeight\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_specularWeight\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"specularWeightTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_specularWeightTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"specularColor\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_specularColor\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"specularColorTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_specularColorTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"specularRoughness\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_specularRoughness\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"specularRoughnessTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_specularRoughnessTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"specularRoughnessAnisotropy\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_specularRoughnessAnisotropy\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"specularRoughnessAnisotropyTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_specularRoughnessAnisotropyTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"specularIor\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_specularIor\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"coatWeight\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_coatWeight\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"coatWeightTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_coatWeightTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"coatColor\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_coatColor\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"coatColorTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_coatColorTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"coatRoughness\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_coatRoughness\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"coatRoughnessTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_coatRoughnessTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"coatRoughnessAnisotropy\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_coatRoughnessAnisotropy\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"coatRoughnessAnisotropyTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_coatRoughnessAnisotropyTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"coatIor\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_coatIor\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"coatDarkening\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_coatDarkening\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"coatDarkeningTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_coatDarkeningTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"geometryNormalTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_geometryNormalTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"geometryTangent\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_geometryTangent\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"geometryTangentTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_geometryTangentTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"geometryCoatNormalTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_geometryCoatNormalTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"geometryCoatTangent\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_geometryCoatTangent\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"geometryCoatTangentTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_geometryCoatTangentTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"geometryOpacity\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_geometryOpacity\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"geometryOpacityTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_geometryOpacityTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"emissionLuminance\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_emissionLuminance\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"emissionColor\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_emissionColor\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"emissionColorTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_emissionColorTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"thinFilmWeight\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_thinFilmWeight\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"thinFilmWeightTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_thinFilmWeightTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"thinFilmThickness\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_thinFilmThickness\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"thinFilmThicknessMin\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_thinFilmThicknessMin\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"thinFilmThicknessTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_thinFilmThicknessTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"thinFilmIor\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_thinFilmIor\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"ambientOcclusionTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_ambientOcclusionTexture\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"directIntensity\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"environmentIntensity\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"useSpecularWeightFromTextureAlpha\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\n], OpenPBRMaterial.prototype, \"forceAlphaTest\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\n], OpenPBRMaterial.prototype, \"alphaCutOff\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"useAmbientOcclusionFromMetallicTextureRed\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"useAmbientInGrayScale\", void 0);\n__decorate([\n    serialize()\n], OpenPBRMaterial.prototype, \"usePhysicalLightFalloff\", null);\n__decorate([\n    serialize()\n], OpenPBRMaterial.prototype, \"useGLTFLightFalloff\", null);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"useObjectSpaceNormalMap\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"useParallax\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"useParallaxOcclusion\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"parallaxScaleBias\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n], OpenPBRMaterial.prototype, \"disableLighting\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"forceIrradianceInFragment\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n], OpenPBRMaterial.prototype, \"maxSimultaneousLights\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"invertNormalMapX\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"invertNormalMapY\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"twoSidedLighting\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"useAlphaFresnel\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"useLinearAlphaFresnel\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"environmentBRDFTexture\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"forceNormalForward\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"enableSpecularAntiAliasing\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"useHorizonOcclusion\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"useRadianceOcclusion\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\n], OpenPBRMaterial.prototype, \"unlit\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\n], OpenPBRMaterial.prototype, \"applyDecalMapAfterDetailMap\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\n], OpenPBRMaterial.prototype, \"debugMode\", void 0);\n__decorate([\n    serialize()\n], OpenPBRMaterial.prototype, \"transparencyMode\", null);\nRegisterClass(\"BABYLON.OpenPBRMaterial\", OpenPBRMaterial);\n//# sourceMappingURL=openPbrMaterial.js.map"],"names":[],"mappings":"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"}