{"version":3,"file":"openPbrMaterial-Brhqfoty.esm.min.js","sources":["../../../../../dev/core/dist/Materials/PBR/openPbrMaterial.js"],"sourcesContent":["import { __decorate } from \"tslib\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { serialize, expandToProperty, addAccessorsForMaterialProperty } from \"../../Misc/decorators\";\nimport { GetEnvironmentBRDFTexture } from \"../../Misc/brdfTextureTools\";\nimport { Scene } from \"../../scene\";\nimport { Color3 } from \"../../Maths/math.color\";\nimport { ImageProcessingConfiguration } from \"../imageProcessingConfiguration\";\nimport { Texture } from \"../../Materials/Textures/texture\";\nimport { RegisterClass } from \"../../Misc/typeStore\";\nimport { Material } from \"../material\";\nimport { SerializationHelper } from \"../../Misc/decorators.serialization\";\nimport { MaterialDefines } from \"../materialDefines\";\nimport { ImageProcessingDefinesMixin } from \"../imageProcessingConfiguration.defines\";\nimport { EffectFallbacks } from \"../effectFallbacks\";\nimport { AddClipPlaneUniforms, BindClipPlane } from \"../clipPlaneMaterialHelper\";\nimport { BindBonesParameters, BindFogParameters, BindLights, BindLogDepth, BindMorphTargetParameters, BindTextureMatrix, BindIBLParameters, BindIBLSamplers, HandleFallbacksForShadows, PrepareAttributesForBakedVertexAnimation, PrepareAttributesForBones, PrepareAttributesForInstances, PrepareAttributesForMorphTargets, PrepareDefinesForAttributes, PrepareDefinesForFrameBoundValues, PrepareDefinesForLights, PrepareDefinesForIBL, PrepareDefinesForMergedUV, PrepareDefinesForMisc, PrepareDefinesForMultiview, PrepareDefinesForOIT, PrepareDefinesForPrePass, PrepareUniformsAndSamplersList, PrepareUniformsAndSamplersForIBL, PrepareUniformLayoutForIBL, } from \"../materialHelper.functions\";\nimport { Constants } from \"../../Engines/constants\";\nimport { VertexBuffer } from \"../../Buffers/buffer\";\nimport { MaterialHelperGeometryRendering } from \"../materialHelper.geometryrendering\";\nimport { PrePassConfiguration } from \"../prePassConfiguration\";\nimport { MaterialFlags } from \"../materialFlags\";\nimport { Logger } from \"core/Misc/logger\";\nimport { UVDefinesMixin } from \"../uv.defines\";\nimport { Vector2, Vector4, TmpVectors } from \"core/Maths/math.vector\";\nimport { ImageProcessingMixin } from \"../imageProcessing\";\nimport { PushMaterial } from \"../pushMaterial\";\nimport { SmartArray } from \"../../Misc/smartArray\";\nconst onCreatedEffectParameters = { effect: null, subMesh: null };\nclass Uniform {\n    populateVectorFromLinkedProperties(vector) {\n        const destinationSize = vector.dimension[0];\n        for (const propKey in this.linkedProperties) {\n            const prop = this.linkedProperties[propKey];\n            const sourceSize = prop.numComponents;\n            if (destinationSize < sourceSize || prop.targetUniformComponentOffset > destinationSize - sourceSize) {\n                if (sourceSize == 1) {\n                    Logger.Error(`Float property ${prop.name} has an offset that is too large.`);\n                }\n                else {\n                    Logger.Error(`Vector${sourceSize} property ${prop.name} won't fit in Vector${destinationSize} or has an offset that is too large.`);\n                }\n                return;\n            }\n            if (typeof prop.value === \"number\") {\n                Uniform._tmpArray[prop.targetUniformComponentOffset] = prop.value;\n            }\n            else {\n                prop.value.toArray(Uniform._tmpArray, prop.targetUniformComponentOffset);\n            }\n        }\n        vector.fromArray(Uniform._tmpArray);\n    }\n    constructor(name, componentNum) {\n        this.linkedProperties = {};\n        this.name = name;\n        this.numComponents = componentNum;\n    }\n}\nUniform._tmpArray = [0, 0, 0, 0];\n/**\n * Defines a property for the OpenPBRMaterial.\n */\nclass Property {\n    /**\n     * Creates a new Property instance.\n     * @param name The name of the property in the shader\n     * @param defaultValue The default value of the property\n     * @param targetUniformName The name of the property in the shader uniform block\n     * @param targetUniformComponentNum The number of components in the target uniform. All properties that are\n     * packed into the same uniform must agree on the size of the target uniform.\n     * @param targetUniformComponentOffset The offset in the uniform where this property will be packed.\n     */\n    constructor(name, defaultValue, targetUniformName, targetUniformComponentNum, targetUniformComponentOffset = 0) {\n        // public includeAlphaFromProp: string = \"\";\n        /**\n         * If not given a type, there will be no uniform defined for this property and\n         * it will be assumed that the value will be packed into the already existing \"uniformName\" uniform.\n         */\n        this.targetUniformComponentNum = 4; // Default to vec4\n        this.targetUniformComponentOffset = 0;\n        this.name = name;\n        this.targetUniformName = targetUniformName;\n        this.defaultValue = defaultValue;\n        this.value = defaultValue;\n        this.targetUniformComponentNum = targetUniformComponentNum;\n        this.targetUniformComponentOffset = targetUniformComponentOffset;\n    }\n    /**\n     * Returns the number of components of the property based on its default value type.\n     */\n    get numComponents() {\n        if (typeof this.defaultValue === \"number\") {\n            return 1;\n        }\n        return this.defaultValue.dimension[0];\n    }\n}\nclass Sampler {\n    /**\n     * The name of the sampler used in the shader.\n     * If this naming changes, we'll also need to change:\n     * - samplerFragmentDeclaration.fx\n     * - openpbr.fragment.fx\n     */\n    get samplerName() {\n        return this.samplerPrefix + \"Sampler\";\n    }\n    /**\n     * The name of the sampler info used in the shader.\n     * If this naming changes, we'll also need to change:\n     * - openpbr.vertex.fx\n     * - openpbr.fragment.fx\n     */\n    get samplerInfoName() {\n        return \"v\" + this.samplerPrefix.charAt(0).toUpperCase() + this.samplerPrefix.slice(1) + \"Infos\";\n    }\n    /**\n     * The name of the matrix used for this sampler in the shader.\n     * If this naming changes, we'll also need to change:\n     * - materialHelper.functions.BindTextureMatrix\n     * - samplerVertexImplementation.fx\n     * - openpbr.fragment.fx\n     */\n    get samplerMatrixName() {\n        return this.samplerPrefix + \"Matrix\";\n    }\n    /**\n     * Creates a new Sampler instance.\n     * @param name The name of the texture property\n     * @param samplerPrefix The prefix used for the name of the sampler in the shader\n     * @param textureDefine The define used in the shader for this sampler\n     */\n    constructor(name, samplerPrefix, textureDefine) {\n        this.value = null; // Texture value, default to null\n        this.samplerPrefix = \"\"; // The name of the sampler in the shader\n        this.textureDefine = \"\"; // The define used in the shader for this sampler\n        this.name = name;\n        this.samplerPrefix = samplerPrefix;\n        this.textureDefine = textureDefine;\n    }\n}\nclass OpenPBRMaterialDefinesBase extends UVDefinesMixin(MaterialDefines) {\n}\n/**\n * Manages the defines for the PBR Material.\n * @internal\n */\nexport class OpenPBRMaterialDefines extends ImageProcessingDefinesMixin(OpenPBRMaterialDefinesBase) {\n    /**\n     * Initializes the PBR Material defines.\n     * @param externalProperties The external properties\n     */\n    constructor(externalProperties) {\n        super(externalProperties);\n        this.NUM_SAMPLES = \"0\";\n        this.REALTIME_FILTERING = false;\n        this.IBL_CDF_FILTERING = false;\n        this.VERTEXCOLOR = false;\n        this.BAKED_VERTEX_ANIMATION_TEXTURE = false;\n        this.VERTEXALPHA = false;\n        this.ALPHATEST = false;\n        this.DEPTHPREPASS = false;\n        this.ALPHABLEND = false;\n        this.ALPHA_FROM_BASE_COLOR_TEXTURE = false;\n        this.ALPHATESTVALUE = \"0.5\";\n        this.PREMULTIPLYALPHA = false;\n        this.REFLECTIVITY_GAMMA = false;\n        this.REFLECTIVITYDIRECTUV = 0;\n        this.SPECULARTERM = false;\n        this.LODBASEDMICROSFURACE = true;\n        this.METALLICWORKFLOW = true;\n        this.ROUGHNESSSTOREINMETALMAPALPHA = false;\n        this.ROUGHNESSSTOREINMETALMAPGREEN = false;\n        this.METALLNESSSTOREINMETALMAPBLUE = false;\n        this.AOSTOREINMETALMAPRED = false;\n        this.SPECULAR_WEIGHT_IN_ALPHA = false;\n        this.SPECULAR_WEIGHT_FROM_SPECULAR_COLOR_TEXTURE = false;\n        this.SPECULAR_ROUGHNESS_ANISOTROPY_FROM_TANGENT_TEXTURE = false;\n        this.COAT_ROUGHNESS_ANISOTROPY_FROM_TANGENT_TEXTURE = false;\n        this.USE_GLTF_STYLE_ANISOTROPY = false;\n        this.THIN_FILM_THICKNESS_FROM_THIN_FILM_TEXTURE = false;\n        this.ENVIRONMENTBRDF = false;\n        this.ENVIRONMENTBRDF_RGBD = false;\n        this.NORMAL = false;\n        this.TANGENT = false;\n        this.OBJECTSPACE_NORMALMAP = false;\n        this.PARALLAX = false;\n        this.PARALLAX_RHS = false;\n        this.PARALLAXOCCLUSION = false;\n        this.NORMALXYSCALE = true;\n        this.ANISOTROPIC = false; // Enables anisotropic logic. Still needed because it's used in pbrHelperFunctions\n        this.ANISOTROPIC_OPENPBR = true; // Tells the shader to use OpenPBR's anisotropic roughness remapping\n        this.ANISOTROPIC_BASE = false; // Tells the shader to apply anisotropy to the base layer\n        this.ANISOTROPIC_COAT = false; // Tells the shader to apply anisotropy to the coat layer\n        this.THIN_FILM = false; // Enables thin film layer\n        this.IRIDESCENCE = false; // Enables iridescence layer\n        this.REFLECTION = false;\n        this.REFLECTIONMAP_3D = false;\n        this.REFLECTIONMAP_SPHERICAL = false;\n        this.REFLECTIONMAP_PLANAR = false;\n        this.REFLECTIONMAP_CUBIC = false;\n        this.USE_LOCAL_REFLECTIONMAP_CUBIC = false;\n        this.REFLECTIONMAP_PROJECTION = false;\n        this.REFLECTIONMAP_SKYBOX = false;\n        this.REFLECTIONMAP_EXPLICIT = false;\n        this.REFLECTIONMAP_EQUIRECTANGULAR = false;\n        this.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\n        this.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\n        this.INVERTCUBICMAP = false;\n        this.USESPHERICALFROMREFLECTIONMAP = false;\n        this.USEIRRADIANCEMAP = false;\n        this.USE_IRRADIANCE_DOMINANT_DIRECTION = false;\n        this.USESPHERICALINVERTEX = false;\n        this.REFLECTIONMAP_OPPOSITEZ = false;\n        this.LODINREFLECTIONALPHA = false;\n        this.GAMMAREFLECTION = false;\n        this.RGBDREFLECTION = false;\n        this.RADIANCEOCCLUSION = false;\n        this.HORIZONOCCLUSION = false;\n        this.INSTANCES = false;\n        this.THIN_INSTANCES = false;\n        this.INSTANCESCOLOR = false;\n        this.PREPASS = false;\n        this.PREPASS_COLOR = false;\n        this.PREPASS_COLOR_INDEX = -1;\n        this.PREPASS_IRRADIANCE = false;\n        this.PREPASS_IRRADIANCE_INDEX = -1;\n        this.PREPASS_ALBEDO = false;\n        this.PREPASS_ALBEDO_INDEX = -1;\n        this.PREPASS_ALBEDO_SQRT = false;\n        this.PREPASS_ALBEDO_SQRT_INDEX = -1;\n        this.PREPASS_DEPTH = false;\n        this.PREPASS_DEPTH_INDEX = -1;\n        this.PREPASS_SCREENSPACE_DEPTH = false;\n        this.PREPASS_SCREENSPACE_DEPTH_INDEX = -1;\n        this.PREPASS_NORMALIZED_VIEW_DEPTH = false;\n        this.PREPASS_NORMALIZED_VIEW_DEPTH_INDEX = -1;\n        this.PREPASS_NORMAL = false;\n        this.PREPASS_NORMAL_INDEX = -1;\n        this.PREPASS_NORMAL_WORLDSPACE = false;\n        this.PREPASS_WORLD_NORMAL = false;\n        this.PREPASS_WORLD_NORMAL_INDEX = -1;\n        this.PREPASS_POSITION = false;\n        this.PREPASS_POSITION_INDEX = -1;\n        this.PREPASS_LOCAL_POSITION = false;\n        this.PREPASS_LOCAL_POSITION_INDEX = -1;\n        this.PREPASS_VELOCITY = false;\n        this.PREPASS_VELOCITY_INDEX = -1;\n        this.PREPASS_VELOCITY_LINEAR = false;\n        this.PREPASS_VELOCITY_LINEAR_INDEX = -1;\n        this.PREPASS_REFLECTIVITY = false;\n        this.PREPASS_REFLECTIVITY_INDEX = -1;\n        this.SCENE_MRT_COUNT = 0;\n        this.NUM_BONE_INFLUENCERS = 0;\n        this.BonesPerMesh = 0;\n        this.BONETEXTURE = false;\n        this.BONES_VELOCITY_ENABLED = false;\n        this.NONUNIFORMSCALING = false;\n        this.MORPHTARGETS = false;\n        this.MORPHTARGETS_POSITION = false;\n        this.MORPHTARGETS_NORMAL = false;\n        this.MORPHTARGETS_TANGENT = false;\n        this.MORPHTARGETS_UV = false;\n        this.MORPHTARGETS_UV2 = false;\n        this.MORPHTARGETS_COLOR = false;\n        this.MORPHTARGETTEXTURE_HASPOSITIONS = false;\n        this.MORPHTARGETTEXTURE_HASNORMALS = false;\n        this.MORPHTARGETTEXTURE_HASTANGENTS = false;\n        this.MORPHTARGETTEXTURE_HASUVS = false;\n        this.MORPHTARGETTEXTURE_HASUV2S = false;\n        this.MORPHTARGETTEXTURE_HASCOLORS = false;\n        this.NUM_MORPH_INFLUENCERS = 0;\n        this.MORPHTARGETS_TEXTURE = false;\n        this.USEPHYSICALLIGHTFALLOFF = false;\n        this.USEGLTFLIGHTFALLOFF = false;\n        this.TWOSIDEDLIGHTING = false;\n        this.MIRRORED = false;\n        this.SHADOWFLOAT = false;\n        this.CLIPPLANE = false;\n        this.CLIPPLANE2 = false;\n        this.CLIPPLANE3 = false;\n        this.CLIPPLANE4 = false;\n        this.CLIPPLANE5 = false;\n        this.CLIPPLANE6 = false;\n        this.POINTSIZE = false;\n        this.FOG = false;\n        this.LOGARITHMICDEPTH = false;\n        this.CAMERA_ORTHOGRAPHIC = false;\n        this.CAMERA_PERSPECTIVE = false;\n        this.AREALIGHTSUPPORTED = true;\n        this.FORCENORMALFORWARD = false;\n        this.SPECULARAA = false;\n        this.UNLIT = false;\n        this.DECAL_AFTER_DETAIL = false;\n        this.DEBUGMODE = 0;\n        this.CLUSTLIGHT_SLICES = 0;\n        this.CLUSTLIGHT_BATCH = 0;\n        // BRDF defines\n        this.BRDF_V_HEIGHT_CORRELATED = true;\n        this.MS_BRDF_ENERGY_CONSERVATION = true;\n        this.SPHERICAL_HARMONICS = true;\n        this.SPECULAR_GLOSSINESS_ENERGY_CONSERVATION = true;\n        this.MIX_IBL_RADIANCE_WITH_IRRADIANCE = true;\n        this.LEGACY_SPECULAR_ENERGY_CONSERVATION = false;\n        this.BASE_DIFFUSE_MODEL = Constants.MATERIAL_DIFFUSE_MODEL_E_OREN_NAYAR;\n        this.DIELECTRIC_SPECULAR_MODEL = Constants.MATERIAL_DIELECTRIC_SPECULAR_MODEL_OPENPBR;\n        this.CONDUCTOR_SPECULAR_MODEL = Constants.MATERIAL_CONDUCTOR_SPECULAR_MODEL_OPENPBR;\n        this.rebuild();\n    }\n    /**\n     * Resets the PBR Material defines.\n     */\n    reset() {\n        super.reset();\n        this.ALPHATESTVALUE = \"0.5\";\n        this.NORMALXYSCALE = true;\n    }\n}\nclass OpenPBRMaterialBase extends ImageProcessingMixin(PushMaterial) {\n}\n/**\n * A Physically based material that follows the specification of OpenPBR.\n *\n * For more information, please refer to the documentation :\n * https://academysoftwarefoundation.github.io/OpenPBR/index.html\n */\nexport class OpenPBRMaterial extends OpenPBRMaterialBase {\n    /**\n     * Defines the angle of the tangent of the material's geometry. Used only for anisotropic reflections.\n     * See OpenPBR's specs for geometry_tangent\n     */\n    get geometryTangentAngle() {\n        return Math.atan2(this.geometryTangent.y, this.geometryTangent.x);\n    }\n    set geometryTangentAngle(value) {\n        this.geometryTangent = new Vector2(Math.cos(value), Math.sin(value));\n    }\n    /**\n     * Defines the angle of the tangent of the material's coat layer.\n     */\n    get geometryCoatTangentAngle() {\n        return Math.atan2(this.geometryCoatTangent.y, this.geometryCoatTangent.x);\n    }\n    /**\n     * Defines the angle of the tangent of the material's coat layer.\n     */\n    set geometryCoatTangentAngle(value) {\n        this.geometryCoatTangent = new Vector2(Math.cos(value), Math.sin(value));\n    }\n    /**\n     * BJS is using an hardcoded light falloff based on a manually sets up range.\n     * In PBR, one way to represents the falloff is to use the inverse squared root algorithm.\n     * This parameter can help you switch back to the BJS mode in order to create scenes using both materials.\n     */\n    get usePhysicalLightFalloff() {\n        return this._lightFalloff === Material.LIGHTFALLOFF_PHYSICAL;\n    }\n    /**\n     * BJS is using an hardcoded light falloff based on a manually sets up range.\n     * In PBR, one way to represents the falloff is to use the inverse squared root algorithm.\n     * This parameter can help you switch back to the BJS mode in order to create scenes using both materials.\n     */\n    set usePhysicalLightFalloff(value) {\n        if (value !== this.usePhysicalLightFalloff) {\n            // Ensure the effect will be rebuilt.\n            this._markAllSubMeshesAsTexturesDirty();\n            if (value) {\n                this._lightFalloff = Material.LIGHTFALLOFF_PHYSICAL;\n            }\n            else {\n                this._lightFalloff = Material.LIGHTFALLOFF_STANDARD;\n            }\n        }\n    }\n    /**\n     * In order to support the falloff compatibility with gltf, a special mode has been added\n     * to reproduce the gltf light falloff.\n     */\n    get useGLTFLightFalloff() {\n        return this._lightFalloff === Material.LIGHTFALLOFF_GLTF;\n    }\n    /**\n     * In order to support the falloff compatibility with gltf, a special mode has been added\n     * to reproduce the gltf light falloff.\n     */\n    set useGLTFLightFalloff(value) {\n        if (value !== this.useGLTFLightFalloff) {\n            // Ensure the effect will be rebuilt.\n            this._markAllSubMeshesAsTexturesDirty();\n            if (value) {\n                this._lightFalloff = Material.LIGHTFALLOFF_GLTF;\n            }\n            else {\n                this._lightFalloff = Material.LIGHTFALLOFF_STANDARD;\n            }\n        }\n    }\n    /**\n     * Enables realtime filtering on the texture.\n     */\n    get realTimeFiltering() {\n        return this._realTimeFiltering;\n    }\n    set realTimeFiltering(b) {\n        this._realTimeFiltering = b;\n        this.markAsDirty(Constants.MATERIAL_TextureDirtyFlag);\n    }\n    /**\n     * Quality switch for realtime filtering\n     */\n    get realTimeFilteringQuality() {\n        return this._realTimeFilteringQuality;\n    }\n    set realTimeFilteringQuality(n) {\n        this._realTimeFilteringQuality = n;\n        this.markAsDirty(Constants.MATERIAL_TextureDirtyFlag);\n    }\n    /**\n     * Can this material render to several textures at once\n     */\n    get canRenderToMRT() {\n        return true;\n    }\n    /**\n     * Instantiates a new OpenPBRMaterial instance.\n     *\n     * @param name The material name\n     * @param scene The scene the material will be use in.\n     * @param forceGLSL Use the GLSL code generation for the shader (even on WebGPU). Default is false\n     */\n    constructor(name, scene, forceGLSL = false) {\n        super(name, scene, undefined, forceGLSL || OpenPBRMaterial.ForceGLSL);\n        this._baseWeight = new Property(\"base_weight\", 1, \"vBaseWeight\", 1);\n        this._baseWeightTexture = new Sampler(\"base_weight\", \"baseWeight\", \"BASE_WEIGHT\");\n        this._baseColor = new Property(\"base_color\", Color3.White(), \"vBaseColor\", 4);\n        this._baseColorTexture = new Sampler(\"base_color\", \"baseColor\", \"BASE_COLOR\");\n        this._baseDiffuseRoughness = new Property(\"base_diffuse_roughness\", 0, \"vBaseDiffuseRoughness\", 1);\n        this._baseDiffuseRoughnessTexture = new Sampler(\"base_diffuse_roughness\", \"baseDiffuseRoughness\", \"BASE_DIFFUSE_ROUGHNESS\");\n        this._baseMetalness = new Property(\"base_metalness\", 0, \"vReflectanceInfo\", 4, 0);\n        this._baseMetalnessTexture = new Sampler(\"base_metalness\", \"baseMetalness\", \"BASE_METALNESS\");\n        this._specularWeight = new Property(\"specular_weight\", 1, \"vReflectanceInfo\", 4, 3);\n        this._specularWeightTexture = new Sampler(\"specular_weight\", \"specularWeight\", \"SPECULAR_WEIGHT\");\n        this._specularColor = new Property(\"specular_color\", Color3.White(), \"vSpecularColor\", 4);\n        this._specularColorTexture = new Sampler(\"specular_color\", \"specularColor\", \"SPECULAR_COLOR\");\n        this._specularRoughness = new Property(\"specular_roughness\", 0.3, \"vReflectanceInfo\", 4, 1);\n        this._specularRoughnessTexture = new Sampler(\"specular_roughness\", \"specularRoughness\", \"SPECULAR_ROUGHNESS\");\n        this._specularRoughnessAnisotropy = new Property(\"specular_roughness_anisotropy\", 0, \"vSpecularAnisotropy\", 3, 2);\n        this._specularRoughnessAnisotropyTexture = new Sampler(\"specular_roughness_anisotropy\", \"specularRoughnessAnisotropy\", \"SPECULAR_ROUGHNESS_ANISOTROPY\");\n        this._specularIor = new Property(\"specular_ior\", 1.5, \"vReflectanceInfo\", 4, 2);\n        this._coatWeight = new Property(\"coat_weight\", 0.0, \"vCoatWeight\", 1, 0);\n        this._coatWeightTexture = new Sampler(\"coat_weight\", \"coatWeight\", \"COAT_WEIGHT\");\n        this._coatColor = new Property(\"coat_color\", Color3.White(), \"vCoatColor\", 3, 0);\n        this._coatColorTexture = new Sampler(\"coat_color\", \"coatColor\", \"COAT_COLOR\");\n        this._coatRoughness = new Property(\"coat_roughness\", 0.0, \"vCoatRoughness\", 1, 0);\n        this._coatRoughnessTexture = new Sampler(\"coat_roughness\", \"coatRoughness\", \"COAT_ROUGHNESS\");\n        this._coatRoughnessAnisotropy = new Property(\"coat_roughness_anisotropy\", 0, \"vCoatRoughnessAnisotropy\", 1);\n        this._coatRoughnessAnisotropyTexture = new Sampler(\"coat_roughness_anisotropy\", \"coatRoughnessAnisotropy\", \"COAT_ROUGHNESS_ANISOTROPY\");\n        this._coatIor = new Property(\"coat_ior\", 1.5, \"vCoatIor\", 1, 0);\n        this._coatDarkening = new Property(\"coat_darkening\", 1.0, \"vCoatDarkening\", 1, 0);\n        this._coatDarkeningTexture = new Sampler(\"coat_darkening\", \"coatDarkening\", \"COAT_DARKENING\");\n        /**\n         * Specifies whether the coat roughness is taken from the\n         * same texture as the coat_weight.\n         */\n        this.useCoatRoughnessFromWeightTexture = false;\n        this._geometryNormalTexture = new Sampler(\"geometry_normal\", \"geometryNormal\", \"GEOMETRY_NORMAL\");\n        this._geometryTangent = new Property(\"geometry_tangent\", new Vector2(1, 0), \"vSpecularAnisotropy\", 3, 0);\n        this._geometryTangentTexture = new Sampler(\"geometry_tangent\", \"geometryTangent\", \"GEOMETRY_TANGENT\");\n        this._geometryCoatNormalTexture = new Sampler(\"geometry_coat_normal\", \"geometryCoatNormal\", \"GEOMETRY_COAT_NORMAL\");\n        this._geometryCoatTangent = new Property(\"geometry_coat_tangent\", new Vector2(1, 0), \"vGeometryCoatTangent\", 2, 0);\n        this._geometryCoatTangentTexture = new Sampler(\"geometry_coat_tangent\", \"geometryCoatTangent\", \"GEOMETRY_COAT_TANGENT\");\n        this._geometryOpacity = new Property(\"geometry_opacity\", 1.0, \"vBaseColor\", 4, 3);\n        this._geometryOpacityTexture = new Sampler(\"geometry_opacity\", \"geometryOpacity\", \"GEOMETRY_OPACITY\");\n        this._emissionLuminance = new Property(\"emission_luminance\", 1.0, \"vLightingIntensity\", 4, 1);\n        this._emissionColor = new Property(\"emission_color\", Color3.Black(), \"vEmissionColor\", 3);\n        this._emissionColorTexture = new Sampler(\"emission_color\", \"emissionColor\", \"EMISSION_COLOR\");\n        this._thinFilmWeight = new Property(\"thin_film_weight\", 0.0, \"vThinFilmWeight\", 1, 0);\n        this._thinFilmWeightTexture = new Sampler(\"thin_film_weight\", \"thinFilmWeight\", \"THIN_FILM_WEIGHT\");\n        this._thinFilmThickness = new Property(\"thin_film_thickness\", 0.5, \"vThinFilmThickness\", 2, 0);\n        this._thinFilmThicknessMin = new Property(\"thin_film_thickness_min\", 0.0, \"vThinFilmThickness\", 2, 1);\n        this._thinFilmThicknessTexture = new Sampler(\"thin_film_thickness\", \"thinFilmThickness\", \"THIN_FILM_THICKNESS\");\n        this._thinFilmIor = new Property(\"thin_film_ior\", 1.4, \"vThinFilmIor\", 1, 0);\n        this._ambientOcclusionTexture = new Sampler(\"ambient_occlusion\", \"ambientOcclusion\", \"AMBIENT_OCCLUSION\");\n        this._uniformsList = {};\n        this._samplersList = {};\n        this._samplerDefines = {};\n        /**\n         * Intensity of the direct lights e.g. the four lights available in your scene.\n         * This impacts both the direct diffuse and specular highlights.\n         */\n        this.directIntensity = 1.0;\n        /**\n         * Intensity of the environment e.g. how much the environment will light the object\n         * either through harmonics for rough material or through the reflection for shiny ones.\n         */\n        this.environmentIntensity = 1.0;\n        /**\n         * Specifies that the specular weight is stored in the alpha channel of the specular weight texture.\n         */\n        this.useSpecularWeightFromTextureAlpha = false;\n        /**\n         * Enforces alpha test in opaque or blend mode in order to improve the performances of some situations.\n         */\n        this.forceAlphaTest = false;\n        /**\n         * Defines the alpha limits in alpha test mode.\n         */\n        this.alphaCutOff = 0.4;\n        /**\n         * Specifies if the metallic texture contains the ambient occlusion information in its red channel.\n         */\n        this.useAmbientOcclusionFromMetallicTextureRed = false;\n        /**\n         * Specifies if the ambient texture contains the ambient occlusion information in its red channel only.\n         */\n        this.useAmbientInGrayScale = false;\n        /**\n         * Allows using an object space normal map (instead of tangent space).\n         */\n        this.useObjectSpaceNormalMap = false;\n        /**\n         * Allows using the normal map in parallax mode.\n         */\n        this.useParallax = false;\n        /**\n         * Allows using the normal map in parallax occlusion mode.\n         */\n        this.useParallaxOcclusion = false;\n        /**\n         * Controls the scale bias of the parallax mode.\n         */\n        this.parallaxScaleBias = 0.05;\n        /**\n         * If sets to true, disables all the lights affecting the material.\n         */\n        this.disableLighting = false;\n        /**\n         * Force the shader to compute irradiance in the fragment shader in order to take normal mapping into account.\n         */\n        this.forceIrradianceInFragment = false;\n        /**\n         * Number of Simultaneous lights allowed on the material.\n         */\n        this.maxSimultaneousLights = 4;\n        /**\n         * If sets to true, x component of normal map value will invert (x = 1.0 - x).\n         */\n        this.invertNormalMapX = false;\n        /**\n         * If sets to true, y component of normal map value will invert (y = 1.0 - y).\n         */\n        this.invertNormalMapY = false;\n        /**\n         * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\n         */\n        this.twoSidedLighting = false;\n        /**\n         * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\n         * And/Or occlude the blended part. (alpha is converted to gamma to compute the fresnel)\n         */\n        this.useAlphaFresnel = false;\n        /**\n         * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\n         * And/Or occlude the blended part. (alpha stays linear to compute the fresnel)\n         */\n        this.useLinearAlphaFresnel = false;\n        /**\n         * Let user defines the brdf lookup texture used for IBL.\n         * A default 8bit version is embedded but you could point at :\n         * * Default texture: https://assets.babylonjs.com/environments/correlatedMSBRDF_RGBD.png\n         * * Default 16bit pixel depth texture: https://assets.babylonjs.com/environments/correlatedMSBRDF.dds\n         * * LEGACY Default None correlated https://assets.babylonjs.com/environments/uncorrelatedBRDF_RGBD.png\n         * * LEGACY Default None correlated 16bit pixel depth https://assets.babylonjs.com/environments/uncorrelatedBRDF.dds\n         */\n        this.environmentBRDFTexture = null;\n        /**\n         * Force normal to face away from face.\n         */\n        this.forceNormalForward = false;\n        /**\n         * Enables specular anti aliasing in the PBR shader.\n         * It will both interacts on the Geometry for analytical and IBL lighting.\n         * It also prefilter the roughness map based on the normalmap values.\n         */\n        this.enableSpecularAntiAliasing = false;\n        /**\n         * This parameters will enable/disable Horizon occlusion to prevent normal maps to look shiny when the normal\n         * makes the reflect vector face the model (under horizon).\n         */\n        this.useHorizonOcclusion = true;\n        /**\n         * This parameters will enable/disable radiance occlusion by preventing the radiance to lit\n         * too much the area relying on ambient texture to define their ambient occlusion.\n         */\n        this.useRadianceOcclusion = true;\n        /**\n         * If set to true, no lighting calculations will be applied.\n         */\n        this.unlit = false;\n        /**\n         * If sets to true, the decal map will be applied after the detail map. Else, it is applied before (default: false)\n         */\n        this.applyDecalMapAfterDetailMap = false;\n        /**\n         * This stores the direct, emissive, environment, and specular light intensities into a Vector4.\n         */\n        this._lightingInfos = new Vector4(this.directIntensity, 1.0, this.environmentIntensity, 1.0);\n        /**\n         * Stores the radiance (and, possibly, irradiance) values in a texture.\n         * @internal\n         */\n        this._radianceTexture = null;\n        /**\n         * Specifies that the specular weight will be read from the alpha channel.\n         * This is for compatibility with glTF's KHR_materials_specular extension.\n         * @internal\n         */\n        this._useSpecularWeightFromAlpha = false;\n        /**\n         * Specifies that the specular weight will be read from the alpha channel of the specular color texture.\n         * This is for compatibility with glTF's KHR_materials_specular extension.\n         * @internal\n         */\n        this._useSpecularWeightFromSpecularColorTexture = false;\n        /**\n         * Specifies if the material uses anisotropy weight read from the geometry tangent texture's blue channel.\n         * This is for compatibility with glTF's anisotropy extension.\n         * @internal\n         */\n        this._useSpecularRoughnessAnisotropyFromTangentTexture = false;\n        /**\n         * Specifies if the material uses coat anisotropy weight read from the coat's geometry tangent texture's blue channel.\n         * This is for compatibility with glTF's clearcoat_anisotropy extension.\n         * @internal\n         */\n        this._useCoatRoughnessAnisotropyFromTangentTexture = false;\n        /**\n         * Assume the anisotropy data is stored in the format specified by\n         * KHR_materials_anisotropy.\n         * @internal\n         */\n        this._useGltfStyleAnisotropy = false;\n        /**\n         * This parameters will enable/disable Horizon occlusion to prevent normal maps to look shiny when the normal\n         * makes the reflect vector face the model (under horizon).\n         * @internal\n         */\n        this._useHorizonOcclusion = true;\n        /**\n         * This parameters will enable/disable radiance occlusion by preventing the radiance to lit\n         * too much the area relying on ambient texture to define their ambient occlusion.\n         * @internal\n         */\n        this._useRadianceOcclusion = true;\n        /**\n         * Specifies that the alpha is coming from the base color texture's alpha channel.\n         * This is for compatibility with glTF.\n         * @internal\n         */\n        this._useAlphaFromBaseColorTexture = false;\n        /**\n         * Specifies if the metallic texture contains the ambient occlusion information in its red channel.\n         * This is for compatibility with glTF.\n         * @internal\n         */\n        this._useAmbientOcclusionFromMetallicTextureRed = false;\n        /**\n         * Specifies if the metallic texture contains the roughness information in its green channel.\n         * This is for compatibility with glTF.\n         * @internal\n         */\n        this._useRoughnessFromMetallicTextureGreen = false;\n        /**\n         * Specifies if the metallic texture contains the metallic information in its blue channel.\n         * This is for compatibility with glTF.\n         * @internal\n         */\n        this._useMetallicFromMetallicTextureBlue = false;\n        /**\n         * Specifies if the thin film thickness is stored in the green channel of the thin film thickness texture.\n         */\n        this._useThinFilmThicknessFromTextureGreen = false;\n        /**\n         * Defines the  falloff type used in this material.\n         * It by default is Physical.\n         * @internal\n         */\n        this._lightFalloff = Material.LIGHTFALLOFF_PHYSICAL;\n        /**\n         * Allows using an object space normal map (instead of tangent space).\n         * @internal\n         */\n        this._useObjectSpaceNormalMap = false;\n        /**\n         * Allows using the normal map in parallax mode.\n         * @internal\n         */\n        this._useParallax = false;\n        /**\n         * Allows using the normal map in parallax occlusion mode.\n         * @internal\n         */\n        this._useParallaxOcclusion = false;\n        /**\n         * Controls the scale bias of the parallax mode.\n         * @internal\n         */\n        this._parallaxScaleBias = 0.05;\n        /**\n         * If sets to true, disables all the lights affecting the material.\n         * @internal\n         */\n        this._disableLighting = false;\n        /**\n         * Number of Simultaneous lights allowed on the material.\n         * @internal\n         */\n        this._maxSimultaneousLights = 4;\n        /**\n         * If sets to true, x component of normal map value will be inverted (x = 1.0 - x).\n         * @internal\n         */\n        this._invertNormalMapX = false;\n        /**\n         * If sets to true, y component of normal map value will be inverted (y = 1.0 - y).\n         * @internal\n         */\n        this._invertNormalMapY = false;\n        /**\n         * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\n         * @internal\n         */\n        this._twoSidedLighting = false;\n        /**\n         * Defines the alpha limits in alpha test mode.\n         * @internal\n         */\n        this._alphaCutOff = 0.4;\n        /**\n         * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\n         * And/Or occlude the blended part. (alpha is converted to gamma to compute the fresnel)\n         * @internal\n         */\n        this._useAlphaFresnel = false;\n        /**\n         * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\n         * And/Or occlude the blended part. (alpha stays linear to compute the fresnel)\n         * @internal\n         */\n        this._useLinearAlphaFresnel = false;\n        /**\n         * Specifies the environment BRDF texture used to compute the scale and offset roughness values\n         * from cos theta and roughness:\n         * http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\n         * @internal\n         */\n        this._environmentBRDFTexture = null;\n        /**\n         * Force the shader to compute irradiance in the fragment shader in order to take normal mapping into account.\n         * @internal\n         */\n        this._forceIrradianceInFragment = false;\n        this._realTimeFiltering = false;\n        this._realTimeFilteringQuality = Constants.TEXTURE_FILTERING_QUALITY_LOW;\n        /**\n         * Force normal to face away from face.\n         * @internal\n         */\n        this._forceNormalForward = false;\n        /**\n         * Enables specular anti aliasing in the PBR shader.\n         * It will both interacts on the Geometry for analytical and IBL lighting.\n         * It also prefilter the roughness map based on the normalmap values.\n         * @internal\n         */\n        this._enableSpecularAntiAliasing = false;\n        /**\n         * Stores the available render targets.\n         */\n        this._renderTargets = new SmartArray(16);\n        /**\n         * If set to true, no lighting calculations will be applied.\n         */\n        this._unlit = false;\n        /**\n         * If sets to true, the decal map will be applied after the detail map. Else, it is applied before (default: false)\n         */\n        this._applyDecalMapAfterDetailMap = false;\n        this._debugMode = 0;\n        this._shadersLoaded = false;\n        this._breakShaderLoadedCheck = false;\n        /**\n         * @internal\n         * This is reserved for the inspector.\n         * Defines the material debug mode.\n         * It helps seeing only some components of the material while troubleshooting.\n         */\n        this.debugMode = 0;\n        /**\n         * @internal\n         * This is reserved for the inspector.\n         * Specify from where on screen the debug mode should start.\n         * The value goes from -1 (full screen) to 1 (not visible)\n         * It helps with side by side comparison against the final render\n         * This defaults to -1\n         */\n        this.debugLimit = -1;\n        /**\n         * @internal\n         * This is reserved for the inspector.\n         * As the default viewing range might not be enough (if the ambient is really small for instance)\n         * You can use the factor to better multiply the final value.\n         */\n        this.debugFactor = 1;\n        this._cacheHasRenderTargetTextures = false;\n        this._transparencyMode = Material.MATERIAL_OPAQUE;\n        // TODO: Check if we're running WebGL 2.0 or above\n        if (this.getScene() && !this.getScene()?.getEngine().isWebGPU && this.getScene().getEngine().webGLVersion < 2) {\n            Logger.Error(\"OpenPBRMaterial: WebGL 2.0 or above is required for this material.\");\n        }\n        if (!OpenPBRMaterial._noiseTextures[this.getScene().uniqueId]) {\n            OpenPBRMaterial._noiseTextures[this.getScene().uniqueId] = new Texture(\"https://assets.babylonjs.com/textures/blue_noise/blue_noise_rgb.png\", this.getScene(), false, true, Constants.TEXTURE_NEAREST_SAMPLINGMODE);\n            this.getScene().onDisposeObservable.addOnce(() => {\n                OpenPBRMaterial._noiseTextures[this.getScene().uniqueId]?.dispose();\n                delete OpenPBRMaterial._noiseTextures[this.getScene().uniqueId];\n            });\n        }\n        // Setup the default processing configuration to the scene.\n        this._attachImageProcessingConfiguration(null);\n        this.getRenderTargetTextures = () => {\n            this._renderTargets.reset();\n            if (MaterialFlags.ReflectionTextureEnabled && this._radianceTexture && this._radianceTexture.isRenderTarget) {\n                this._renderTargets.push(this._radianceTexture);\n            }\n            this._eventInfo.renderTargets = this._renderTargets;\n            this._callbackPluginEventFillRenderTargetTextures(this._eventInfo);\n            return this._renderTargets;\n        };\n        this._environmentBRDFTexture = GetEnvironmentBRDFTexture(this.getScene());\n        this.prePassConfiguration = new PrePassConfiguration();\n        // Build the internal property list that can be used to generate and update the uniform buffer\n        this._propertyList = {};\n        for (const key of Object.getOwnPropertyNames(this)) {\n            const value = this[key];\n            if (value instanceof Property) {\n                this._propertyList[key] = value;\n            }\n        }\n        // Build the internal uniforms list that is used for combining and updating\n        // property values in the uniform buffer\n        const propertyKeys = Object.keys(this._propertyList);\n        propertyKeys.forEach((key) => {\n            const prop = this._propertyList[key];\n            let uniform = this._uniformsList[prop.targetUniformName];\n            if (!uniform) {\n                uniform = new Uniform(prop.targetUniformName, prop.targetUniformComponentNum);\n                this._uniformsList[prop.targetUniformName] = uniform;\n            }\n            else if (uniform.numComponents !== prop.targetUniformComponentNum) {\n                Logger.Error(`Uniform ${prop.targetUniformName} already exists of size ${uniform.numComponents}, but trying to set it to ${prop.targetUniformComponentNum}.`);\n            }\n            uniform.linkedProperties[prop.name] = prop;\n        });\n        // Build the internal list of samplers\n        this._samplersList = {};\n        for (const key of Object.getOwnPropertyNames(this)) {\n            const value = this[key];\n            if (value instanceof Sampler) {\n                this._samplersList[key] = value;\n            }\n        }\n        // For each sampler in _samplersList, add defines to be added to OpenPBRMaterialDefines\n        for (const samplerKey in this._samplersList) {\n            const sampler = this._samplersList[samplerKey];\n            const defineName = sampler.textureDefine;\n            this._samplerDefines[defineName] = { type: \"boolean\", default: false };\n            this._samplerDefines[defineName + \"DIRECTUV\"] = { type: \"number\", default: 0 };\n            this._samplerDefines[defineName + \"_GAMMA\"] = { type: \"boolean\", default: false };\n        }\n        // Arg. Why do I have to add these references to get rid of the linting errors?\n        this._baseWeight;\n        this._baseWeightTexture;\n        this._baseColor;\n        this._baseColorTexture;\n        this._baseDiffuseRoughness;\n        this._baseDiffuseRoughnessTexture;\n        this._baseMetalness;\n        this._baseMetalnessTexture;\n        this._specularWeight;\n        this._specularWeightTexture;\n        this._specularColor;\n        this._specularColorTexture;\n        this._specularRoughness;\n        this._specularIor;\n        this._specularRoughnessTexture;\n        this._specularRoughnessAnisotropy;\n        this._specularRoughnessAnisotropyTexture;\n        this._coatWeight;\n        this._coatWeightTexture;\n        this._coatColor;\n        this._coatColorTexture;\n        this._coatRoughness;\n        this._coatRoughnessTexture;\n        this._coatRoughnessAnisotropy;\n        this._coatRoughnessAnisotropyTexture;\n        this._coatIor;\n        this._coatDarkening;\n        this._coatDarkeningTexture;\n        this._geometryNormalTexture;\n        this._geometryTangent;\n        this._geometryTangentTexture;\n        this._geometryCoatNormalTexture;\n        this._geometryCoatTangent;\n        this._geometryCoatTangentTexture;\n        this._geometryOpacity;\n        this._geometryOpacityTexture;\n        this._thinFilmWeight;\n        this._thinFilmWeightTexture;\n        this._thinFilmThickness;\n        this._thinFilmThicknessMin;\n        this._thinFilmThicknessTexture;\n        this._thinFilmIor;\n        this._emissionLuminance;\n        this._emissionColor;\n        this._emissionColorTexture;\n        this._ambientOcclusionTexture;\n    }\n    /**\n     * Gets a boolean indicating that current material needs to register RTT\n     */\n    get hasRenderTargetTextures() {\n        if (MaterialFlags.ReflectionTextureEnabled && this._radianceTexture && this._radianceTexture.isRenderTarget) {\n            return true;\n        }\n        return this._cacheHasRenderTargetTextures;\n    }\n    /**\n     * Can this material render to prepass\n     */\n    get isPrePassCapable() {\n        return !this.disableDepthWrite;\n    }\n    /**\n     * @returns the name of the material class.\n     */\n    getClassName() {\n        return \"OpenPBRMaterial\";\n    }\n    get transparencyMode() {\n        return this._transparencyMode;\n    }\n    set transparencyMode(value) {\n        if (this._transparencyMode === value) {\n            return;\n        }\n        this._transparencyMode = value;\n        this._markAllSubMeshesAsTexturesAndMiscDirty();\n    }\n    /**\n     * @returns whether or not the alpha value of the albedo texture should be used for alpha blending.\n     */\n    _shouldUseAlphaFromBaseColorTexture() {\n        return this._hasAlphaChannel() && this._transparencyMode !== Material.MATERIAL_OPAQUE && !this.geometryOpacityTexture;\n    }\n    /**\n     * @returns whether or not there is a usable alpha channel for transparency.\n     */\n    _hasAlphaChannel() {\n        return (this.baseColorTexture != null && this.baseColorTexture.hasAlpha && this._useAlphaFromBaseColorTexture) || this.geometryOpacityTexture != null;\n    }\n    /**\n     * Makes a duplicate of the current material.\n     * @param name - name to use for the new material.\n     * @param cloneTexturesOnlyOnce - if a texture is used in more than one channel (e.g baseColor and opacity), only clone it once and reuse it on the other channels. Default false.\n     * @param rootUrl defines the root URL to use to load textures\n     * @returns cloned material instance\n     */\n    clone(name, cloneTexturesOnlyOnce = true, rootUrl = \"\") {\n        const clone = SerializationHelper.Clone(() => new OpenPBRMaterial(name, this.getScene()), this, { cloneTexturesOnlyOnce });\n        clone.id = name;\n        clone.name = name;\n        this.stencil.copyTo(clone.stencil);\n        this._clonePlugins(clone, rootUrl);\n        return clone;\n    }\n    /**\n     * Serializes this PBR Material.\n     * @returns - An object with the serialized material.\n     */\n    serialize() {\n        const serializationObject = super.serialize();\n        serializationObject.customType = \"BABYLON.OpenPBRMaterial\";\n        return serializationObject;\n    }\n    // Statics\n    /**\n     * Parses a PBR Material from a serialized object.\n     * @param source - Serialized object.\n     * @param scene - BJS scene instance.\n     * @param rootUrl - url for the scene object\n     * @returns - OpenPBRMaterial\n     */\n    static Parse(source, scene, rootUrl) {\n        const material = SerializationHelper.Parse(() => new OpenPBRMaterial(source.name, scene), source, scene, rootUrl);\n        if (source.stencil) {\n            material.stencil.parse(source.stencil, scene, rootUrl);\n        }\n        Material._ParsePlugins(source, material, scene, rootUrl);\n        return material;\n    }\n    /**\n     * Force shader compilation\n     * @param mesh - Define the mesh we want to force the compilation for\n     * @param onCompiled - Define a callback triggered when the compilation completes\n     * @param options - Define the options used to create the compilation\n     */\n    forceCompilation(mesh, onCompiled, options) {\n        const localOptions = {\n            clipPlane: false,\n            useInstances: false,\n            ...options,\n        };\n        if (!this._uniformBufferLayoutBuilt) {\n            this.buildUniformLayout();\n        }\n        this._callbackPluginEventGeneric(4 /* MaterialPluginEvent.GetDefineNames */, this._eventInfo);\n        const checkReady = () => {\n            if (this._breakShaderLoadedCheck) {\n                return;\n            }\n            const defines = new OpenPBRMaterialDefines({\n                ...(this._eventInfo.defineNames || {}),\n                ...(this._samplerDefines || {}),\n            });\n            const effect = this._prepareEffect(mesh, mesh, defines, undefined, undefined, localOptions.useInstances, localOptions.clipPlane);\n            if (this._onEffectCreatedObservable) {\n                onCreatedEffectParameters.effect = effect;\n                onCreatedEffectParameters.subMesh = null;\n                this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\n            }\n            if (effect.isReady()) {\n                if (onCompiled) {\n                    onCompiled(this);\n                }\n            }\n            else {\n                effect.onCompileObservable.add(() => {\n                    if (onCompiled) {\n                        onCompiled(this);\n                    }\n                });\n            }\n        };\n        checkReady();\n    }\n    /**\n     * Specifies that the submesh is ready to be used.\n     * @param mesh - BJS mesh.\n     * @param subMesh - A submesh of the BJS mesh.  Used to check if it is ready.\n     * @param useInstances - Specifies that instances should be used.\n     * @returns - boolean indicating that the submesh is ready or not.\n     */\n    isReadyForSubMesh(mesh, subMesh, useInstances) {\n        if (!this._uniformBufferLayoutBuilt) {\n            this.buildUniformLayout();\n        }\n        const drawWrapper = subMesh._drawWrapper;\n        if (drawWrapper.effect && this.isFrozen) {\n            if (drawWrapper._wasPreviouslyReady && drawWrapper._wasPreviouslyUsingInstances === useInstances) {\n                return true;\n            }\n        }\n        if (!subMesh.materialDefines) {\n            this._callbackPluginEventGeneric(4 /* MaterialPluginEvent.GetDefineNames */, this._eventInfo);\n            subMesh.materialDefines = new OpenPBRMaterialDefines({\n                ...(this._eventInfo.defineNames || {}),\n                ...(this._samplerDefines || {}),\n            });\n        }\n        const defines = subMesh.materialDefines;\n        if (this._isReadyForSubMesh(subMesh)) {\n            return true;\n        }\n        const scene = this.getScene();\n        const engine = scene.getEngine();\n        if (defines._areTexturesDirty) {\n            this._eventInfo.hasRenderTargetTextures = false;\n            this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);\n            this._cacheHasRenderTargetTextures = this._eventInfo.hasRenderTargetTextures;\n            if (scene.texturesEnabled) {\n                // Loop through samplers, check MaterialFlag and whether the texture is ready or not.\n                for (const key in this._samplersList) {\n                    const sampler = this._samplersList[key];\n                    if (sampler.value) {\n                        if (!sampler.value.isReadyOrNotBlocking()) {\n                            return false;\n                        }\n                    }\n                }\n                const radianceTexture = this._getRadianceTexture();\n                if (radianceTexture && MaterialFlags.ReflectionTextureEnabled) {\n                    if (!radianceTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    if (radianceTexture.irradianceTexture) {\n                        if (!radianceTexture.irradianceTexture.isReadyOrNotBlocking()) {\n                            return false;\n                        }\n                    }\n                    else {\n                        // Not ready until spherical are ready too.\n                        if (!radianceTexture.sphericalPolynomial && radianceTexture.getInternalTexture()?._sphericalPolynomialPromise) {\n                            return false;\n                        }\n                    }\n                }\n                if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\n                    // This is blocking.\n                    if (!this._environmentBRDFTexture.isReady()) {\n                        return false;\n                    }\n                }\n                if (OpenPBRMaterial._noiseTextures[scene.uniqueId]) {\n                    if (!OpenPBRMaterial._noiseTextures[scene.uniqueId].isReady()) {\n                        return false;\n                    }\n                }\n            }\n        }\n        this._eventInfo.isReadyForSubMesh = true;\n        this._eventInfo.defines = defines;\n        this._eventInfo.subMesh = subMesh;\n        this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);\n        if (!this._eventInfo.isReadyForSubMesh) {\n            return false;\n        }\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\n            if (!this._imageProcessingConfiguration.isReady()) {\n                return false;\n            }\n        }\n        // Check if Area Lights have LTC texture.\n        if (defines[\"AREALIGHTUSED\"]) {\n            for (let index = 0; index < mesh.lightSources.length; index++) {\n                if (!mesh.lightSources[index]._isReady()) {\n                    return false;\n                }\n            }\n        }\n        if (!engine.getCaps().standardDerivatives && !mesh.isVerticesDataPresent(VertexBuffer.NormalKind)) {\n            mesh.createNormals(true);\n            Logger.Warn(\"OpenPBRMaterial: Normals have been created for the mesh: \" + mesh.name);\n        }\n        const previousEffect = subMesh.effect;\n        const lightDisposed = defines._areLightsDisposed;\n        let effect = this._prepareEffect(mesh, subMesh.getRenderingMesh(), defines, this.onCompiled, this.onError, useInstances, null);\n        let forceWasNotReadyPreviously = false;\n        if (effect) {\n            if (this._onEffectCreatedObservable) {\n                onCreatedEffectParameters.effect = effect;\n                onCreatedEffectParameters.subMesh = subMesh;\n                this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\n            }\n            // Use previous effect while new one is compiling\n            if (this.allowShaderHotSwapping && previousEffect && !effect.isReady()) {\n                effect = previousEffect;\n                defines.markAsUnprocessed();\n                forceWasNotReadyPreviously = this.isFrozen;\n                if (lightDisposed) {\n                    // re register in case it takes more than one frame.\n                    defines._areLightsDisposed = true;\n                    return false;\n                }\n            }\n            else {\n                scene.resetCachedMaterial();\n                subMesh.setEffect(effect, defines, this._materialContext);\n            }\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n        defines._renderId = scene.getRenderId();\n        drawWrapper._wasPreviouslyReady = forceWasNotReadyPreviously ? false : true;\n        drawWrapper._wasPreviouslyUsingInstances = !!useInstances;\n        this._checkScenePerformancePriority();\n        return true;\n    }\n    /**\n     * Initializes the uniform buffer layout for the shader.\n     */\n    buildUniformLayout() {\n        // Order is important !\n        const ubo = this._uniformBuffer;\n        ubo.addUniform(\"vTangentSpaceParams\", 2);\n        ubo.addUniform(\"vLightingIntensity\", 4);\n        ubo.addUniform(\"pointSize\", 1);\n        ubo.addUniform(\"vDebugMode\", 2);\n        ubo.addUniform(\"cameraInfo\", 4);\n        PrepareUniformLayoutForIBL(ubo, true, true, true, true, true);\n        Object.values(this._uniformsList).forEach((uniform) => {\n            ubo.addUniform(uniform.name, uniform.numComponents);\n        });\n        Object.values(this._samplersList).forEach((sampler) => {\n            ubo.addUniform(sampler.samplerInfoName, 2);\n            ubo.addUniform(sampler.samplerMatrixName, 16);\n        });\n        super.buildUniformLayout();\n    }\n    /**\n     * Binds the submesh data.\n     * @param world - The world matrix.\n     * @param mesh - The BJS mesh.\n     * @param subMesh - A submesh of the BJS mesh.\n     */\n    bindForSubMesh(world, mesh, subMesh) {\n        const scene = this.getScene();\n        const defines = subMesh.materialDefines;\n        if (!defines) {\n            return;\n        }\n        const effect = subMesh.effect;\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n        // Matrices Mesh.\n        mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\n        mesh.transferToEffect(world);\n        const engine = scene.getEngine();\n        // Binding unconditionally\n        this._uniformBuffer.bindToEffect(effect, \"Material\");\n        this.prePassConfiguration.bindForSubMesh(this._activeEffect, scene, mesh, world, this.isFrozen);\n        MaterialHelperGeometryRendering.Bind(engine.currentRenderPassId, this._activeEffect, mesh, world, this);\n        const camera = scene.activeCamera;\n        if (camera) {\n            this._uniformBuffer.updateFloat4(\"cameraInfo\", camera.minZ, camera.maxZ, 0, 0);\n        }\n        else {\n            this._uniformBuffer.updateFloat4(\"cameraInfo\", 0, 0, 0, 0);\n        }\n        this._eventInfo.subMesh = subMesh;\n        this._callbackPluginEventHardBindForSubMesh(this._eventInfo);\n        // Normal Matrix\n        if (defines.OBJECTSPACE_NORMALMAP) {\n            world.toNormalMatrix(this._normalMatrix);\n            this.bindOnlyNormalMatrix(this._normalMatrix);\n        }\n        const mustRebind = this._mustRebind(scene, effect, subMesh, mesh.visibility);\n        // Bones\n        BindBonesParameters(mesh, this._activeEffect, this.prePassConfiguration);\n        let radianceTexture = null;\n        const ubo = this._uniformBuffer;\n        if (mustRebind) {\n            this.bindViewProjection(effect);\n            radianceTexture = this._getRadianceTexture();\n            if (!ubo.useUbo || !this.isFrozen || !ubo.isSync || subMesh._drawWrapper._forceRebindOnNextCall) {\n                // Texture uniforms\n                if (scene.texturesEnabled) {\n                    // Loop through samplers and bind info and matrix for each texture.\n                    for (const key in this._samplersList) {\n                        const sampler = this._samplersList[key];\n                        if (sampler.value) {\n                            ubo.updateFloat2(sampler.samplerInfoName, sampler.value.coordinatesIndex, sampler.value.level);\n                            BindTextureMatrix(sampler.value, ubo, sampler.samplerPrefix);\n                        }\n                    }\n                    if (this.geometryNormalTexture) {\n                        if (scene._mirroredCameraPosition) {\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? 1.0 : -1.0, this._invertNormalMapY ? 1.0 : -1.0);\n                        }\n                        else {\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? -1.0 : 1.0, this._invertNormalMapY ? -1.0 : 1.0);\n                        }\n                    }\n                    BindIBLParameters(scene, defines, ubo, Color3.White(), radianceTexture, this.realTimeFiltering, true, true, true, true, true);\n                }\n                // Point size\n                if (this.pointsCloud) {\n                    ubo.updateFloat(\"pointSize\", this.pointSize);\n                }\n                Object.values(this._uniformsList).forEach((uniform) => {\n                    // If the property actually defines a uniform, update it.\n                    if (uniform.numComponents === 4) {\n                        uniform.populateVectorFromLinkedProperties(TmpVectors.Vector4[0]);\n                        ubo.updateVector4(uniform.name, TmpVectors.Vector4[0]);\n                    }\n                    else if (uniform.numComponents === 3) {\n                        uniform.populateVectorFromLinkedProperties(TmpVectors.Vector3[0]);\n                        ubo.updateVector3(uniform.name, TmpVectors.Vector3[0]);\n                    }\n                    else if (uniform.numComponents === 2) {\n                        uniform.populateVectorFromLinkedProperties(TmpVectors.Vector2[0]);\n                        ubo.updateFloat2(uniform.name, TmpVectors.Vector2[0].x, TmpVectors.Vector2[0].y);\n                    }\n                    else if (uniform.numComponents === 1) {\n                        ubo.updateFloat(uniform.name, uniform.linkedProperties[Object.keys(uniform.linkedProperties)[0]].value);\n                    }\n                });\n                // Misc\n                this._lightingInfos.x = this.directIntensity;\n                this._lightingInfos.y = this.emissionLuminance;\n                this._lightingInfos.z = this.environmentIntensity * scene.environmentIntensity;\n                this._lightingInfos.w = 1.0; // This is used to be _specularIntensity.\n                ubo.updateVector4(\"vLightingIntensity\", this._lightingInfos);\n                ubo.updateFloat2(\"vDebugMode\", this.debugLimit, this.debugFactor);\n            }\n            // Textures\n            if (scene.texturesEnabled) {\n                // Loop through samplers and set textures\n                for (const key in this._samplersList) {\n                    const sampler = this._samplersList[key];\n                    if (sampler.value) {\n                        ubo.setTexture(sampler.samplerName, sampler.value);\n                    }\n                }\n                BindIBLSamplers(scene, defines, ubo, radianceTexture, this.realTimeFiltering);\n                if (defines.ENVIRONMENTBRDF) {\n                    ubo.setTexture(\"environmentBrdfSampler\", this._environmentBRDFTexture);\n                }\n                if (defines.ANISOTROPIC) {\n                    ubo.setTexture(\"blueNoiseSampler\", OpenPBRMaterial._noiseTextures[this.getScene().uniqueId]);\n                }\n            }\n            // OIT with depth peeling\n            if (this.getScene().useOrderIndependentTransparency && this.needAlphaBlendingForMesh(mesh)) {\n                this.getScene().depthPeelingRenderer.bind(effect);\n            }\n            this._eventInfo.subMesh = subMesh;\n            this._callbackPluginEventBindForSubMesh(this._eventInfo);\n            // Clip plane\n            BindClipPlane(this._activeEffect, this, scene);\n            this.bindEyePosition(effect);\n        }\n        else if (scene.getEngine()._features.needToAlwaysBindUniformBuffers) {\n            this._needToBindSceneUbo = true;\n        }\n        if (mustRebind || !this.isFrozen) {\n            // Lights\n            if (scene.lightsEnabled && !this._disableLighting) {\n                BindLights(scene, mesh, this._activeEffect, defines, this._maxSimultaneousLights);\n            }\n            // View\n            if ((scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) || radianceTexture || mesh.receiveShadows || defines.PREPASS) {\n                this.bindView(effect);\n            }\n            // Fog\n            BindFogParameters(scene, mesh, this._activeEffect, true);\n            // Morph targets\n            if (defines.NUM_MORPH_INFLUENCERS) {\n                BindMorphTargetParameters(mesh, this._activeEffect);\n            }\n            if (defines.BAKED_VERTEX_ANIMATION_TEXTURE) {\n                mesh.bakedVertexAnimationManager?.bind(effect, defines.INSTANCES);\n            }\n            // image processing\n            this._imageProcessingConfiguration.bind(this._activeEffect);\n            // Log. depth\n            BindLogDepth(defines, this._activeEffect, scene);\n        }\n        this._afterBind(mesh, this._activeEffect, subMesh);\n        ubo.update();\n    }\n    /**\n     * Returns the animatable textures.\n     * If material have animatable metallic texture, then reflectivity texture will not be returned, even if it has animations.\n     * @returns - Array of animatable textures.\n     */\n    getAnimatables() {\n        const results = super.getAnimatables();\n        // Loop through samplers and push animated textures to list.\n        for (const key in this._samplersList) {\n            const sampler = this._samplersList[key];\n            if (sampler.value && sampler.value.animations && sampler.value.animations.length > 0) {\n                results.push(sampler.value);\n            }\n        }\n        if (this._radianceTexture && this._radianceTexture.animations && this._radianceTexture.animations.length > 0) {\n            results.push(this._radianceTexture);\n        }\n        return results;\n    }\n    /**\n     * Returns an array of the actively used textures.\n     * @returns - Array of BaseTextures\n     */\n    getActiveTextures() {\n        const activeTextures = super.getActiveTextures();\n        // Loop through samplers and push active textures\n        for (const key in this._samplersList) {\n            const sampler = this._samplersList[key];\n            if (sampler.value) {\n                activeTextures.push(sampler.value);\n            }\n        }\n        if (this._radianceTexture) {\n            activeTextures.push(this._radianceTexture);\n        }\n        return activeTextures;\n    }\n    /**\n     * Checks to see if a texture is used in the material.\n     * @param texture - Base texture to use.\n     * @returns - Boolean specifying if a texture is used in the material.\n     */\n    hasTexture(texture) {\n        if (super.hasTexture(texture)) {\n            return true;\n        }\n        // Loop through samplers and check each texture for equality\n        for (const key in this._samplersList) {\n            const sampler = this._samplersList[key];\n            if (sampler.value === texture) {\n                return true;\n            }\n        }\n        if (this._radianceTexture === texture) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Sets the required values to the prepass renderer.\n     * It can't be sets when subsurface scattering of this material is disabled.\n     * When scene have ability to enable subsurface prepass effect, it will enable.\n     * @returns - If prepass is enabled or not.\n     */\n    setPrePassRenderer() {\n        return false;\n    }\n    /**\n     * Disposes the resources of the material.\n     * @param forceDisposeEffect - Forces the disposal of effects.\n     * @param forceDisposeTextures - Forces the disposal of all textures.\n     */\n    dispose(forceDisposeEffect, forceDisposeTextures) {\n        this._breakShaderLoadedCheck = true;\n        if (forceDisposeTextures) {\n            if (this._environmentBRDFTexture && this.getScene().environmentBRDFTexture !== this._environmentBRDFTexture) {\n                this._environmentBRDFTexture.dispose();\n            }\n            // Loop through samplers and dispose the textures\n            for (const key in this._samplersList) {\n                const sampler = this._samplersList[key];\n                sampler.value?.dispose();\n            }\n            this._radianceTexture?.dispose();\n        }\n        this._renderTargets.dispose();\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n        }\n        super.dispose(forceDisposeEffect, forceDisposeTextures);\n    }\n    /**\n     * Returns the texture used for reflections.\n     * @returns - Reflection texture if present.  Otherwise, returns the environment texture.\n     */\n    _getRadianceTexture() {\n        if (this._radianceTexture) {\n            return this._radianceTexture;\n        }\n        return this.getScene().environmentTexture;\n    }\n    _prepareEffect(mesh, renderingMesh, defines, onCompiled = null, onError = null, useInstances = null, useClipPlane = null) {\n        this._prepareDefines(mesh, renderingMesh, defines, useInstances, useClipPlane);\n        if (!defines.isDirty) {\n            return null;\n        }\n        defines.markAsProcessed();\n        const scene = this.getScene();\n        const engine = scene.getEngine();\n        // Fallbacks\n        const fallbacks = new EffectFallbacks();\n        let fallbackRank = 0;\n        if (defines.USESPHERICALINVERTEX) {\n            fallbacks.addFallback(fallbackRank++, \"USESPHERICALINVERTEX\");\n        }\n        if (defines.FOG) {\n            fallbacks.addFallback(fallbackRank, \"FOG\");\n        }\n        if (defines.SPECULARAA) {\n            fallbacks.addFallback(fallbackRank, \"SPECULARAA\");\n        }\n        if (defines.POINTSIZE) {\n            fallbacks.addFallback(fallbackRank, \"POINTSIZE\");\n        }\n        if (defines.LOGARITHMICDEPTH) {\n            fallbacks.addFallback(fallbackRank, \"LOGARITHMICDEPTH\");\n        }\n        if (defines.PARALLAX) {\n            fallbacks.addFallback(fallbackRank, \"PARALLAX\");\n        }\n        if (defines.PARALLAX_RHS) {\n            fallbacks.addFallback(fallbackRank, \"PARALLAX_RHS\");\n        }\n        if (defines.PARALLAXOCCLUSION) {\n            fallbacks.addFallback(fallbackRank++, \"PARALLAXOCCLUSION\");\n        }\n        if (defines.ENVIRONMENTBRDF) {\n            fallbacks.addFallback(fallbackRank++, \"ENVIRONMENTBRDF\");\n        }\n        if (defines.TANGENT) {\n            fallbacks.addFallback(fallbackRank++, \"TANGENT\");\n        }\n        fallbackRank = HandleFallbacksForShadows(defines, fallbacks, this._maxSimultaneousLights, fallbackRank++);\n        if (defines.SPECULARTERM) {\n            fallbacks.addFallback(fallbackRank++, \"SPECULARTERM\");\n        }\n        if (defines.USESPHERICALFROMREFLECTIONMAP) {\n            fallbacks.addFallback(fallbackRank++, \"USESPHERICALFROMREFLECTIONMAP\");\n        }\n        if (defines.USEIRRADIANCEMAP) {\n            fallbacks.addFallback(fallbackRank++, \"USEIRRADIANCEMAP\");\n        }\n        if (defines.NORMAL) {\n            fallbacks.addFallback(fallbackRank++, \"NORMAL\");\n        }\n        if (defines.VERTEXCOLOR) {\n            fallbacks.addFallback(fallbackRank++, \"VERTEXCOLOR\");\n        }\n        if (defines.MORPHTARGETS) {\n            fallbacks.addFallback(fallbackRank++, \"MORPHTARGETS\");\n        }\n        if (defines.MULTIVIEW) {\n            fallbacks.addFallback(0, \"MULTIVIEW\");\n        }\n        //Attributes\n        const attribs = [VertexBuffer.PositionKind];\n        if (defines.NORMAL) {\n            attribs.push(VertexBuffer.NormalKind);\n        }\n        if (defines.TANGENT) {\n            attribs.push(VertexBuffer.TangentKind);\n        }\n        for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\n            if (defines[\"UV\" + i]) {\n                attribs.push(`uv${i === 1 ? \"\" : i}`);\n            }\n        }\n        if (defines.VERTEXCOLOR) {\n            attribs.push(VertexBuffer.ColorKind);\n        }\n        PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\n        PrepareAttributesForInstances(attribs, defines);\n        PrepareAttributesForMorphTargets(attribs, mesh, defines);\n        PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\n        let shaderName = \"openpbr\";\n        const uniforms = [\n            \"world\",\n            \"view\",\n            \"viewProjection\",\n            \"vEyePosition\",\n            \"vLightsType\",\n            \"visibility\",\n            \"vFogInfos\",\n            \"vFogColor\",\n            \"pointSize\",\n            \"mBones\",\n            \"normalMatrix\",\n            \"vLightingIntensity\",\n            \"logarithmicDepthConstant\",\n            \"vTangentSpaceParams\",\n            \"boneTextureWidth\",\n            \"vDebugMode\",\n            \"morphTargetTextureInfo\",\n            \"morphTargetTextureIndices\",\n            \"cameraInfo\",\n        ];\n        for (const uniformName in this._uniformsList) {\n            uniforms.push(uniformName);\n        }\n        const samplers = [\n            \"environmentBrdfSampler\",\n            \"blueNoiseSampler\",\n            \"boneSampler\",\n            \"morphTargets\",\n            \"oitDepthSampler\",\n            \"oitFrontColorSampler\",\n            \"areaLightsLTC1Sampler\",\n            \"areaLightsLTC2Sampler\",\n        ];\n        for (const key in this._samplersList) {\n            const sampler = this._samplersList[key];\n            samplers.push(sampler.samplerName);\n            // Push uniforms for texture infos and matrix\n            uniforms.push(sampler.samplerInfoName);\n            uniforms.push(sampler.samplerMatrixName);\n        }\n        PrepareUniformsAndSamplersForIBL(uniforms, samplers, true);\n        const uniformBuffers = [\"Material\", \"Scene\", \"Mesh\"];\n        const indexParameters = { maxSimultaneousLights: this._maxSimultaneousLights, maxSimultaneousMorphTargets: defines.NUM_MORPH_INFLUENCERS };\n        this._eventInfo.fallbacks = fallbacks;\n        this._eventInfo.fallbackRank = fallbackRank;\n        this._eventInfo.defines = defines;\n        this._eventInfo.uniforms = uniforms;\n        this._eventInfo.attributes = attribs;\n        this._eventInfo.samplers = samplers;\n        this._eventInfo.uniformBuffersNames = uniformBuffers;\n        this._eventInfo.customCode = undefined;\n        this._eventInfo.mesh = mesh;\n        this._eventInfo.indexParameters = indexParameters;\n        this._callbackPluginEventGeneric(128 /* MaterialPluginEvent.PrepareEffect */, this._eventInfo);\n        MaterialHelperGeometryRendering.AddUniformsAndSamplers(uniforms, samplers);\n        PrePassConfiguration.AddUniforms(uniforms);\n        PrePassConfiguration.AddSamplers(samplers);\n        AddClipPlaneUniforms(uniforms);\n        if (ImageProcessingConfiguration) {\n            ImageProcessingConfiguration.PrepareUniforms(uniforms, defines);\n            ImageProcessingConfiguration.PrepareSamplers(samplers, defines);\n        }\n        PrepareUniformsAndSamplersList({\n            uniformsNames: uniforms,\n            uniformBuffersNames: uniformBuffers,\n            samplers: samplers,\n            defines: defines,\n            maxSimultaneousLights: this._maxSimultaneousLights,\n        });\n        const csnrOptions = {};\n        if (this.customShaderNameResolve) {\n            shaderName = this.customShaderNameResolve(shaderName, uniforms, uniformBuffers, samplers, defines, attribs, csnrOptions);\n        }\n        const join = defines.toString();\n        const effect = engine.createEffect(shaderName, {\n            attributes: attribs,\n            uniformsNames: uniforms,\n            uniformBuffersNames: uniformBuffers,\n            samplers: samplers,\n            defines: join,\n            fallbacks: fallbacks,\n            onCompiled: onCompiled,\n            onError: onError,\n            indexParameters,\n            processFinalCode: csnrOptions.processFinalCode,\n            processCodeAfterIncludes: this._eventInfo.customCode,\n            multiTarget: defines.PREPASS,\n            shaderLanguage: this._shaderLanguage,\n            extraInitializationsAsync: this._shadersLoaded\n                ? undefined\n                : async () => {\n                    if (this.shaderLanguage === 1 /* ShaderLanguage.WGSL */) {\n                        await Promise.all([import(\"../../ShadersWGSL/openpbr.vertex\"), import(\"../../ShadersWGSL/openpbr.fragment\")]);\n                    }\n                    else {\n                        await Promise.all([import(\"../../Shaders/openpbr.vertex\"), import(\"../../Shaders/openpbr.fragment\")]);\n                    }\n                    this._shadersLoaded = true;\n                },\n        }, engine);\n        this._eventInfo.customCode = undefined;\n        return effect;\n    }\n    _prepareDefines(mesh, renderingMesh, defines, useInstances = null, useClipPlane = null) {\n        const useThinInstances = renderingMesh.hasThinInstances;\n        const scene = this.getScene();\n        const engine = scene.getEngine();\n        // Lights\n        PrepareDefinesForLights(scene, mesh, defines, true, this._maxSimultaneousLights, this._disableLighting);\n        defines._needNormals = true;\n        // Multiview\n        PrepareDefinesForMultiview(scene, defines);\n        // PrePass\n        const oit = this.needAlphaBlendingForMesh(mesh) && this.getScene().useOrderIndependentTransparency;\n        PrepareDefinesForPrePass(scene, defines, this.canRenderToMRT && !oit);\n        // Order independant transparency\n        PrepareDefinesForOIT(scene, defines, oit);\n        MaterialHelperGeometryRendering.PrepareDefines(engine.currentRenderPassId, mesh, defines);\n        // Textures\n        defines.METALLICWORKFLOW = true;\n        if (defines._areTexturesDirty) {\n            defines._needUVs = false;\n            for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\n                defines[\"MAINUV\" + i] = false;\n            }\n            if (scene.texturesEnabled) {\n                // Loop through samplers and prepare defines for each texture\n                for (const key in this._samplersList) {\n                    const sampler = this._samplersList[key];\n                    if (sampler.value) {\n                        PrepareDefinesForMergedUV(sampler.value, defines, sampler.textureDefine);\n                        defines[sampler.textureDefine + \"_GAMMA\"] = sampler.value.gammaSpace;\n                    }\n                    else {\n                        defines[sampler.textureDefine] = false;\n                    }\n                }\n                const radianceTexture = this._getRadianceTexture();\n                const useSHInFragment = this._forceIrradianceInFragment ||\n                    this.realTimeFiltering ||\n                    this._twoSidedLighting ||\n                    engine.getCaps().maxVaryingVectors <= 8 ||\n                    this._baseDiffuseRoughnessTexture != null;\n                PrepareDefinesForIBL(scene, radianceTexture, defines, this.realTimeFiltering, this.realTimeFilteringQuality, !useSHInFragment);\n                if (this._baseMetalnessTexture) {\n                    defines.AOSTOREINMETALMAPRED = this._useAmbientOcclusionFromMetallicTextureRed;\n                }\n                defines.SPECULAR_WEIGHT_IN_ALPHA = this._useSpecularWeightFromAlpha;\n                defines.SPECULAR_WEIGHT_FROM_SPECULAR_COLOR_TEXTURE = this._useSpecularWeightFromSpecularColorTexture;\n                defines.SPECULAR_ROUGHNESS_ANISOTROPY_FROM_TANGENT_TEXTURE = this._useSpecularRoughnessAnisotropyFromTangentTexture;\n                defines.COAT_ROUGHNESS_ANISOTROPY_FROM_TANGENT_TEXTURE = this._useCoatRoughnessAnisotropyFromTangentTexture;\n                defines.ROUGHNESSSTOREINMETALMAPGREEN = this._useRoughnessFromMetallicTextureGreen;\n                defines.METALLNESSSTOREINMETALMAPBLUE = this._useMetallicFromMetallicTextureBlue;\n                defines.THIN_FILM_THICKNESS_FROM_THIN_FILM_TEXTURE = this._useThinFilmThicknessFromTextureGreen;\n                if (this.geometryNormalTexture) {\n                    if (this._useParallax && this.baseColorTexture && MaterialFlags.DiffuseTextureEnabled) {\n                        defines.PARALLAX = true;\n                        defines.PARALLAX_RHS = scene.useRightHandedSystem;\n                        defines.PARALLAXOCCLUSION = !!this._useParallaxOcclusion;\n                    }\n                    else {\n                        defines.PARALLAX = false;\n                    }\n                    defines.OBJECTSPACE_NORMALMAP = this._useObjectSpaceNormalMap;\n                }\n                else {\n                    defines.PARALLAX = false;\n                    defines.PARALLAX_RHS = false;\n                    defines.PARALLAXOCCLUSION = false;\n                    defines.OBJECTSPACE_NORMALMAP = false;\n                }\n                if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\n                    defines.ENVIRONMENTBRDF = true;\n                    defines.ENVIRONMENTBRDF_RGBD = this._environmentBRDFTexture.isRGBD;\n                }\n                else {\n                    defines.ENVIRONMENTBRDF = false;\n                    defines.ENVIRONMENTBRDF_RGBD = false;\n                }\n                if (this._shouldUseAlphaFromBaseColorTexture()) {\n                    defines.ALPHA_FROM_BASE_COLOR_TEXTURE = true;\n                }\n                else {\n                    defines.ALPHA_FROM_BASE_COLOR_TEXTURE = false;\n                }\n            }\n            if (this._lightFalloff === Material.LIGHTFALLOFF_STANDARD) {\n                defines.USEPHYSICALLIGHTFALLOFF = false;\n                defines.USEGLTFLIGHTFALLOFF = false;\n            }\n            else if (this._lightFalloff === Material.LIGHTFALLOFF_GLTF) {\n                defines.USEPHYSICALLIGHTFALLOFF = false;\n                defines.USEGLTFLIGHTFALLOFF = true;\n            }\n            else {\n                defines.USEPHYSICALLIGHTFALLOFF = true;\n                defines.USEGLTFLIGHTFALLOFF = false;\n            }\n            if (!this.backFaceCulling && this._twoSidedLighting) {\n                defines.TWOSIDEDLIGHTING = true;\n            }\n            else {\n                defines.TWOSIDEDLIGHTING = false;\n            }\n            // We need it to not invert normals in two sided lighting mode (based on the winding of the face)\n            defines.MIRRORED = !!scene._mirroredCameraPosition;\n            defines.SPECULARAA = engine.getCaps().standardDerivatives && this._enableSpecularAntiAliasing;\n        }\n        if (defines._areTexturesDirty || defines._areMiscDirty) {\n            defines.ALPHATESTVALUE = `${this._alphaCutOff}${this._alphaCutOff % 1 === 0 ? \".\" : \"\"}`;\n            defines.PREMULTIPLYALPHA = this.alphaMode === Constants.ALPHA_PREMULTIPLIED || this.alphaMode === Constants.ALPHA_PREMULTIPLIED_PORTERDUFF;\n            defines.ALPHABLEND = this.needAlphaBlendingForMesh(mesh);\n        }\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\n            this._imageProcessingConfiguration.prepareDefines(defines);\n        }\n        defines.FORCENORMALFORWARD = this._forceNormalForward;\n        defines.RADIANCEOCCLUSION = this._useRadianceOcclusion;\n        defines.HORIZONOCCLUSION = this._useHorizonOcclusion;\n        if ((this.specularRoughnessAnisotropy > 0.0 || this.coatRoughnessAnisotropy > 0.0) &&\n            OpenPBRMaterial._noiseTextures[scene.uniqueId] &&\n            MaterialFlags.ReflectionTextureEnabled) {\n            // ANISOTROPIC is used to include common shader functions needed for anisotropy\n            // ANISOTROPIC_BASE is used to process anisotropy for the base layer\n            // ANISOTROPIC_COAT is used to process anisotropy for the coat layer\n            defines.ANISOTROPIC = true;\n            if (!mesh.isVerticesDataPresent(VertexBuffer.TangentKind)) {\n                defines._needUVs = true;\n                defines.MAINUV1 = true;\n            }\n            if (this._useGltfStyleAnisotropy) {\n                defines.USE_GLTF_STYLE_ANISOTROPY = true;\n            }\n            defines.ANISOTROPIC_BASE = this.specularRoughnessAnisotropy > 0.0;\n            defines.ANISOTROPIC_COAT = this.coatRoughnessAnisotropy > 0.0;\n        }\n        else {\n            defines.ANISOTROPIC = false;\n            defines.USE_GLTF_STYLE_ANISOTROPY = false;\n            defines.ANISOTROPIC_BASE = false;\n            defines.ANISOTROPIC_COAT = false;\n        }\n        defines.THIN_FILM = this.thinFilmWeight > 0.0;\n        defines.IRIDESCENCE = this.thinFilmWeight > 0.0;\n        // Misc.\n        if (defines._areMiscDirty) {\n            PrepareDefinesForMisc(mesh, scene, this._useLogarithmicDepth, this.pointsCloud, this.fogEnabled, this.needAlphaTestingForMesh(mesh), defines, this._applyDecalMapAfterDetailMap, this._useVertexPulling, renderingMesh, this._setVertexOutputInvariant);\n            defines.UNLIT = this._unlit || ((this.pointsCloud || this.wireframe) && !mesh.isVerticesDataPresent(VertexBuffer.NormalKind));\n            defines.DEBUGMODE = this._debugMode;\n        }\n        // Values that need to be evaluated on every frame\n        PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances ? true : false, useClipPlane, useThinInstances);\n        // External config\n        this._eventInfo.defines = defines;\n        this._eventInfo.mesh = mesh;\n        this._callbackPluginEventPrepareDefinesBeforeAttributes(this._eventInfo);\n        // Attribs\n        PrepareDefinesForAttributes(mesh, defines, true, true, true, this._transparencyMode !== Material.MATERIAL_OPAQUE);\n        // External config\n        this._callbackPluginEventPrepareDefines(this._eventInfo);\n    }\n}\nOpenPBRMaterial._noiseTextures = {};\n/**\n * Force all the PBR materials to compile to glsl even on WebGPU engines.\n * False by default. This is mostly meant for backward compatibility.\n */\nOpenPBRMaterial.ForceGLSL = false;\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"baseWeight\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_baseWeight\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"baseWeightTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_baseWeightTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"baseColor\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_baseColor\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"baseColorTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_baseColorTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"baseDiffuseRoughness\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_baseDiffuseRoughness\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"baseDiffuseRoughnessTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_baseDiffuseRoughnessTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"baseMetalness\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_baseMetalness\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"baseMetalnessTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_baseMetalnessTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"specularWeight\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_specularWeight\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"specularWeightTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_specularWeightTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"specularColor\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_specularColor\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"specularColorTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_specularColorTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"specularRoughness\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_specularRoughness\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"specularRoughnessTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_specularRoughnessTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"specularRoughnessAnisotropy\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_specularRoughnessAnisotropy\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"specularRoughnessAnisotropyTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_specularRoughnessAnisotropyTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"specularIor\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_specularIor\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"coatWeight\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_coatWeight\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"coatWeightTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_coatWeightTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"coatColor\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_coatColor\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"coatColorTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_coatColorTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"coatRoughness\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_coatRoughness\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"coatRoughnessTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_coatRoughnessTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"coatRoughnessAnisotropy\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_coatRoughnessAnisotropy\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"coatRoughnessAnisotropyTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_coatRoughnessAnisotropyTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"coatIor\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_coatIor\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"coatDarkening\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_coatDarkening\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"coatDarkeningTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_coatDarkeningTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"geometryNormalTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_geometryNormalTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"geometryTangent\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_geometryTangent\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"geometryTangentTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_geometryTangentTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"geometryCoatNormalTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_geometryCoatNormalTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"geometryCoatTangent\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_geometryCoatTangent\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"geometryCoatTangentTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_geometryCoatTangentTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"geometryOpacity\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_geometryOpacity\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"geometryOpacityTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_geometryOpacityTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"emissionLuminance\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_emissionLuminance\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"emissionColor\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_emissionColor\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"emissionColorTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_emissionColorTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"thinFilmWeight\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_thinFilmWeight\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"thinFilmWeightTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_thinFilmWeightTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"thinFilmThickness\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_thinFilmThickness\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"thinFilmThicknessMin\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_thinFilmThicknessMin\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"thinFilmThicknessTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_thinFilmThicknessTexture\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"thinFilmIor\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_thinFilmIor\", void 0);\n__decorate([\n    addAccessorsForMaterialProperty(\"_markAllSubMeshesAsTexturesDirty\", \"ambientOcclusionTexture\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n], OpenPBRMaterial.prototype, \"_ambientOcclusionTexture\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"directIntensity\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"environmentIntensity\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"useSpecularWeightFromTextureAlpha\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\n], OpenPBRMaterial.prototype, \"forceAlphaTest\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\n], OpenPBRMaterial.prototype, \"alphaCutOff\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"useAmbientOcclusionFromMetallicTextureRed\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"useAmbientInGrayScale\", void 0);\n__decorate([\n    serialize()\n], OpenPBRMaterial.prototype, \"usePhysicalLightFalloff\", null);\n__decorate([\n    serialize()\n], OpenPBRMaterial.prototype, \"useGLTFLightFalloff\", null);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"useObjectSpaceNormalMap\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"useParallax\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"useParallaxOcclusion\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"parallaxScaleBias\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n], OpenPBRMaterial.prototype, \"disableLighting\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"forceIrradianceInFragment\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n], OpenPBRMaterial.prototype, \"maxSimultaneousLights\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"invertNormalMapX\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"invertNormalMapY\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"twoSidedLighting\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"useAlphaFresnel\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"useLinearAlphaFresnel\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"environmentBRDFTexture\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"forceNormalForward\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"enableSpecularAntiAliasing\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"useHorizonOcclusion\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], OpenPBRMaterial.prototype, \"useRadianceOcclusion\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\n], OpenPBRMaterial.prototype, \"unlit\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\n], OpenPBRMaterial.prototype, \"applyDecalMapAfterDetailMap\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\n], OpenPBRMaterial.prototype, \"debugMode\", void 0);\n__decorate([\n    serialize()\n], OpenPBRMaterial.prototype, \"transparencyMode\", null);\nRegisterClass(\"BABYLON.OpenPBRMaterial\", OpenPBRMaterial);\n//# sourceMappingURL=openPbrMaterial.js.map"],"names":["onCreatedEffectParameters","effect","subMesh","Uniform","populateVectorFromLinkedProperties","vector","destinationSize","dimension","propKey","this","linkedProperties","prop","sourceSize","numComponents","targetUniformComponentOffset","Logger","Error","name","value","_tmpArray","toArray","fromArray","constructor","componentNum","Property","defaultValue","targetUniformName","targetUniformComponentNum","Sampler","samplerName","samplerPrefix","samplerInfoName","charAt","toUpperCase","slice","samplerMatrixName","textureDefine","OpenPBRMaterialDefinesBase","UVDefinesMixin","MaterialDefines","OpenPBRMaterialDefines","ImageProcessingDefinesMixin","externalProperties","super","NUM_SAMPLES","REALTIME_FILTERING","IBL_CDF_FILTERING","VERTEXCOLOR","BAKED_VERTEX_ANIMATION_TEXTURE","VERTEXALPHA","ALPHATEST","DEPTHPREPASS","ALPHABLEND","ALPHA_FROM_BASE_COLOR_TEXTURE","ALPHATESTVALUE","PREMULTIPLYALPHA","REFLECTIVITY_GAMMA","REFLECTIVITYDIRECTUV","SPECULARTERM","LODBASEDMICROSFURACE","METALLICWORKFLOW","ROUGHNESSSTOREINMETALMAPALPHA","ROUGHNESSSTOREINMETALMAPGREEN","METALLNESSSTOREINMETALMAPBLUE","AOSTOREINMETALMAPRED","SPECULAR_WEIGHT_IN_ALPHA","SPECULAR_WEIGHT_FROM_SPECULAR_COLOR_TEXTURE","SPECULAR_ROUGHNESS_ANISOTROPY_FROM_TANGENT_TEXTURE","COAT_ROUGHNESS_ANISOTROPY_FROM_TANGENT_TEXTURE","USE_GLTF_STYLE_ANISOTROPY","THIN_FILM_THICKNESS_FROM_THIN_FILM_TEXTURE","ENVIRONMENTBRDF","ENVIRONMENTBRDF_RGBD","NORMAL","TANGENT","OBJECTSPACE_NORMALMAP","PARALLAX","PARALLAX_RHS","PARALLAXOCCLUSION","NORMALXYSCALE","ANISOTROPIC","ANISOTROPIC_OPENPBR","ANISOTROPIC_BASE","ANISOTROPIC_COAT","THIN_FILM","IRIDESCENCE","REFLECTION","REFLECTIONMAP_3D","REFLECTIONMAP_SPHERICAL","REFLECTIONMAP_PLANAR","REFLECTIONMAP_CUBIC","USE_LOCAL_REFLECTIONMAP_CUBIC","REFLECTIONMAP_PROJECTION","REFLECTIONMAP_SKYBOX","REFLECTIONMAP_EXPLICIT","REFLECTIONMAP_EQUIRECTANGULAR","REFLECTIONMAP_EQUIRECTANGULAR_FIXED","REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED","INVERTCUBICMAP","USESPHERICALFROMREFLECTIONMAP","USEIRRADIANCEMAP","USE_IRRADIANCE_DOMINANT_DIRECTION","USESPHERICALINVERTEX","REFLECTIONMAP_OPPOSITEZ","LODINREFLECTIONALPHA","GAMMAREFLECTION","RGBDREFLECTION","RADIANCEOCCLUSION","HORIZONOCCLUSION","INSTANCES","THIN_INSTANCES","INSTANCESCOLOR","PREPASS","PREPASS_COLOR","PREPASS_COLOR_INDEX","PREPASS_IRRADIANCE","PREPASS_IRRADIANCE_INDEX","PREPASS_ALBEDO","PREPASS_ALBEDO_INDEX","PREPASS_ALBEDO_SQRT","PREPASS_ALBEDO_SQRT_INDEX","PREPASS_DEPTH","PREPASS_DEPTH_INDEX","PREPASS_SCREENSPACE_DEPTH","PREPASS_SCREENSPACE_DEPTH_INDEX","PREPASS_NORMALIZED_VIEW_DEPTH","PREPASS_NORMALIZED_VIEW_DEPTH_INDEX","PREPASS_NORMAL","PREPASS_NORMAL_INDEX","PREPASS_NORMAL_WORLDSPACE","PREPASS_WORLD_NORMAL","PREPASS_WORLD_NORMAL_INDEX","PREPASS_POSITION","PREPASS_POSITION_INDEX","PREPASS_LOCAL_POSITION","PREPASS_LOCAL_POSITION_INDEX","PREPASS_VELOCITY","PREPASS_VELOCITY_INDEX","PREPASS_VELOCITY_LINEAR","PREPASS_VELOCITY_LINEAR_INDEX","PREPASS_REFLECTIVITY","PREPASS_REFLECTIVITY_INDEX","SCENE_MRT_COUNT","NUM_BONE_INFLUENCERS","BonesPerMesh","BONETEXTURE","BONES_VELOCITY_ENABLED","NONUNIFORMSCALING","MORPHTARGETS","MORPHTARGETS_POSITION","MORPHTARGETS_NORMAL","MORPHTARGETS_TANGENT","MORPHTARGETS_UV","MORPHTARGETS_UV2","MORPHTARGETS_COLOR","MORPHTARGETTEXTURE_HASPOSITIONS","MORPHTARGETTEXTURE_HASNORMALS","MORPHTARGETTEXTURE_HASTANGENTS","MORPHTARGETTEXTURE_HASUVS","MORPHTARGETTEXTURE_HASUV2S","MORPHTARGETTEXTURE_HASCOLORS","NUM_MORPH_INFLUENCERS","MORPHTARGETS_TEXTURE","USEPHYSICALLIGHTFALLOFF","USEGLTFLIGHTFALLOFF","TWOSIDEDLIGHTING","MIRRORED","SHADOWFLOAT","CLIPPLANE","CLIPPLANE2","CLIPPLANE3","CLIPPLANE4","CLIPPLANE5","CLIPPLANE6","POINTSIZE","FOG","LOGARITHMICDEPTH","CAMERA_ORTHOGRAPHIC","CAMERA_PERSPECTIVE","AREALIGHTSUPPORTED","FORCENORMALFORWARD","SPECULARAA","UNLIT","DECAL_AFTER_DETAIL","DEBUGMODE","CLUSTLIGHT_SLICES","CLUSTLIGHT_BATCH","BRDF_V_HEIGHT_CORRELATED","MS_BRDF_ENERGY_CONSERVATION","SPHERICAL_HARMONICS","SPECULAR_GLOSSINESS_ENERGY_CONSERVATION","MIX_IBL_RADIANCE_WITH_IRRADIANCE","LEGACY_SPECULAR_ENERGY_CONSERVATION","BASE_DIFFUSE_MODEL","Constants","MATERIAL_DIFFUSE_MODEL_E_OREN_NAYAR","DIELECTRIC_SPECULAR_MODEL","MATERIAL_DIELECTRIC_SPECULAR_MODEL_OPENPBR","CONDUCTOR_SPECULAR_MODEL","MATERIAL_CONDUCTOR_SPECULAR_MODEL_OPENPBR","rebuild","reset","OpenPBRMaterialBase","ImageProcessingMixin","PushMaterial","OpenPBRMaterial","geometryTangentAngle","Math","atan2","geometryTangent","y","x","Vector2","cos","sin","geometryCoatTangentAngle","geometryCoatTangent","usePhysicalLightFalloff","_lightFalloff","Material","LIGHTFALLOFF_PHYSICAL","_markAllSubMeshesAsTexturesDirty","LIGHTFALLOFF_STANDARD","useGLTFLightFalloff","LIGHTFALLOFF_GLTF","realTimeFiltering","_realTimeFiltering","b","markAsDirty","MATERIAL_TextureDirtyFlag","realTimeFilteringQuality","_realTimeFilteringQuality","n","canRenderToMRT","scene","forceGLSL","undefined","ForceGLSL","_baseWeight","_baseWeightTexture","_baseColor","Color3","White","_baseColorTexture","_baseDiffuseRoughness","_baseDiffuseRoughnessTexture","_baseMetalness","_baseMetalnessTexture","_specularWeight","_specularWeightTexture","_specularColor","_specularColorTexture","_specularRoughness","_specularRoughnessTexture","_specularRoughnessAnisotropy","_specularRoughnessAnisotropyTexture","_specularIor","_coatWeight","_coatWeightTexture","_coatColor","_coatColorTexture","_coatRoughness","_coatRoughnessTexture","_coatRoughnessAnisotropy","_coatRoughnessAnisotropyTexture","_coatIor","_coatDarkening","_coatDarkeningTexture","useCoatRoughnessFromWeightTexture","_geometryNormalTexture","_geometryTangent","_geometryTangentTexture","_geometryCoatNormalTexture","_geometryCoatTangent","_geometryCoatTangentTexture","_geometryOpacity","_geometryOpacityTexture","_emissionLuminance","_emissionColor","Black","_emissionColorTexture","_thinFilmWeight","_thinFilmWeightTexture","_thinFilmThickness","_thinFilmThicknessMin","_thinFilmThicknessTexture","_thinFilmIor","_ambientOcclusionTexture","_uniformsList","_samplersList","_samplerDefines","directIntensity","environmentIntensity","useSpecularWeightFromTextureAlpha","forceAlphaTest","alphaCutOff","useAmbientOcclusionFromMetallicTextureRed","useAmbientInGrayScale","useObjectSpaceNormalMap","useParallax","useParallaxOcclusion","parallaxScaleBias","disableLighting","forceIrradianceInFragment","maxSimultaneousLights","invertNormalMapX","invertNormalMapY","twoSidedLighting","useAlphaFresnel","useLinearAlphaFresnel","environmentBRDFTexture","forceNormalForward","enableSpecularAntiAliasing","useHorizonOcclusion","useRadianceOcclusion","unlit","applyDecalMapAfterDetailMap","_lightingInfos","Vector4","_radianceTexture","_useSpecularWeightFromAlpha","_useSpecularWeightFromSpecularColorTexture","_useSpecularRoughnessAnisotropyFromTangentTexture","_useCoatRoughnessAnisotropyFromTangentTexture","_useGltfStyleAnisotropy","_useHorizonOcclusion","_useRadianceOcclusion","_useAlphaFromBaseColorTexture","_useAmbientOcclusionFromMetallicTextureRed","_useRoughnessFromMetallicTextureGreen","_useMetallicFromMetallicTextureBlue","_useThinFilmThicknessFromTextureGreen","_useObjectSpaceNormalMap","_useParallax","_useParallaxOcclusion","_parallaxScaleBias","_disableLighting","_maxSimultaneousLights","_invertNormalMapX","_invertNormalMapY","_twoSidedLighting","_alphaCutOff","_useAlphaFresnel","_useLinearAlphaFresnel","_environmentBRDFTexture","_forceIrradianceInFragment","TEXTURE_FILTERING_QUALITY_LOW","_forceNormalForward","_enableSpecularAntiAliasing","_renderTargets","SmartArray","_unlit","_applyDecalMapAfterDetailMap","_debugMode","_shadersLoaded","_breakShaderLoadedCheck","debugMode","debugLimit","debugFactor","_cacheHasRenderTargetTextures","_transparencyMode","MATERIAL_OPAQUE","getScene","getEngine","isWebGPU","webGLVersion","_noiseTextures","uniqueId","Texture","TEXTURE_NEAREST_SAMPLINGMODE","onDisposeObservable","addOnce","dispose","_attachImageProcessingConfiguration","getRenderTargetTextures","MaterialFlags","ReflectionTextureEnabled","isRenderTarget","push","_eventInfo","renderTargets","_callbackPluginEventFillRenderTargetTextures","GetEnvironmentBRDFTexture","prePassConfiguration","PrePassConfiguration","_propertyList","key","Object","getOwnPropertyNames","keys","forEach","uniform","samplerKey","defineName","type","default","hasRenderTargetTextures","isPrePassCapable","disableDepthWrite","getClassName","transparencyMode","_markAllSubMeshesAsTexturesAndMiscDirty","_shouldUseAlphaFromBaseColorTexture","_hasAlphaChannel","geometryOpacityTexture","baseColorTexture","hasAlpha","clone","cloneTexturesOnlyOnce","rootUrl","SerializationHelper","Clone","id","stencil","copyTo","_clonePlugins","serialize","serializationObject","customType","Parse","source","material","parse","_ParsePlugins","forceCompilation","mesh","onCompiled","options","localOptions","clipPlane","useInstances","_uniformBufferLayoutBuilt","buildUniformLayout","_callbackPluginEventGeneric","defines","defineNames","_prepareEffect","_onEffectCreatedObservable","notifyObservers","isReady","onCompileObservable","add","checkReady","isReadyForSubMesh","drawWrapper","_drawWrapper","isFrozen","_wasPreviouslyReady","_wasPreviouslyUsingInstances","materialDefines","_isReadyForSubMesh","engine","_areTexturesDirty","_callbackPluginEventHasRenderTargetTextures","texturesEnabled","sampler","isReadyOrNotBlocking","radianceTexture","_getRadianceTexture","irradianceTexture","sphericalPolynomial","getInternalTexture","_sphericalPolynomialPromise","_callbackPluginEventIsReadyForSubMesh","_areImageProcessingDirty","_imageProcessingConfiguration","index","lightSources","length","_isReady","getCaps","standardDerivatives","isVerticesDataPresent","VertexBuffer","NormalKind","createNormals","Warn","previousEffect","lightDisposed","_areLightsDisposed","getRenderingMesh","onError","forceWasNotReadyPreviously","allowShaderHotSwapping","markAsUnprocessed","resetCachedMaterial","setEffect","_materialContext","_renderId","getRenderId","_checkScenePerformancePriority","ubo","_uniformBuffer","addUniform","PrepareUniformLayoutForIBL","values","bindForSubMesh","world","_activeEffect","getMeshUniformBuffer","bindToEffect","transferToEffect","MaterialHelperGeometryRendering","Bind","currentRenderPassId","camera","activeCamera","updateFloat4","minZ","maxZ","_callbackPluginEventHardBindForSubMesh","toNormalMatrix","_normalMatrix","bindOnlyNormalMatrix","mustRebind","_mustRebind","visibility","BindBonesParameters","bindViewProjection","useUbo","isSync","_forceRebindOnNextCall","updateFloat2","coordinatesIndex","level","BindTextureMatrix","geometryNormalTexture","_mirroredCameraPosition","BindIBLParameters","pointsCloud","updateFloat","pointSize","TmpVectors","updateVector4","Vector3","updateVector3","emissionLuminance","z","w","setTexture","BindIBLSamplers","useOrderIndependentTransparency","needAlphaBlendingForMesh","depthPeelingRenderer","bind","_callbackPluginEventBindForSubMesh","BindClipPlane","bindEyePosition","_features","needToAlwaysBindUniformBuffers","_needToBindSceneUbo","lightsEnabled","BindLights","fogEnabled","applyFog","fogMode","Scene","FOGMODE_NONE","receiveShadows","bindView","BindFogParameters","BindMorphTargetParameters","bakedVertexAnimationManager","BindLogDepth","_afterBind","update","getAnimatables","results","animations","getActiveTextures","activeTextures","hasTexture","texture","setPrePassRenderer","forceDisposeEffect","forceDisposeTextures","_imageProcessingObserver","onUpdateParameters","remove","environmentTexture","renderingMesh","useClipPlane","_prepareDefines","isDirty","markAsProcessed","fallbacks","EffectFallbacks","fallbackRank","addFallback","HandleFallbacksForShadows","MULTIVIEW","attribs","PositionKind","TangentKind","i","MAX_SUPPORTED_UV_SETS","ColorKind","PrepareAttributesForBones","PrepareAttributesForInstances","PrepareAttributesForMorphTargets","PrepareAttributesForBakedVertexAnimation","shaderName","uniforms","uniformName","samplers","PrepareUniformsAndSamplersForIBL","uniformBuffers","indexParameters","maxSimultaneousMorphTargets","attributes","uniformBuffersNames","customCode","AddUniformsAndSamplers","AddUniforms","AddClipPlaneUniforms","ImageProcessingConfiguration","PrepareUniforms","PrepareSamplers","PrepareUniformsAndSamplersList","uniformsNames","csnrOptions","customShaderNameResolve","join","toString","createEffect","processFinalCode","processCodeAfterIncludes","multiTarget","shaderLanguage","_shaderLanguage","extraInitializationsAsync","async","Promise","all","import","useThinInstances","hasThinInstances","PrepareDefinesForLights","_needNormals","PrepareDefinesForMultiview","oit","PrepareDefinesForPrePass","PrepareDefinesForOIT","PrepareDefines","_needUVs","PrepareDefinesForMergedUV","gammaSpace","useSHInFragment","maxVaryingVectors","PrepareDefinesForIBL","DiffuseTextureEnabled","useRightHandedSystem","isRGBD","backFaceCulling","_areMiscDirty","alphaMode","ALPHA_PREMULTIPLIED","ALPHA_PREMULTIPLIED_PORTERDUFF","prepareDefines","specularRoughnessAnisotropy","coatRoughnessAnisotropy","MAINUV1","thinFilmWeight","PrepareDefinesForMisc","_useLogarithmicDepth","needAlphaTestingForMesh","_useVertexPulling","_setVertexOutputInvariant","wireframe","PrepareDefinesForFrameBoundValues","_callbackPluginEventPrepareDefinesBeforeAttributes","PrepareDefinesForAttributes","_callbackPluginEventPrepareDefines","__decorate","addAccessorsForMaterialProperty","prototype","expandToProperty","RegisterClass"],"mappings":"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"}