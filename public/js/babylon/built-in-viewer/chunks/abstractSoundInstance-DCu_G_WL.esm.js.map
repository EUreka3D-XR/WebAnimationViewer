{"version":3,"file":"abstractSoundInstance-DCu_G_WL.esm.js","sources":["../../../../../dev/core/dist/AudioV2/abstractAudio/abstractSound.js","../../../../../dev/core/dist/AudioV2/abstractAudio/abstractSoundInstance.js"],"sourcesContent":["import { Observable } from \"../../Misc/observable\";\nimport { AbstractSoundSource } from \"./abstractSoundSource\";\n/**\n * Abstract class representing a sound in the audio engine.\n */\nexport class AbstractSound extends AbstractSoundSource {\n    constructor(name, engine) {\n        super(name, engine, 3 /* AudioNodeType.HAS_INPUTS_AND_OUTPUTS */); // Inputs are for instances.\n        this._newestInstance = null;\n        this._privateInstances = new Set();\n        this._state = 1 /* SoundState.Stopped */;\n        this._instances = this._privateInstances;\n        /**\n         * Observable for when the sound stops playing.\n         */\n        this.onEndedObservable = new Observable();\n        this._onInstanceEnded = (instance) => {\n            if (this._newestInstance === instance) {\n                this._newestInstance = null;\n            }\n            this._privateInstances.delete(instance);\n            if (this._instances.size === 0) {\n                this._state = 1 /* SoundState.Stopped */;\n                this.onEndedObservable.notifyObservers(this);\n            }\n        };\n    }\n    /**\n     * Whether the sound should start playing automatically. Defaults to `false`.\n     */\n    get autoplay() {\n        return this._options.autoplay;\n    }\n    /**\n     * The current playback time of the sound, in seconds.\n     */\n    get currentTime() {\n        const instance = this._getNewestInstance();\n        return instance ? instance.currentTime : 0;\n    }\n    set currentTime(value) {\n        this.startOffset = value;\n        const instance = this._getNewestInstance();\n        if (instance) {\n            instance.currentTime = value;\n        }\n    }\n    /**\n     * Whether the sound should loop. Defaults to `false`.\n     */\n    get loop() {\n        return this._options.loop;\n    }\n    set loop(value) {\n        this._options.loop = value;\n    }\n    /**\n     * The maximum number of instances that can play at the same time. Defaults to `Infinity`.\n     */\n    get maxInstances() {\n        return this._options.maxInstances;\n    }\n    set maxInstances(value) {\n        this._options.maxInstances = value;\n    }\n    /**\n     * The time within the sound buffer to start playing at, in seconds. Defaults to `0`.\n     */\n    get startOffset() {\n        return this._options.startOffset;\n    }\n    set startOffset(value) {\n        this._options.startOffset = value;\n    }\n    /**\n     * The state of the sound.\n     */\n    get state() {\n        return this._state;\n    }\n    /**\n     * Releases associated resources.\n     */\n    dispose() {\n        super.dispose();\n        this.stop();\n        this._newestInstance = null;\n        this._privateInstances.clear();\n        this.onEndedObservable.clear();\n    }\n    /**\n     * Pauses the sound.\n     */\n    pause() {\n        const it = this._instances.values();\n        for (let next = it.next(); !next.done; next = it.next()) {\n            next.value.pause();\n        }\n        this._state = 5 /* SoundState.Paused */;\n    }\n    /**\n     * Resumes the sound.\n     */\n    resume() {\n        if (this._state !== 5 /* SoundState.Paused */) {\n            return;\n        }\n        const it = this._instances.values();\n        for (let next = it.next(); !next.done; next = it.next()) {\n            next.value.resume();\n        }\n        this._state = 3 /* SoundState.Started */;\n    }\n    _beforePlay(instance) {\n        if (this.state === 5 /* SoundState.Paused */ && this._instances.size > 0) {\n            this.resume();\n            return;\n        }\n        instance.onEndedObservable.addOnce(this._onInstanceEnded);\n        this._privateInstances.add(instance);\n        this._newestInstance = instance;\n    }\n    _afterPlay(instance) {\n        this._state = instance.state;\n    }\n    _getNewestInstance() {\n        if (this._instances.size === 0) {\n            return null;\n        }\n        if (!this._newestInstance) {\n            const it = this._instances.values();\n            for (let next = it.next(); !next.done; next = it.next()) {\n                this._newestInstance = next.value;\n            }\n        }\n        return this._newestInstance;\n    }\n    _setState(state) {\n        this._state = state;\n    }\n    _stopExcessInstances() {\n        if (this.maxInstances < Infinity) {\n            const numberOfInstancesToStop = Array.from(this._instances).filter((instance) => instance.state === 3 /* SoundState.Started */).length - this.maxInstances;\n            const it = this._instances.values();\n            for (let i = 0; i < numberOfInstancesToStop; i++) {\n                const instance = it.next().value;\n                instance.stop();\n            }\n        }\n    }\n}\n//# sourceMappingURL=abstractSound.js.map","import { Observable } from \"../../Misc/observable\";\nimport { AbstractAudioNode } from \"./abstractAudioNode\";\n/** @internal */\nexport class _AbstractSoundInstance extends AbstractAudioNode {\n    constructor(sound) {\n        super(sound.engine, 2 /* AudioNodeType.HAS_OUTPUTS */);\n        this._state = 1 /* SoundState.Stopped */;\n        /** Observable triggered when the sound instance's playback ends */\n        this.onEndedObservable = new Observable();\n        /** Observable triggered if the sound instance encounters an error and can not be played */\n        this.onErrorObservable = new Observable();\n        /** Observable triggered when the sound instance's state changes */\n        this.onStateChangedObservable = new Observable();\n        this._sound = sound;\n    }\n    /** The playback state of the sound instance */\n    get state() {\n        return this._state;\n    }\n    /** @internal */\n    dispose() {\n        super.dispose();\n        this.stop();\n        this.onEndedObservable.clear();\n        this.onStateChangedObservable.clear();\n    }\n    _setState(value) {\n        if (this._state === value) {\n            return;\n        }\n        this._state = value;\n        this.onStateChangedObservable.notifyObservers(this);\n    }\n}\n//# sourceMappingURL=abstractSoundInstance.js.map"],"names":[],"mappings":"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"}