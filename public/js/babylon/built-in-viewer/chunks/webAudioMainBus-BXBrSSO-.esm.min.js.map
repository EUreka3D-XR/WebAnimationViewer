{"version":3,"file":"webAudioMainBus-BXBrSSO-.esm.min.js","sources":["../../../../../dev/core/dist/AudioV2/abstractAudio/mainAudioBus.js","../../../../../dev/core/dist/AudioV2/webAudio/webAudioMainBus.js"],"sourcesContent":["import { AbstractAudioBus } from \"./abstractAudioBus\";\n/**\n * Abstract class representing a main audio bus.\n *\n * Main audio buses are the last bus in the audio graph.\n *\n * Unlike {@link AudioBus} instances, `MainAudioBus` instances have no spatial audio and stereo output capabilities,\n * and they cannot be connected downstream to another audio bus. They only connect downstream to the audio engine's\n * main output.\n *\n * Main audio buses are created by the {@link CreateMainAudioBusAsync} function.\n */\nexport class MainAudioBus extends AbstractAudioBus {\n    constructor(name, engine) {\n        super(name, engine);\n    }\n}\n//# sourceMappingURL=mainAudioBus.js.map","import { MainAudioBus } from \"../abstractAudio/mainAudioBus\";\nimport { _WebAudioBaseSubGraph } from \"./subNodes/webAudioBaseSubGraph\";\n/** @internal */\nexport class _WebAudioMainBus extends MainAudioBus {\n    /** @internal */\n    constructor(name, engine) {\n        super(name, engine);\n        this._subGraph = new _WebAudioMainBus._SubGraph(this);\n    }\n    /** @internal */\n    async _initAsync(options) {\n        await this._subGraph.initAsync(options);\n        if (this.engine.mainOut) {\n            if (!this._connect(this.engine.mainOut)) {\n                throw new Error(\"Connect failed\");\n            }\n        }\n        this.engine._addMainBus(this);\n    }\n    /** @internal */\n    dispose() {\n        super.dispose();\n        this.engine._removeMainBus(this);\n    }\n    /** @internal */\n    get _inNode() {\n        return this._subGraph._inNode;\n    }\n    /** @internal */\n    get _outNode() {\n        return this._subGraph._outNode;\n    }\n    _connect(node) {\n        const connected = super._connect(node);\n        if (!connected) {\n            return false;\n        }\n        if (node._inNode) {\n            this._outNode?.connect(node._inNode);\n        }\n        return true;\n    }\n    _disconnect(node) {\n        const disconnected = super._disconnect(node);\n        if (!disconnected) {\n            return false;\n        }\n        if (node._inNode) {\n            this._outNode?.disconnect(node._inNode);\n        }\n        return true;\n    }\n    /** @internal */\n    getClassName() {\n        return \"_WebAudioMainBus\";\n    }\n}\n_WebAudioMainBus._SubGraph = class extends _WebAudioBaseSubGraph {\n    get _downstreamNodes() {\n        return this._owner._downstreamNodes ?? null;\n    }\n};\n//# sourceMappingURL=webAudioMainBus.js.map"],"names":["MainAudioBus","AbstractAudioBus","constructor","name","engine","super","_WebAudioMainBus","this","_subGraph","_SubGraph","_initAsync","options","initAsync","mainOut","_connect","Error","_addMainBus","dispose","_removeMainBus","_inNode","_outNode","node","connect","_disconnect","disconnect","getClassName","_WebAudioBaseSubGraph","_downstreamNodes","_owner"],"mappings":"wMAYO,MAAMA,UAAqBC,EAC9B,WAAAC,CAAYC,EAAMC,GACdC,MAAMF,EAAMC,EACpB,ECZO,MAAME,UAAyBN,EAElC,WAAAE,CAAYC,EAAMC,GACdC,MAAMF,EAAMC,GACZG,KAAKC,UAAY,IAAIF,EAAiBG,UAAUF,KACxD,CAEI,gBAAMG,CAAWC,GAEb,SADMJ,KAAKC,UAAUI,UAAUD,GAC3BJ,KAAKH,OAAOS,UACPN,KAAKO,SAASP,KAAKH,OAAOS,SAC3B,MAAM,IAAIE,MAAM,kBAGxBR,KAAKH,OAAOY,YAAYT,KAChC,CAEI,OAAAU,GACIZ,MAAMY,UACNV,KAAKH,OAAOc,eAAeX,KACnC,CAEI,WAAIY,GACA,OAAOZ,KAAKC,UAAUW,OAC9B,CAEI,YAAIC,GACA,OAAOb,KAAKC,UAAUY,QAC9B,CACI,QAAAN,CAASO,GAEL,QADkBhB,MAAMS,SAASO,KAI7BA,EAAKF,SACLZ,KAAKa,UAAUE,QAAQD,EAAKF,UAEzB,EACf,CACI,WAAAI,CAAYF,GAER,QADqBhB,MAAMkB,YAAYF,KAInCA,EAAKF,SACLZ,KAAKa,UAAUI,WAAWH,EAAKF,UAE5B,EACf,CAEI,YAAAM,GACI,MAAO,kBACf,EAEAnB,EAAiBG,UAAY,cAAciB,EACvC,oBAAIC,GACA,OAAOpB,KAAKqB,OAAOD,kBAAoB,IAC/C"}