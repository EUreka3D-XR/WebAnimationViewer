{"version":3,"file":"spatialWebAudio-D3xppDNj.esm.min.js","sources":["../../../../../dev/core/dist/AudioV2/abstractAudio/subProperties/abstractSpatialAudio.js","../../../../../dev/core/dist/AudioV2/abstractAudio/subProperties/abstractStereoAudio.js","../../../../../dev/core/dist/AudioV2/abstractAudio/subNodes/stereoAudioSubNode.js","../../../../../dev/core/dist/AudioV2/abstractAudio/subProperties/stereoAudio.js","../../../../../dev/core/dist/AudioV2/abstractAudio/subNodes/spatialAudioSubNode.js","../../../../../dev/core/dist/AudioV2/webAudio/subNodes/spatialWebAudioSubNode.js","../../../../../dev/core/dist/AudioV2/webAudio/subNodes/stereoWebAudioSubNode.js","../../../../../dev/core/dist/AudioV2/webAudio/subNodes/webAudioBusAndSoundSubGraph.js","../../../../../dev/core/dist/AudioV2/abstractAudio/subProperties/spatialAudio.js","../../../../../dev/core/dist/AudioV2/webAudio/subProperties/spatialWebAudio.js"],"sourcesContent":["import { Quaternion, Vector3 } from \"../../../Maths/math.vector\";\nexport const _SpatialAudioDefaults = {\n    coneInnerAngle: 6.28318530718,\n    coneOuterAngle: 6.28318530718,\n    coneOuterVolume: 0,\n    distanceModel: \"linear\",\n    maxDistance: 10000,\n    minDistance: 1,\n    panningModel: \"equalpower\",\n    position: Vector3.Zero(),\n    rolloffFactor: 1,\n    rotation: Vector3.Zero(),\n    rotationQuaternion: new Quaternion(),\n};\n/**\n * @param options The spatial audio options to check.\n * @returns `true` if spatial audio options are defined, otherwise `false`.\n */\nexport function _HasSpatialAudioOptions(options) {\n    return (options.spatialEnabled ||\n        options.spatialAutoUpdate !== undefined ||\n        options.spatialConeInnerAngle !== undefined ||\n        options.spatialConeOuterAngle !== undefined ||\n        options.spatialConeOuterVolume !== undefined ||\n        options.spatialDistanceModel !== undefined ||\n        options.spatialMaxDistance !== undefined ||\n        options.spatialMinDistance !== undefined ||\n        options.spatialMinUpdateTime !== undefined ||\n        options.spatialPanningModel !== undefined ||\n        options.spatialPosition !== undefined ||\n        options.spatialRolloffFactor !== undefined ||\n        options.spatialRotation !== undefined ||\n        options.spatialRotationQuaternion !== undefined);\n}\n/**\n * Abstract class representing the `spatial` audio property on a sound or audio bus.\n *\n * @see {@link AudioEngineV2.listener}\n */\nexport class AbstractSpatialAudio {\n}\n//# sourceMappingURL=abstractSpatialAudio.js.map","export const _StereoAudioDefaults = {\n    pan: 0,\n};\n/**\n * @param options The stereo audio options to check.\n * @returns `true` if stereo audio options are defined, otherwise `false`.\n */\nexport function _HasStereoAudioOptions(options) {\n    return options.stereoEnabled || options.stereoPan !== undefined;\n}\n/**\n * Abstract class representing the `stereo` audio property on a sound or audio bus.\n *\n * @see {@link AudioEngineV2.listener}\n */\nexport class AbstractStereoAudio {\n}\n//# sourceMappingURL=abstractStereoAudio.js.map","import { _AbstractAudioSubNode } from \"../../abstractAudio/subNodes/abstractAudioSubNode\";\nimport { _StereoAudioDefaults } from \"../../abstractAudio/subProperties/abstractStereoAudio\";\n/** @internal */\nexport class _StereoAudioSubNode extends _AbstractAudioSubNode {\n    constructor(engine) {\n        super(\"Stereo\" /* AudioSubNode.STEREO */, engine);\n    }\n    /** @internal */\n    setOptions(options) {\n        this.pan = options.stereoPan ?? _StereoAudioDefaults.pan;\n    }\n}\n/** @internal */\nexport function _GetStereoAudioSubNode(subGraph) {\n    return subGraph.getSubNode(\"Stereo\" /* AudioSubNode.STEREO */);\n}\n/** @internal */\nexport function _SetStereoAudioProperty(subGraph, property, value) {\n    subGraph.callOnSubNode(\"Stereo\" /* AudioSubNode.STEREO */, (node) => {\n        node[property] = value;\n    });\n}\n//# sourceMappingURL=stereoAudioSubNode.js.map","import { _StereoAudioDefaults, AbstractStereoAudio } from \"../../abstractAudio/subProperties/abstractStereoAudio\";\nimport { _SetStereoAudioProperty } from \"../subNodes/stereoAudioSubNode\";\n/** @internal */\nexport class _StereoAudio extends AbstractStereoAudio {\n    /** @internal */\n    constructor(subGraph) {\n        super();\n        this._pan = _StereoAudioDefaults.pan;\n        this._subGraph = subGraph;\n    }\n    /** @internal */\n    get pan() {\n        return this._pan;\n    }\n    set pan(value) {\n        this._pan = value;\n        _SetStereoAudioProperty(this._subGraph, \"pan\", value);\n    }\n}\n//# sourceMappingURL=stereoAudio.js.map","import { _SpatialAudioAttacherComponent } from \"../components/spatialAudioAttacherComponent\";\nimport { _SpatialAudioDefaults } from \"../subProperties/abstractSpatialAudio\";\nimport { _AbstractAudioSubNode } from \"./abstractAudioSubNode\";\n/** @internal */\nexport class _SpatialAudioSubNode extends _AbstractAudioSubNode {\n    constructor(engine) {\n        super(\"Spatial\" /* AudioSubNode.SPATIAL */, engine);\n        this._attacherComponent = null;\n    }\n    /** @internal */\n    get isAttached() {\n        return this._attacherComponent !== null && this._attacherComponent.isAttached;\n    }\n    /** @internal */\n    attach(sceneNode, useBoundingBox, attachmentType) {\n        this.detach();\n        if (!this._attacherComponent) {\n            this._attacherComponent = new _SpatialAudioAttacherComponent(this);\n        }\n        this._attacherComponent.attach(sceneNode, useBoundingBox, attachmentType);\n    }\n    /** @internal */\n    detach() {\n        this._attacherComponent?.detach();\n    }\n    /** @internal */\n    dispose() {\n        super.dispose();\n        this._attacherComponent?.dispose();\n        this._attacherComponent = null;\n    }\n    /** @internal */\n    setOptions(options) {\n        this.coneInnerAngle = options.spatialConeInnerAngle ?? _SpatialAudioDefaults.coneInnerAngle;\n        this.coneOuterAngle = options.spatialConeOuterAngle ?? _SpatialAudioDefaults.coneOuterAngle;\n        this.coneOuterVolume = options.spatialConeOuterVolume ?? _SpatialAudioDefaults.coneOuterVolume;\n        this.distanceModel = options.spatialDistanceModel ?? _SpatialAudioDefaults.distanceModel;\n        this.maxDistance = options.spatialMaxDistance ?? _SpatialAudioDefaults.maxDistance;\n        this.minDistance = options.spatialMinDistance ?? _SpatialAudioDefaults.minDistance;\n        this.panningModel = options.spatialPanningModel ?? _SpatialAudioDefaults.panningModel;\n        this.rolloffFactor = options.spatialRolloffFactor ?? _SpatialAudioDefaults.rolloffFactor;\n        if (options.spatialPosition) {\n            this.position = options.spatialPosition.clone();\n        }\n        if (options.spatialRotationQuaternion) {\n            this.rotationQuaternion = options.spatialRotationQuaternion.clone();\n        }\n        else if (options.spatialRotation) {\n            this.rotation = options.spatialRotation.clone();\n        }\n        else {\n            this.rotationQuaternion = _SpatialAudioDefaults.rotationQuaternion.clone();\n        }\n        this.update();\n    }\n    /** @internal */\n    update() {\n        if (this.isAttached) {\n            this._attacherComponent?.update();\n        }\n        else {\n            this._updatePosition();\n            this._updateRotation();\n        }\n    }\n}\n/** @internal */\nexport function _GetSpatialAudioSubNode(subGraph) {\n    return subGraph.getSubNode(\"Spatial\" /* AudioSubNode.SPATIAL */);\n}\n/** @internal */\nexport function _SetSpatialAudioProperty(subGraph, property, value) {\n    subGraph.callOnSubNode(\"Spatial\" /* AudioSubNode.SPATIAL */, (node) => {\n        node[property] = value;\n    });\n}\n//# sourceMappingURL=spatialAudioSubNode.js.map","import { Matrix, Quaternion, Vector3 } from \"../../../Maths/math.vector\";\nimport { _SpatialAudioSubNode } from \"../../abstractAudio/subNodes/spatialAudioSubNode\";\nimport { _SpatialAudioDefaults } from \"../../abstractAudio/subProperties/abstractSpatialAudio\";\nimport { _WebAudioParameterComponent } from \"../components/webAudioParameterComponent\";\nconst TmpMatrix = Matrix.Zero();\nconst TmpQuaternion = new Quaternion();\nconst TmpVector = Vector3.Zero();\nfunction D2r(degrees) {\n    return (degrees * Math.PI) / 180;\n}\nfunction R2d(radians) {\n    return (radians * 180) / Math.PI;\n}\n/** @internal */\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function _CreateSpatialAudioSubNodeAsync(engine) {\n    return new _SpatialWebAudioSubNode(engine);\n}\n/** @internal */\nexport class _SpatialWebAudioSubNode extends _SpatialAudioSubNode {\n    /** @internal */\n    constructor(engine) {\n        super(engine);\n        this._lastPosition = Vector3.Zero();\n        this._lastRotation = Vector3.Zero();\n        this._lastRotationQuaternion = new Quaternion();\n        /** @internal */\n        this.position = _SpatialAudioDefaults.position.clone();\n        /** @internal */\n        this.rotation = _SpatialAudioDefaults.rotation.clone();\n        /** @internal */\n        this.rotationQuaternion = _SpatialAudioDefaults.rotationQuaternion.clone();\n        this.node = new PannerNode(engine._audioContext);\n        this._orientationX = new _WebAudioParameterComponent(engine, this.node.orientationX);\n        this._orientationY = new _WebAudioParameterComponent(engine, this.node.orientationY);\n        this._orientationZ = new _WebAudioParameterComponent(engine, this.node.orientationZ);\n        this._positionX = new _WebAudioParameterComponent(engine, this.node.positionX);\n        this._positionY = new _WebAudioParameterComponent(engine, this.node.positionY);\n        this._positionZ = new _WebAudioParameterComponent(engine, this.node.positionZ);\n    }\n    /** @internal */\n    dispose() {\n        super.dispose();\n        this._orientationX.dispose();\n        this._orientationY.dispose();\n        this._orientationZ.dispose();\n        this._positionX.dispose();\n        this._positionY.dispose();\n        this._positionZ.dispose();\n        this.node.disconnect();\n    }\n    /** @internal */\n    get coneInnerAngle() {\n        return D2r(this.node.coneInnerAngle);\n    }\n    set coneInnerAngle(value) {\n        this.node.coneInnerAngle = R2d(value);\n    }\n    /** @internal */\n    get coneOuterAngle() {\n        return D2r(this.node.coneOuterAngle);\n    }\n    set coneOuterAngle(value) {\n        this.node.coneOuterAngle = R2d(value);\n    }\n    /** @internal */\n    get coneOuterVolume() {\n        return this.node.coneOuterGain;\n    }\n    set coneOuterVolume(value) {\n        this.node.coneOuterGain = value;\n    }\n    /** @internal */\n    get distanceModel() {\n        return this.node.distanceModel;\n    }\n    set distanceModel(value) {\n        this.node.distanceModel = value;\n        // Wiggle the max distance to make the change take effect.\n        const maxDistance = this.node.maxDistance;\n        this.node.maxDistance = maxDistance + 0.001;\n        this.node.maxDistance = maxDistance;\n    }\n    /** @internal */\n    get minDistance() {\n        return this.node.refDistance;\n    }\n    set minDistance(value) {\n        this.node.refDistance = value;\n    }\n    /** @internal */\n    get maxDistance() {\n        return this.node.maxDistance;\n    }\n    set maxDistance(value) {\n        this.node.maxDistance = value;\n    }\n    /** @internal */\n    get panningModel() {\n        return this.node.panningModel;\n    }\n    set panningModel(value) {\n        this.node.panningModel = value;\n    }\n    /** @internal */\n    get rolloffFactor() {\n        return this.node.rolloffFactor;\n    }\n    set rolloffFactor(value) {\n        this.node.rolloffFactor = value;\n    }\n    /** @internal */\n    get _inNode() {\n        return this.node;\n    }\n    /** @internal */\n    get _outNode() {\n        return this.node;\n    }\n    /** @internal */\n    _updatePosition() {\n        if (this._lastPosition.equalsWithEpsilon(this.position)) {\n            return;\n        }\n        // If attached and there is a ramp in progress, we assume another update is coming soon that we can wait for.\n        // We don't do this for unattached nodes because there may not be another update coming.\n        if (this.isAttached && (this._positionX.isRamping || this._positionY.isRamping || this._positionZ.isRamping)) {\n            return;\n        }\n        this._positionX.targetValue = this.position.x;\n        this._positionY.targetValue = this.position.y;\n        this._positionZ.targetValue = this.position.z;\n        this._lastPosition.copyFrom(this.position);\n    }\n    /** @internal */\n    _updateRotation() {\n        // If attached and there is a ramp in progress, we assume another update is coming soon that we can wait for.\n        // We don't do this for unattached nodes because there may not be another update coming.\n        if (this.isAttached && (this._orientationX.isRamping || this._orientationY.isRamping || this._orientationZ.isRamping)) {\n            return;\n        }\n        if (!this._lastRotationQuaternion.equalsWithEpsilon(this.rotationQuaternion)) {\n            TmpQuaternion.copyFrom(this.rotationQuaternion);\n            this._lastRotationQuaternion.copyFrom(this.rotationQuaternion);\n        }\n        else if (!this._lastRotation.equalsWithEpsilon(this.rotation)) {\n            Quaternion.FromEulerAnglesToRef(this.rotation.x, this.rotation.y, this.rotation.z, TmpQuaternion);\n            this._lastRotation.copyFrom(this.rotation);\n        }\n        else {\n            return;\n        }\n        Matrix.FromQuaternionToRef(TmpQuaternion, TmpMatrix);\n        Vector3.TransformNormalToRef(Vector3.RightReadOnly, TmpMatrix, TmpVector);\n        this._orientationX.targetValue = TmpVector.x;\n        this._orientationY.targetValue = TmpVector.y;\n        this._orientationZ.targetValue = TmpVector.z;\n    }\n    _connect(node) {\n        const connected = super._connect(node);\n        if (!connected) {\n            return false;\n        }\n        // If the wrapped node is not available now, it will be connected later by the subgraph.\n        if (node._inNode) {\n            this.node.connect(node._inNode);\n        }\n        return true;\n    }\n    _disconnect(node) {\n        const disconnected = super._disconnect(node);\n        if (!disconnected) {\n            return false;\n        }\n        if (node._inNode) {\n            this.node.disconnect(node._inNode);\n        }\n        return true;\n    }\n    /** @internal */\n    getClassName() {\n        return \"_SpatialWebAudioSubNode\";\n    }\n}\n//# sourceMappingURL=spatialWebAudioSubNode.js.map","import { _StereoAudioSubNode } from \"../../abstractAudio/subNodes/stereoAudioSubNode\";\nimport { _WebAudioParameterComponent } from \"../components/webAudioParameterComponent\";\n/** @internal */\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function _CreateStereoAudioSubNodeAsync(engine) {\n    return new _StereoWebAudioSubNode(engine);\n}\n/** @internal */\nexport class _StereoWebAudioSubNode extends _StereoAudioSubNode {\n    /** @internal */\n    constructor(engine) {\n        super(engine);\n        this.node = new StereoPannerNode(engine._audioContext);\n        this._pan = new _WebAudioParameterComponent(engine, this.node.pan);\n    }\n    /** @internal */\n    dispose() {\n        super.dispose();\n        this._pan.dispose();\n    }\n    /** @internal */\n    get pan() {\n        return this._pan.targetValue;\n    }\n    /** @internal */\n    set pan(value) {\n        this._pan.targetValue = value;\n    }\n    /** @internal */\n    get _inNode() {\n        return this.node;\n    }\n    /** @internal */\n    get _outNode() {\n        return this.node;\n    }\n    /** @internal */\n    getClassName() {\n        return \"_StereoWebAudioSubNode\";\n    }\n    _connect(node) {\n        const connected = super._connect(node);\n        if (!connected) {\n            return false;\n        }\n        // If the wrapped node is not available now, it will be connected later by the subgraph.\n        if (node._inNode) {\n            this.node.connect(node._inNode);\n        }\n        return true;\n    }\n    _disconnect(node) {\n        const disconnected = super._disconnect(node);\n        if (!disconnected) {\n            return false;\n        }\n        if (node._inNode) {\n            this.node.disconnect(node._inNode);\n        }\n        return true;\n    }\n}\n//# sourceMappingURL=stereoWebAudioSubNode.js.map","import { _GetSpatialAudioSubNode } from \"../../abstractAudio/subNodes/spatialAudioSubNode\";\nimport { _GetStereoAudioSubNode } from \"../../abstractAudio/subNodes/stereoAudioSubNode\";\nimport { _GetVolumeAudioSubNode } from \"../../abstractAudio/subNodes/volumeAudioSubNode\";\nimport { _HasSpatialAudioOptions } from \"../../abstractAudio/subProperties/abstractSpatialAudio\";\nimport { _HasStereoAudioOptions } from \"../../abstractAudio/subProperties/abstractStereoAudio\";\nimport { _CreateSpatialAudioSubNodeAsync } from \"./spatialWebAudioSubNode\";\nimport { _CreateStereoAudioSubNodeAsync } from \"./stereoWebAudioSubNode\";\nimport { _WebAudioBaseSubGraph } from \"./webAudioBaseSubGraph\";\n/** @internal */\nexport class _WebAudioBusAndSoundSubGraph extends _WebAudioBaseSubGraph {\n    constructor() {\n        super(...arguments);\n        this._rootNode = null;\n        this._inputNode = null;\n    }\n    /** @internal */\n    async initAsync(options) {\n        await super.initAsync(options);\n        let hasSpatialOptions = false;\n        let hasStereoOptions = false;\n        if ((hasSpatialOptions = _HasSpatialAudioOptions(options))) {\n            await this.createAndAddSubNodeAsync(\"Spatial\" /* AudioSubNode.SPATIAL */);\n        }\n        if ((hasStereoOptions = _HasStereoAudioOptions(options))) {\n            await this.createAndAddSubNodeAsync(\"Stereo\" /* AudioSubNode.STEREO */);\n        }\n        await this._createSubNodePromisesResolvedAsync();\n        if (hasSpatialOptions) {\n            _GetSpatialAudioSubNode(this)?.setOptions(options);\n        }\n        if (hasStereoOptions) {\n            _GetStereoAudioSubNode(this)?.setOptions(options);\n        }\n    }\n    /** @internal */\n    get _inNode() {\n        return this._inputNode;\n    }\n    // eslint-disable-next-line @typescript-eslint/promise-function-async\n    _createSubNode(name) {\n        try {\n            const node = super._createSubNode(name);\n            return node;\n        }\n        catch (e) { }\n        switch (name) {\n            case \"Spatial\" /* AudioSubNode.SPATIAL */:\n                return _CreateSpatialAudioSubNodeAsync(this._owner.engine);\n            case \"Stereo\" /* AudioSubNode.STEREO */:\n                return _CreateStereoAudioSubNodeAsync(this._owner.engine);\n            default:\n                throw new Error(`Unknown subnode name: ${name}`);\n        }\n    }\n    _onSubNodesChanged() {\n        super._onSubNodesChanged();\n        const spatialNode = _GetSpatialAudioSubNode(this);\n        const stereoNode = _GetStereoAudioSubNode(this);\n        const volumeNode = _GetVolumeAudioSubNode(this);\n        if (spatialNode && spatialNode.getClassName() !== \"_SpatialWebAudioSubNode\") {\n            throw new Error(\"Not a WebAudio subnode.\");\n        }\n        if (stereoNode && stereoNode.getClassName() !== \"_StereoWebAudioSubNode\") {\n            throw new Error(\"Not a WebAudio subnode.\");\n        }\n        if (volumeNode && volumeNode.getClassName() !== \"_VolumeWebAudioSubNode\") {\n            throw new Error(\"Not a WebAudio subnode.\");\n        }\n        if (spatialNode) {\n            spatialNode.disconnectAll();\n            if (volumeNode) {\n                spatialNode.connect(volumeNode);\n            }\n        }\n        if (stereoNode) {\n            stereoNode.disconnectAll();\n            if (volumeNode) {\n                stereoNode.connect(volumeNode);\n            }\n        }\n        if (spatialNode && stereoNode) {\n            this._rootNode = new GainNode(this._owner.engine._audioContext);\n            this._rootNode.connect(spatialNode._outNode);\n            this._rootNode.connect(stereoNode._outNode);\n        }\n        else {\n            this._rootNode?.disconnect();\n            this._rootNode = null;\n        }\n        let inSubNode = null;\n        let inNode = null;\n        if (this._rootNode) {\n            inNode = this._rootNode;\n        }\n        else {\n            if (spatialNode) {\n                inSubNode = spatialNode;\n            }\n            else if (stereoNode) {\n                inSubNode = stereoNode;\n            }\n            else if (volumeNode) {\n                inSubNode = volumeNode;\n            }\n            inNode = inSubNode?.node ?? null;\n        }\n        if (this._inputNode !== inNode) {\n            // Disconnect the wrapped upstream WebAudio nodes from the old wrapped WebAudio node.\n            // The wrapper nodes are unaware of this change.\n            if (this._inputNode && this._upstreamNodes) {\n                const it = this._upstreamNodes.values();\n                for (let next = it.next(); !next.done; next = it.next()) {\n                    next.value._outNode?.disconnect(this._inputNode);\n                }\n            }\n            this._inputNode = inNode;\n            // Connect the wrapped upstream WebAudio nodes to the new wrapped WebAudio node.\n            // The wrapper nodes are unaware of this change.\n            if (inNode && this._upstreamNodes) {\n                const it = this._upstreamNodes.values();\n                for (let next = it.next(); !next.done; next = it.next()) {\n                    next.value._outNode?.connect(inNode);\n                }\n            }\n        }\n    }\n}\n//# sourceMappingURL=webAudioBusAndSoundSubGraph.js.map","import { _GetSpatialAudioSubNode, _SetSpatialAudioProperty } from \"../subNodes/spatialAudioSubNode\";\nimport { _SpatialAudioDefaults, AbstractSpatialAudio } from \"./abstractSpatialAudio\";\n/** @internal */\nexport class _SpatialAudio extends AbstractSpatialAudio {\n    /** @internal */\n    constructor(subGraph) {\n        super();\n        this._coneInnerAngle = _SpatialAudioDefaults.coneInnerAngle;\n        this._coneOuterAngle = _SpatialAudioDefaults.coneOuterAngle;\n        this._coneOuterVolume = _SpatialAudioDefaults.coneOuterVolume;\n        this._distanceModel = _SpatialAudioDefaults.distanceModel;\n        this._maxDistance = _SpatialAudioDefaults.maxDistance;\n        this._minDistance = _SpatialAudioDefaults.minDistance;\n        this._panningModel = _SpatialAudioDefaults.panningModel;\n        this._rolloffFactor = _SpatialAudioDefaults.rolloffFactor;\n        const subNode = _GetSpatialAudioSubNode(subGraph);\n        if (subNode) {\n            this._position = subNode.position.clone();\n            this._rotation = subNode.rotation.clone();\n            this._rotationQuaternion = subNode.rotationQuaternion.clone();\n        }\n        else {\n            this._position = _SpatialAudioDefaults.position.clone();\n            this._rotation = _SpatialAudioDefaults.rotation.clone();\n            this._rotationQuaternion = _SpatialAudioDefaults.rotationQuaternion.clone();\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            subGraph.createAndAddSubNodeAsync(\"Spatial\" /* AudioSubNode.SPATIAL */);\n        }\n        this._subGraph = subGraph;\n    }\n    /** @internal */\n    get coneInnerAngle() {\n        return this._coneInnerAngle;\n    }\n    set coneInnerAngle(value) {\n        this._coneInnerAngle = value;\n        _SetSpatialAudioProperty(this._subGraph, \"coneInnerAngle\", value);\n    }\n    /** @internal */\n    get coneOuterAngle() {\n        return this._coneOuterAngle;\n    }\n    set coneOuterAngle(value) {\n        this._coneOuterAngle = value;\n        _SetSpatialAudioProperty(this._subGraph, \"coneOuterAngle\", value);\n    }\n    /** @internal */\n    get coneOuterVolume() {\n        return this._coneOuterVolume;\n    }\n    set coneOuterVolume(value) {\n        this._coneOuterVolume = value;\n        _SetSpatialAudioProperty(this._subGraph, \"coneOuterVolume\", value);\n    }\n    /** @internal */\n    get distanceModel() {\n        return this._distanceModel;\n    }\n    set distanceModel(value) {\n        this._distanceModel = value;\n        _SetSpatialAudioProperty(this._subGraph, \"distanceModel\", value);\n    }\n    /** @internal */\n    get isAttached() {\n        return this._subGraph.getSubNode(\"Spatial\" /* AudioSubNode.SPATIAL */)?.isAttached ?? false;\n    }\n    /** @internal */\n    get maxDistance() {\n        return this._maxDistance;\n    }\n    set maxDistance(value) {\n        if (value <= 0) {\n            value = 0.000001;\n        }\n        this._maxDistance = value;\n        _SetSpatialAudioProperty(this._subGraph, \"maxDistance\", value);\n    }\n    /** @internal */\n    get minDistance() {\n        return this._minDistance;\n    }\n    set minDistance(value) {\n        this._minDistance = value;\n        _SetSpatialAudioProperty(this._subGraph, \"minDistance\", value);\n    }\n    /** @internal */\n    get panningModel() {\n        return this._panningModel;\n    }\n    set panningModel(value) {\n        this._panningModel = value;\n        _SetSpatialAudioProperty(this._subGraph, \"panningModel\", value);\n    }\n    /** @internal */\n    get position() {\n        return this._position;\n    }\n    set position(value) {\n        this._position = value;\n        this._updatePosition();\n    }\n    /** @internal */\n    get rolloffFactor() {\n        return this._rolloffFactor;\n    }\n    set rolloffFactor(value) {\n        this._rolloffFactor = value;\n        _SetSpatialAudioProperty(this._subGraph, \"rolloffFactor\", value);\n    }\n    /** @internal */\n    get rotation() {\n        return this._rotation;\n    }\n    set rotation(value) {\n        this._rotation = value;\n        this._updateRotation();\n    }\n    /** @internal */\n    get rotationQuaternion() {\n        return this._rotationQuaternion;\n    }\n    set rotationQuaternion(value) {\n        this._rotationQuaternion = value;\n        this._updateRotation();\n    }\n    /**\n     * Attaches to a scene node.\n     *\n     * Detaches automatically before attaching to the given scene node.\n     * If `sceneNode` is `null` it is the same as calling `detach()`.\n     *\n     * @param sceneNode The scene node to attach to, or `null` to detach.\n     * @param useBoundingBox Whether to use the bounding box of the node for positioning. Defaults to `false`.\n     * @param attachmentType Whether to attach to the node's position and/or rotation. Defaults to `PositionAndRotation`.\n     */\n    attach(sceneNode, useBoundingBox = false, attachmentType = 3 /* SpatialAudioAttachmentType.PositionAndRotation */) {\n        _GetSpatialAudioSubNode(this._subGraph)?.attach(sceneNode, useBoundingBox, attachmentType);\n    }\n    /**\n     * Detaches from the scene node if attached.\n     */\n    detach() {\n        _GetSpatialAudioSubNode(this._subGraph)?.detach();\n    }\n    /** @internal */\n    update() {\n        const subNode = _GetSpatialAudioSubNode(this._subGraph);\n        if (!subNode) {\n            return;\n        }\n        if (subNode.isAttached) {\n            subNode.update();\n        }\n        else {\n            this._updatePosition(subNode);\n            this._updateRotation(subNode);\n        }\n    }\n    _updatePosition(subNode = null) {\n        if (!subNode) {\n            subNode = _GetSpatialAudioSubNode(this._subGraph);\n            if (!subNode) {\n                return;\n            }\n        }\n        const position = subNode.position;\n        if (!position.equalsWithEpsilon(this._position)) {\n            subNode.position.copyFrom(this._position);\n            subNode._updatePosition();\n        }\n    }\n    _updateRotation(subNode = null) {\n        if (!subNode) {\n            subNode = _GetSpatialAudioSubNode(this._subGraph);\n            if (!subNode) {\n                return;\n            }\n        }\n        if (!subNode.rotationQuaternion.equalsWithEpsilon(this._rotationQuaternion)) {\n            subNode.rotationQuaternion.copyFrom(this._rotationQuaternion);\n            subNode._updateRotation();\n        }\n        else if (!subNode.rotation.equalsWithEpsilon(this._rotation)) {\n            subNode.rotation.copyFrom(this._rotation);\n            subNode._updateRotation();\n        }\n    }\n}\n//# sourceMappingURL=spatialAudio.js.map","import { _SpatialAudio } from \"../../abstractAudio/subProperties/spatialAudio\";\nimport { _SpatialWebAudioUpdaterComponent } from \"../components/spatialWebAudioUpdaterComponent\";\n/** @internal */\nexport class _SpatialWebAudio extends _SpatialAudio {\n    /** @internal */\n    constructor(subGraph, autoUpdate, minUpdateTime) {\n        super(subGraph);\n        this._updaterComponent = new _SpatialWebAudioUpdaterComponent(this, autoUpdate, minUpdateTime);\n    }\n    /** @internal */\n    get minUpdateTime() {\n        return this._updaterComponent.minUpdateTime;\n    }\n    /** @internal */\n    set minUpdateTime(value) {\n        this._updaterComponent.minUpdateTime = value;\n    }\n    /** @internal */\n    dispose() {\n        this._updaterComponent.dispose();\n        this._updaterComponent = null;\n    }\n}\n//# sourceMappingURL=spatialWebAudio.js.map"],"names":["_SpatialAudioDefaults","coneInnerAngle","coneOuterAngle","coneOuterVolume","distanceModel","maxDistance","minDistance","panningModel","position","Vector3","Zero","rolloffFactor","rotation","rotationQuaternion","Quaternion","_HasSpatialAudioOptions","options","spatialEnabled","undefined","spatialAutoUpdate","spatialConeInnerAngle","spatialConeOuterAngle","spatialConeOuterVolume","spatialDistanceModel","spatialMaxDistance","spatialMinDistance","spatialMinUpdateTime","spatialPanningModel","spatialPosition","spatialRolloffFactor","spatialRotation","spatialRotationQuaternion","AbstractSpatialAudio","_StereoAudioDefaults","AbstractStereoAudio","_StereoAudioSubNode","_AbstractAudioSubNode","constructor","engine","super","setOptions","this","pan","stereoPan","_GetStereoAudioSubNode","subGraph","getSubNode","_StereoAudio","_pan","_subGraph","value","property","callOnSubNode","node","_SetStereoAudioProperty","_SpatialAudioSubNode","_attacherComponent","isAttached","attach","sceneNode","useBoundingBox","attachmentType","detach","_SpatialAudioAttacherComponent","dispose","clone","update","_updatePosition","_updateRotation","_GetSpatialAudioSubNode","_SetSpatialAudioProperty","TmpMatrix","Matrix","TmpQuaternion","TmpVector","D2r","degrees","Math","PI","R2d","radians","_SpatialWebAudioSubNode","_lastPosition","_lastRotation","_lastRotationQuaternion","PannerNode","_audioContext","_orientationX","_WebAudioParameterComponent","orientationX","_orientationY","orientationY","_orientationZ","orientationZ","_positionX","positionX","_positionY","positionY","_positionZ","positionZ","disconnect","coneOuterGain","refDistance","_inNode","_outNode","equalsWithEpsilon","isRamping","targetValue","x","y","z","copyFrom","FromEulerAnglesToRef","FromQuaternionToRef","TransformNormalToRef","RightReadOnly","_connect","connect","_disconnect","getClassName","_StereoWebAudioSubNode","StereoPannerNode","_WebAudioBusAndSoundSubGraph","_WebAudioBaseSubGraph","arguments","_rootNode","_inputNode","initAsync","hasSpatialOptions","hasStereoOptions","createAndAddSubNodeAsync","stereoEnabled","_HasStereoAudioOptions","_createSubNodePromisesResolvedAsync","_createSubNode","name","e","async","_CreateSpatialAudioSubNodeAsync","_owner","_CreateStereoAudioSubNodeAsync","Error","_onSubNodesChanged","spatialNode","stereoNode","volumeNode","_GetVolumeAudioSubNode","disconnectAll","GainNode","inSubNode","inNode","_upstreamNodes","it","values","next","done","_SpatialAudio","_coneInnerAngle","_coneOuterAngle","_coneOuterVolume","_distanceModel","_maxDistance","_minDistance","_panningModel","_rolloffFactor","subNode","_position","_rotation","_rotationQuaternion","_SpatialWebAudio","autoUpdate","minUpdateTime","_updaterComponent","_SpatialWebAudioUpdaterComponent"],"mappings":"+MACO,MAAMA,EAAwB,CACjCC,eAAgB,cAChBC,eAAgB,cAChBC,gBAAiB,EACjBC,cAAe,SACfC,YAAa,IACbC,YAAa,EACbC,aAAc,aACdC,SAAUC,EAAQC,OAClBC,cAAe,EACfC,SAAUH,EAAQC,OAClBG,mBAAoB,IAAIC,GAMrB,SAASC,EAAwBC,GACpC,OAAQA,EAAQC,qBACkBC,IAA9BF,EAAQG,wBAC0BD,IAAlCF,EAAQI,4BAC0BF,IAAlCF,EAAQK,4BAC2BH,IAAnCF,EAAQM,6BACyBJ,IAAjCF,EAAQO,2BACuBL,IAA/BF,EAAQQ,yBACuBN,IAA/BF,EAAQS,yBACyBP,IAAjCF,EAAQU,2BACwBR,IAAhCF,EAAQW,0BACoBT,IAA5BF,EAAQY,sBACyBV,IAAjCF,EAAQa,2BACoBX,IAA5BF,EAAQc,sBAC8BZ,IAAtCF,EAAQe,yBAChB,CAMO,MAAMC,GCvCN,MAAMC,EACJ,EAcF,MAAMC,GCZN,MAAMC,UAA4BC,EACrC,WAAAC,CAAYC,GACRC,MAAM,SAAoCD,EAClD,CAEI,UAAAE,CAAWxB,GACPyB,KAAKC,IAAM1B,EAAQ2B,WAAaV,CACxC,EAGO,SAASW,EAAuBC,GACnC,OAAOA,EAASC,WAAW,SAC/B,CCZO,MAAMC,UAAqBb,EAE9B,WAAAG,CAAYQ,GACRN,QACAE,KAAKO,KAAOf,EACZQ,KAAKQ,UAAYJ,CACzB,CAEI,OAAIH,GACA,OAAOD,KAAKO,IACpB,CACI,OAAIN,CAAIQ,GACJT,KAAKO,KAAOE,EDEb,SAAiCL,EAAUM,EAAUD,GACxDL,EAASO,cAAc,UAAqCC,IACxDA,EAAKF,GAAYD,IAEzB,CCLQI,CAAwBb,KAAKQ,UAAW,MAAOC,EACvD,ECbO,MAAMK,UAA6BnB,EACtC,WAAAC,CAAYC,GACRC,MAAM,UAAsCD,GAC5CG,KAAKe,mBAAqB,IAClC,CAEI,cAAIC,GACA,OAAmC,OAA5BhB,KAAKe,oBAA+Bf,KAAKe,mBAAmBC,UAC3E,CAEI,MAAAC,CAAOC,EAAWC,EAAgBC,GAC9BpB,KAAKqB,SACArB,KAAKe,qBACNf,KAAKe,mBAAqB,IAAIO,EAA+BtB,OAEjEA,KAAKe,mBAAmBE,OAAOC,EAAWC,EAAgBC,EAClE,CAEI,MAAAC,GACIrB,KAAKe,oBAAoBM,QACjC,CAEI,OAAAE,GACIzB,MAAMyB,UACNvB,KAAKe,oBAAoBQ,UACzBvB,KAAKe,mBAAqB,IAClC,CAEI,UAAAhB,CAAWxB,GACPyB,KAAKxC,eAAiBe,EAAQI,uBAAyBpB,EAAsBC,eAC7EwC,KAAKvC,eAAiBc,EAAQK,uBAAyBrB,EAAsBE,eAC7EuC,KAAKtC,gBAAkBa,EAAQM,wBAA0BtB,EAAsBG,gBAC/EsC,KAAKrC,cAAgBY,EAAQO,sBAAwBvB,EAAsBI,cAC3EqC,KAAKpC,YAAcW,EAAQQ,oBAAsBxB,EAAsBK,YACvEoC,KAAKnC,YAAcU,EAAQS,oBAAsBzB,EAAsBM,YACvEmC,KAAKlC,aAAeS,EAAQW,qBAAuB3B,EAAsBO,aACzEkC,KAAK9B,cAAgBK,EAAQa,sBAAwB7B,EAAsBW,cACvEK,EAAQY,kBACRa,KAAKjC,SAAWQ,EAAQY,gBAAgBqC,SAExCjD,EAAQe,0BACRU,KAAK5B,mBAAqBG,EAAQe,0BAA0BkC,QAEvDjD,EAAQc,gBACbW,KAAK7B,SAAWI,EAAQc,gBAAgBmC,QAGxCxB,KAAK5B,mBAAqBb,EAAsBa,mBAAmBoD,QAEvExB,KAAKyB,QACb,CAEI,MAAAA,GACQzB,KAAKgB,WACLhB,KAAKe,oBAAoBU,UAGzBzB,KAAK0B,kBACL1B,KAAK2B,kBAEjB,EAGO,SAASC,EAAwBxB,GACpC,OAAOA,EAASC,WAAW,UAC/B,CAEO,SAASwB,EAAyBzB,EAAUM,EAAUD,GACzDL,EAASO,cAAc,WAAuCC,IAC1DA,EAAKF,GAAYD,IAEzB,CCvEA,MAAMqB,EAAYC,EAAO9D,OACnB+D,EAAgB,IAAI3D,EACpB4D,EAAYjE,EAAQC,OAC1B,SAASiE,EAAIC,GACT,OAAQA,EAAUC,KAAKC,GAAM,GACjC,CACA,SAASC,EAAIC,GACT,OAAkB,IAAVA,EAAiBH,KAAKC,EAClC,CAOO,MAAMG,UAAgC1B,EAEzC,WAAAlB,CAAYC,GACRC,MAAMD,GACNG,KAAKyC,cAAgBzE,EAAQC,OAC7B+B,KAAK0C,cAAgB1E,EAAQC,OAC7B+B,KAAK2C,wBAA0B,IAAItE,EAEnC2B,KAAKjC,SAAWR,EAAsBQ,SAASyD,QAE/CxB,KAAK7B,SAAWZ,EAAsBY,SAASqD,QAE/CxB,KAAK5B,mBAAqBb,EAAsBa,mBAAmBoD,QACnExB,KAAKY,KAAO,IAAIgC,WAAW/C,EAAOgD,eAClC7C,KAAK8C,cAAgB,IAAIC,EAA4BlD,EAAQG,KAAKY,KAAKoC,cACvEhD,KAAKiD,cAAgB,IAAIF,EAA4BlD,EAAQG,KAAKY,KAAKsC,cACvElD,KAAKmD,cAAgB,IAAIJ,EAA4BlD,EAAQG,KAAKY,KAAKwC,cACvEpD,KAAKqD,WAAa,IAAIN,EAA4BlD,EAAQG,KAAKY,KAAK0C,WACpEtD,KAAKuD,WAAa,IAAIR,EAA4BlD,EAAQG,KAAKY,KAAK4C,WACpExD,KAAKyD,WAAa,IAAIV,EAA4BlD,EAAQG,KAAKY,KAAK8C,UAC5E,CAEI,OAAAnC,GACIzB,MAAMyB,UACNvB,KAAK8C,cAAcvB,UACnBvB,KAAKiD,cAAc1B,UACnBvB,KAAKmD,cAAc5B,UACnBvB,KAAKqD,WAAW9B,UAChBvB,KAAKuD,WAAWhC,UAChBvB,KAAKyD,WAAWlC,UAChBvB,KAAKY,KAAK+C,YAClB,CAEI,kBAAInG,GACA,OAAO0E,EAAIlC,KAAKY,KAAKpD,eAC7B,CACI,kBAAIA,CAAeiD,GACfT,KAAKY,KAAKpD,eAAiB8E,EAAI7B,EACvC,CAEI,kBAAIhD,GACA,OAAOyE,EAAIlC,KAAKY,KAAKnD,eAC7B,CACI,kBAAIA,CAAegD,GACfT,KAAKY,KAAKnD,eAAiB6E,EAAI7B,EACvC,CAEI,mBAAI/C,GACA,OAAOsC,KAAKY,KAAKgD,aACzB,CACI,mBAAIlG,CAAgB+C,GAChBT,KAAKY,KAAKgD,cAAgBnD,CAClC,CAEI,iBAAI9C,GACA,OAAOqC,KAAKY,KAAKjD,aACzB,CACI,iBAAIA,CAAc8C,GACdT,KAAKY,KAAKjD,cAAgB8C,EAE1B,MAAM7C,EAAcoC,KAAKY,KAAKhD,YAC9BoC,KAAKY,KAAKhD,YAAcA,EAAc,KACtCoC,KAAKY,KAAKhD,YAAcA,CAChC,CAEI,eAAIC,GACA,OAAOmC,KAAKY,KAAKiD,WACzB,CACI,eAAIhG,CAAY4C,GACZT,KAAKY,KAAKiD,YAAcpD,CAChC,CAEI,eAAI7C,GACA,OAAOoC,KAAKY,KAAKhD,WACzB,CACI,eAAIA,CAAY6C,GACZT,KAAKY,KAAKhD,YAAc6C,CAChC,CAEI,gBAAI3C,GACA,OAAOkC,KAAKY,KAAK9C,YACzB,CACI,gBAAIA,CAAa2C,GACbT,KAAKY,KAAK9C,aAAe2C,CACjC,CAEI,iBAAIvC,GACA,OAAO8B,KAAKY,KAAK1C,aACzB,CACI,iBAAIA,CAAcuC,GACdT,KAAKY,KAAK1C,cAAgBuC,CAClC,CAEI,WAAIqD,GACA,OAAO9D,KAAKY,IACpB,CAEI,YAAImD,GACA,OAAO/D,KAAKY,IACpB,CAEI,eAAAc,GACQ1B,KAAKyC,cAAcuB,kBAAkBhE,KAAKjC,WAK1CiC,KAAKgB,aAAehB,KAAKqD,WAAWY,WAAajE,KAAKuD,WAAWU,WAAajE,KAAKyD,WAAWQ,aAGlGjE,KAAKqD,WAAWa,YAAclE,KAAKjC,SAASoG,EAC5CnE,KAAKuD,WAAWW,YAAclE,KAAKjC,SAASqG,EAC5CpE,KAAKyD,WAAWS,YAAclE,KAAKjC,SAASsG,EAC5CrE,KAAKyC,cAAc6B,SAAStE,KAAKjC,UACzC,CAEI,eAAA4D,GAGI,IAAI3B,KAAKgB,cAAehB,KAAK8C,cAAcmB,WAAajE,KAAKiD,cAAcgB,WAAajE,KAAKmD,cAAcc,WAA3G,CAGA,GAAKjE,KAAK2C,wBAAwBqB,kBAAkBhE,KAAK5B,oBAIpD,IAAK4B,KAAK0C,cAAcsB,kBAAkBhE,KAAK7B,UAKhD,OAJAE,EAAWkG,qBAAqBvE,KAAK7B,SAASgG,EAAGnE,KAAK7B,SAASiG,EAAGpE,KAAK7B,SAASkG,EAAGrC,GACnFhC,KAAK0C,cAAc4B,SAAStE,KAAK7B,SAI7C,MATY6D,EAAcsC,SAAStE,KAAK5B,oBAC5B4B,KAAK2C,wBAAwB2B,SAAStE,KAAK5B,oBAS/C2D,EAAOyC,oBAAoBxC,EAAeF,GAC1C9D,EAAQyG,qBAAqBzG,EAAQ0G,cAAe5C,EAAWG,GAC/DjC,KAAK8C,cAAcoB,YAAcjC,EAAUkC,EAC3CnE,KAAKiD,cAAciB,YAAcjC,EAAUmC,EAC3CpE,KAAKmD,cAAce,YAAcjC,EAAUoC,CAhBnD,CAiBA,CACI,QAAAM,CAAS/D,GAEL,QADkBd,MAAM6E,SAAS/D,KAK7BA,EAAKkD,SACL9D,KAAKY,KAAKgE,QAAQhE,EAAKkD,UAEpB,EACf,CACI,WAAAe,CAAYjE,GAER,QADqBd,MAAM+E,YAAYjE,KAInCA,EAAKkD,SACL9D,KAAKY,KAAK+C,WAAW/C,EAAKkD,UAEvB,EACf,CAEI,YAAAgB,GACI,MAAO,yBACf,EC9KO,MAAMC,UAA+BrF,EAExC,WAAAE,CAAYC,GACRC,MAAMD,GACNG,KAAKY,KAAO,IAAIoE,iBAAiBnF,EAAOgD,eACxC7C,KAAKO,KAAO,IAAIwC,EAA4BlD,EAAQG,KAAKY,KAAKX,IACtE,CAEI,OAAAsB,GACIzB,MAAMyB,UACNvB,KAAKO,KAAKgB,SAClB,CAEI,OAAItB,GACA,OAAOD,KAAKO,KAAK2D,WACzB,CAEI,OAAIjE,CAAIQ,GACJT,KAAKO,KAAK2D,YAAczD,CAChC,CAEI,WAAIqD,GACA,OAAO9D,KAAKY,IACpB,CAEI,YAAImD,GACA,OAAO/D,KAAKY,IACpB,CAEI,YAAAkE,GACI,MAAO,wBACf,CACI,QAAAH,CAAS/D,GAEL,QADkBd,MAAM6E,SAAS/D,KAK7BA,EAAKkD,SACL9D,KAAKY,KAAKgE,QAAQhE,EAAKkD,UAEpB,EACf,CACI,WAAAe,CAAYjE,GAER,QADqBd,MAAM+E,YAAYjE,KAInCA,EAAKkD,SACL9D,KAAKY,KAAK+C,WAAW/C,EAAKkD,UAEvB,EACf,ECnDO,MAAMmB,UAAqCC,EAC9C,WAAAtF,GACIE,SAASqF,WACTnF,KAAKoF,UAAY,KACjBpF,KAAKqF,WAAa,IAC1B,CAEI,eAAMC,CAAU/G,SACNuB,MAAMwF,UAAU/G,GACtB,IAAIgH,GAAoB,EACpBC,GAAmB,GAClBD,EAAoBjH,EAAwBC,WACvCyB,KAAKyF,yBAAyB,YAEnCD,ENhBN,SAAgCjH,GACnC,OAAOA,EAAQmH,oBAAuCjH,IAAtBF,EAAQ2B,SAC5C,CMcgCyF,CAAuBpH,WACrCyB,KAAKyF,yBAAyB,gBAElCzF,KAAK4F,sCACPL,GACA3D,EAAwB5B,OAAOD,WAAWxB,GAE1CiH,GACArF,EAAuBH,OAAOD,WAAWxB,EAErD,CAEI,WAAIuF,GACA,OAAO9D,KAAKqF,UACpB,CAEI,cAAAQ,CAAeC,GACX,IAEI,OADahG,MAAM+F,eAAeC,EAE9C,CACQ,MAAOC,GAAG,CACV,OAAQD,GACJ,IAAK,UACD,OFhCTE,eAA+CnG,GAClD,OAAO,IAAI2C,EAAwB3C,EACvC,CE8BuBoG,CAAgCjG,KAAKkG,OAAOrG,QACvD,IAAK,SACD,OD7CTmG,eAA8CnG,GACjD,OAAO,IAAIkF,EAAuBlF,EACtC,CC2CuBsG,CAA+BnG,KAAKkG,OAAOrG,QACtD,QACI,MAAM,IAAIuG,MAAM,yBAAyBN,KAEzD,CACI,kBAAAO,GACIvG,MAAMuG,qBACN,MAAMC,EAAc1E,EAAwB5B,MACtCuG,EAAapG,EAAuBH,MACpCwG,EAAaC,EAAuBzG,MAC1C,GAAIsG,GAA8C,4BAA/BA,EAAYxB,eAC3B,MAAM,IAAIsB,MAAM,2BAEpB,GAAIG,GAA4C,2BAA9BA,EAAWzB,eACzB,MAAM,IAAIsB,MAAM,2BAEpB,GAAII,GAA4C,2BAA9BA,EAAW1B,eACzB,MAAM,IAAIsB,MAAM,2BAEhBE,IACAA,EAAYI,gBACRF,GACAF,EAAY1B,QAAQ4B,IAGxBD,IACAA,EAAWG,gBACPF,GACAD,EAAW3B,QAAQ4B,IAGvBF,GAAeC,GACfvG,KAAKoF,UAAY,IAAIuB,SAAS3G,KAAKkG,OAAOrG,OAAOgD,eACjD7C,KAAKoF,UAAUR,QAAQ0B,EAAYvC,UACnC/D,KAAKoF,UAAUR,QAAQ2B,EAAWxC,YAGlC/D,KAAKoF,WAAWzB,aAChB3D,KAAKoF,UAAY,MAErB,IAAIwB,EAAY,KACZC,EAAS,KAgBb,GAfI7G,KAAKoF,UACLyB,EAAS7G,KAAKoF,WAGVkB,EACAM,EAAYN,EAEPC,EACLK,EAAYL,EAEPC,IACLI,EAAYJ,GAEhBK,EAASD,GAAWhG,MAAQ,MAE5BZ,KAAKqF,aAAewB,EAAQ,CAG5B,GAAI7G,KAAKqF,YAAcrF,KAAK8G,eAAgB,CACxC,MAAMC,EAAK/G,KAAK8G,eAAeE,SAC/B,IAAK,IAAIC,EAAOF,EAAGE,QAASA,EAAKC,KAAMD,EAAOF,EAAGE,OAC7CA,EAAKxG,MAAMsD,UAAUJ,WAAW3D,KAAKqF,WAEzD,CAIY,GAHArF,KAAKqF,WAAawB,EAGdA,GAAU7G,KAAK8G,eAAgB,CAC/B,MAAMC,EAAK/G,KAAK8G,eAAeE,SAC/B,IAAK,IAAIC,EAAOF,EAAGE,QAASA,EAAKC,KAAMD,EAAOF,EAAGE,OAC7CA,EAAKxG,MAAMsD,UAAUa,QAAQiC,EAEjD,CACA,CACA,EC1HO,MAAMM,UAAsB5H,EAE/B,WAAAK,CAAYQ,GACRN,QACAE,KAAKoH,gBAAkB7J,EAAsBC,eAC7CwC,KAAKqH,gBAAkB9J,EAAsBE,eAC7CuC,KAAKsH,iBAAmB/J,EAAsBG,gBAC9CsC,KAAKuH,eAAiBhK,EAAsBI,cAC5CqC,KAAKwH,aAAejK,EAAsBK,YAC1CoC,KAAKyH,aAAelK,EAAsBM,YAC1CmC,KAAK0H,cAAgBnK,EAAsBO,aAC3CkC,KAAK2H,eAAiBpK,EAAsBW,cAC5C,MAAM0J,EAAUhG,EAAwBxB,GACpCwH,GACA5H,KAAK6H,UAAYD,EAAQ7J,SAASyD,QAClCxB,KAAK8H,UAAYF,EAAQzJ,SAASqD,QAClCxB,KAAK+H,oBAAsBH,EAAQxJ,mBAAmBoD,UAGtDxB,KAAK6H,UAAYtK,EAAsBQ,SAASyD,QAChDxB,KAAK8H,UAAYvK,EAAsBY,SAASqD,QAChDxB,KAAK+H,oBAAsBxK,EAAsBa,mBAAmBoD,QAEpEpB,EAASqF,yBAAyB,YAEtCzF,KAAKQ,UAAYJ,CACzB,CAEI,kBAAI5C,GACA,OAAOwC,KAAKoH,eACpB,CACI,kBAAI5J,CAAeiD,GACfT,KAAKoH,gBAAkB3G,EACvBoB,EAAyB7B,KAAKQ,UAAW,iBAAkBC,EACnE,CAEI,kBAAIhD,GACA,OAAOuC,KAAKqH,eACpB,CACI,kBAAI5J,CAAegD,GACfT,KAAKqH,gBAAkB5G,EACvBoB,EAAyB7B,KAAKQ,UAAW,iBAAkBC,EACnE,CAEI,mBAAI/C,GACA,OAAOsC,KAAKsH,gBACpB,CACI,mBAAI5J,CAAgB+C,GAChBT,KAAKsH,iBAAmB7G,EACxBoB,EAAyB7B,KAAKQ,UAAW,kBAAmBC,EACpE,CAEI,iBAAI9C,GACA,OAAOqC,KAAKuH,cACpB,CACI,iBAAI5J,CAAc8C,GACdT,KAAKuH,eAAiB9G,EACtBoB,EAAyB7B,KAAKQ,UAAW,gBAAiBC,EAClE,CAEI,cAAIO,GACA,OAAOhB,KAAKQ,UAAUH,WAAW,YAAuCW,aAAc,CAC9F,CAEI,eAAIpD,GACA,OAAOoC,KAAKwH,YACpB,CACI,eAAI5J,CAAY6C,GACRA,GAAS,IACTA,EAAQ,MAEZT,KAAKwH,aAAe/G,EACpBoB,EAAyB7B,KAAKQ,UAAW,cAAeC,EAChE,CAEI,eAAI5C,GACA,OAAOmC,KAAKyH,YACpB,CACI,eAAI5J,CAAY4C,GACZT,KAAKyH,aAAehH,EACpBoB,EAAyB7B,KAAKQ,UAAW,cAAeC,EAChE,CAEI,gBAAI3C,GACA,OAAOkC,KAAK0H,aACpB,CACI,gBAAI5J,CAAa2C,GACbT,KAAK0H,cAAgBjH,EACrBoB,EAAyB7B,KAAKQ,UAAW,eAAgBC,EACjE,CAEI,YAAI1C,GACA,OAAOiC,KAAK6H,SACpB,CACI,YAAI9J,CAAS0C,GACTT,KAAK6H,UAAYpH,EACjBT,KAAK0B,iBACb,CAEI,iBAAIxD,GACA,OAAO8B,KAAK2H,cACpB,CACI,iBAAIzJ,CAAcuC,GACdT,KAAK2H,eAAiBlH,EACtBoB,EAAyB7B,KAAKQ,UAAW,gBAAiBC,EAClE,CAEI,YAAItC,GACA,OAAO6B,KAAK8H,SACpB,CACI,YAAI3J,CAASsC,GACTT,KAAK8H,UAAYrH,EACjBT,KAAK2B,iBACb,CAEI,sBAAIvD,GACA,OAAO4B,KAAK+H,mBACpB,CACI,sBAAI3J,CAAmBqC,GACnBT,KAAK+H,oBAAsBtH,EAC3BT,KAAK2B,iBACb,CAWI,MAAAV,CAAOC,EAAWC,GAAiB,EAAOC,EAAiB,GACvDQ,EAAwB5B,KAAKQ,YAAYS,OAAOC,EAAWC,EAAgBC,EACnF,CAII,MAAAC,GACIO,EAAwB5B,KAAKQ,YAAYa,QACjD,CAEI,MAAAI,GACI,MAAMmG,EAAUhG,EAAwB5B,KAAKQ,WACxCoH,IAGDA,EAAQ5G,WACR4G,EAAQnG,UAGRzB,KAAK0B,gBAAgBkG,GACrB5H,KAAK2B,gBAAgBiG,IAEjC,CACI,eAAAlG,CAAgBkG,EAAU,MACtB,IAAKA,KACDA,EAAUhG,EAAwB5B,KAAKQ,YAEnC,OAGSoH,EAAQ7J,SACXiG,kBAAkBhE,KAAK6H,aACjCD,EAAQ7J,SAASuG,SAAStE,KAAK6H,WAC/BD,EAAQlG,kBAEpB,CACI,eAAAC,CAAgBiG,EAAU,OACjBA,IACDA,EAAUhG,EAAwB5B,KAAKQ,eAKtCoH,EAAQxJ,mBAAmB4F,kBAAkBhE,KAAK+H,qBAI7CH,EAAQzJ,SAAS6F,kBAAkBhE,KAAK8H,aAC9CF,EAAQzJ,SAASmG,SAAStE,KAAK8H,WAC/BF,EAAQjG,oBALRiG,EAAQxJ,mBAAmBkG,SAAStE,KAAK+H,qBACzCH,EAAQjG,mBAMpB,ECvLO,MAAMqG,UAAyBb,EAElC,WAAAvH,CAAYQ,EAAU6H,EAAYC,GAC9BpI,MAAMM,GACNJ,KAAKmI,kBAAoB,IAAIC,EAAiCpI,KAAMiI,EAAYC,EACxF,CAEI,iBAAIA,GACA,OAAOlI,KAAKmI,kBAAkBD,aACtC,CAEI,iBAAIA,CAAczH,GACdT,KAAKmI,kBAAkBD,cAAgBzH,CAC/C,CAEI,OAAAc,GACIvB,KAAKmI,kBAAkB5G,UACvBvB,KAAKmI,kBAAoB,IACjC"}