{"version":3,"file":"objectModelMapping-CD1oJl7L.esm.js","sources":["../../../../../dev/core/dist/Lights/spotLight.js","../../../../../dev/loaders/dist/glTF/2.0/Extensions/gltfPathToObjectConverter.js","../../../../../dev/loaders/dist/glTF/2.0/Extensions/objectModelMapping.js"],"sourcesContent":["import { __decorate } from \"tslib\";\nimport { serialize, serializeAsTexture } from \"../Misc/decorators\";\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\nimport { Node } from \"../node\";\nimport { Light } from \"./light\";\nimport { ShadowLight } from \"./shadowLight\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { RegisterClass } from \"../Misc/typeStore\";\nimport { Constants } from \"core/Engines/constants\";\nNode.AddNodeConstructor(\"Light_Type_2\", (name, scene) => {\n    return () => new SpotLight(name, Vector3.Zero(), Vector3.Zero(), 0, 0, scene);\n});\n/**\n * A spot light is defined by a position, a direction, an angle, and an exponent.\n * These values define a cone of light starting from the position, emitting toward the direction.\n * The angle, in radians, defines the size (field of illumination) of the spotlight's conical beam,\n * and the exponent defines the speed of the decay of the light with distance (reach).\n * Documentation: https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\n */\nexport class SpotLight extends ShadowLight {\n    /**\n     * Gets or sets the IES profile texture used to create the spotlight\n     * @see https://playground.babylonjs.com/#UIAXAU#1\n     */\n    get iesProfileTexture() {\n        return this._iesProfileTexture;\n    }\n    set iesProfileTexture(value) {\n        if (this._iesProfileTexture === value) {\n            return;\n        }\n        this._iesProfileTexture = value;\n        if (this._iesProfileTexture && SpotLight._IsTexture(this._iesProfileTexture)) {\n            this._iesProfileTexture.onLoadObservable.addOnce(() => {\n                this._markMeshesAsLightDirty();\n            });\n        }\n    }\n    /**\n     * Gets the cone angle of the spot light in Radians.\n     */\n    get angle() {\n        return this._angle;\n    }\n    /**\n     * Sets the cone angle of the spot light in Radians.\n     */\n    set angle(value) {\n        this._angle = value;\n        this._cosHalfAngle = Math.cos(value * 0.5);\n        this._projectionTextureProjectionLightDirty = true;\n        this.forceProjectionMatrixCompute();\n        this._computeAngleValues();\n    }\n    /**\n     * Only used in gltf falloff mode, this defines the angle where\n     * the directional falloff will start before cutting at angle which could be seen\n     * as outer angle.\n     */\n    get innerAngle() {\n        return this._innerAngle;\n    }\n    /**\n     * Only used in gltf falloff mode, this defines the angle where\n     * the directional falloff will start before cutting at angle which could be seen\n     * as outer angle.\n     */\n    set innerAngle(value) {\n        this._innerAngle = value;\n        this._computeAngleValues();\n    }\n    /**\n     * Allows scaling the angle of the light for shadow generation only.\n     */\n    get shadowAngleScale() {\n        return this._shadowAngleScale;\n    }\n    /**\n     * Allows scaling the angle of the light for shadow generation only.\n     */\n    set shadowAngleScale(value) {\n        this._shadowAngleScale = value;\n        this.forceProjectionMatrixCompute();\n    }\n    /**\n     * Allows reading the projection texture\n     */\n    get projectionTextureMatrix() {\n        return this._projectionTextureMatrix;\n    }\n    /**\n     * Gets the near clip of the Spotlight for texture projection.\n     */\n    get projectionTextureLightNear() {\n        return this._projectionTextureLightNear;\n    }\n    /**\n     * Sets the near clip of the Spotlight for texture projection.\n     */\n    set projectionTextureLightNear(value) {\n        this._projectionTextureLightNear = value;\n        this._projectionTextureProjectionLightDirty = true;\n    }\n    /**\n     * Gets the far clip of the Spotlight for texture projection.\n     */\n    get projectionTextureLightFar() {\n        return this._projectionTextureLightFar;\n    }\n    /**\n     * Sets the far clip of the Spotlight for texture projection.\n     */\n    set projectionTextureLightFar(value) {\n        this._projectionTextureLightFar = value;\n        this._projectionTextureProjectionLightDirty = true;\n    }\n    /**\n     * Gets the Up vector of the Spotlight for texture projection.\n     */\n    get projectionTextureUpDirection() {\n        return this._projectionTextureUpDirection;\n    }\n    /**\n     * Sets the Up vector of the Spotlight for texture projection.\n     */\n    set projectionTextureUpDirection(value) {\n        this._projectionTextureUpDirection = value;\n        this._projectionTextureProjectionLightDirty = true;\n    }\n    /**\n     * Gets the projection texture of the light.\n     */\n    get projectionTexture() {\n        return this._projectionTexture;\n    }\n    /**\n     * Sets the projection texture of the light.\n     */\n    set projectionTexture(value) {\n        if (this._projectionTexture === value) {\n            return;\n        }\n        this._projectionTexture = value;\n        this._projectionTextureDirty = true;\n        if (this._projectionTexture && !this._projectionTexture.isReady()) {\n            if (SpotLight._IsProceduralTexture(this._projectionTexture)) {\n                this._projectionTexture.getEffect().executeWhenCompiled(() => {\n                    this._markMeshesAsLightDirty();\n                });\n            }\n            else if (SpotLight._IsTexture(this._projectionTexture)) {\n                this._projectionTexture.onLoadObservable.addOnce(() => {\n                    this._markMeshesAsLightDirty();\n                });\n            }\n        }\n    }\n    static _IsProceduralTexture(texture) {\n        return texture.onGeneratedObservable !== undefined;\n    }\n    static _IsTexture(texture) {\n        return texture.onLoadObservable !== undefined;\n    }\n    /**\n     * Gets or sets the light projection matrix as used by the projection texture\n     */\n    get projectionTextureProjectionLightMatrix() {\n        return this._projectionTextureProjectionLightMatrix;\n    }\n    set projectionTextureProjectionLightMatrix(projection) {\n        this._projectionTextureProjectionLightMatrix = projection;\n        this._projectionTextureProjectionLightDirty = false;\n        this._projectionTextureDirty = true;\n    }\n    /**\n     * Creates a SpotLight object in the scene. A spot light is a simply light oriented cone.\n     * It can cast shadows.\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\n     * @param name The light friendly name\n     * @param position The position of the spot light in the scene\n     * @param direction The direction of the light in the scene\n     * @param angle The cone angle of the light in Radians\n     * @param exponent The light decay speed with the distance from the emission spot\n     * @param scene The scene the lights belongs to\n     */\n    constructor(name, position, direction, angle, exponent, scene) {\n        super(name, scene);\n        this._innerAngle = 0;\n        this._iesProfileTexture = null;\n        this._projectionTextureMatrix = Matrix.Zero();\n        this._projectionTextureLightNear = 1e-6;\n        this._projectionTextureLightFar = 1000.0;\n        this._projectionTextureUpDirection = Vector3.Up();\n        this._projectionTextureViewLightDirty = true;\n        this._projectionTextureProjectionLightDirty = true;\n        this._projectionTextureDirty = true;\n        this._projectionTextureViewTargetVector = Vector3.Zero();\n        this._projectionTextureViewLightMatrix = Matrix.Zero();\n        this._projectionTextureProjectionLightMatrix = Matrix.Zero();\n        this._projectionTextureScalingMatrix = Matrix.FromValues(0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.5, 0.5, 1.0);\n        this.position = position;\n        this.direction = direction;\n        this.angle = angle;\n        this.exponent = exponent;\n    }\n    /**\n     * Returns the string \"SpotLight\".\n     * @returns the class name\n     */\n    getClassName() {\n        return \"SpotLight\";\n    }\n    /**\n     * Returns the integer 2.\n     * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\n     */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    getTypeID() {\n        return Light.LIGHTTYPEID_SPOTLIGHT;\n    }\n    /**\n     * Overrides the direction setter to recompute the projection texture view light Matrix.\n     * @param value\n     */\n    _setDirection(value) {\n        super._setDirection(value);\n        this._projectionTextureViewLightDirty = true;\n    }\n    /**\n     * Overrides the position setter to recompute the projection texture view light Matrix.\n     * @param value\n     */\n    _setPosition(value) {\n        super._setPosition(value);\n        this._projectionTextureViewLightDirty = true;\n    }\n    /**\n     * Sets the passed matrix \"matrix\" as perspective projection matrix for the shadows and the passed view matrix with the fov equal to the SpotLight angle and and aspect ratio of 1.0.\n     * Returns the SpotLight.\n     * @param matrix\n     * @param viewMatrix\n     * @param renderList\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _setDefaultShadowProjectionMatrix(matrix, viewMatrix, renderList) {\n        const activeCamera = this.getScene().activeCamera;\n        if (!activeCamera) {\n            return;\n        }\n        this._shadowAngleScale = this._shadowAngleScale || 1;\n        const angle = this._shadowAngleScale * this._angle;\n        const minZ = this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ;\n        const maxZ = this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ;\n        const useReverseDepthBuffer = this.getScene().getEngine().useReverseDepthBuffer;\n        Matrix.PerspectiveFovLHToRef(angle, 1.0, useReverseDepthBuffer ? maxZ : minZ, useReverseDepthBuffer ? minZ : maxZ, matrix, true, this._scene.getEngine().isNDCHalfZRange, undefined, useReverseDepthBuffer);\n    }\n    _computeProjectionTextureViewLightMatrix() {\n        this._projectionTextureViewLightDirty = false;\n        this._projectionTextureDirty = true;\n        this.getAbsolutePosition().addToRef(this.getShadowDirection(), this._projectionTextureViewTargetVector);\n        Matrix.LookAtLHToRef(this.getAbsolutePosition(), this._projectionTextureViewTargetVector, this._projectionTextureUpDirection, this._projectionTextureViewLightMatrix);\n    }\n    _computeProjectionTextureProjectionLightMatrix() {\n        this._projectionTextureProjectionLightDirty = false;\n        this._projectionTextureDirty = true;\n        const lightFar = this.projectionTextureLightFar;\n        const lightNear = this.projectionTextureLightNear;\n        const p = lightFar / (lightFar - lightNear);\n        const q = -p * lightNear;\n        const s = 1.0 / Math.tan(this._angle / 2.0);\n        const a = 1.0;\n        Matrix.FromValuesToRef(s / a, 0.0, 0.0, 0.0, 0.0, s, 0.0, 0.0, 0.0, 0.0, p, 1.0, 0.0, 0.0, q, 0.0, this._projectionTextureProjectionLightMatrix);\n    }\n    /**\n     * Main function for light texture projection matrix computing.\n     */\n    _computeProjectionTextureMatrix() {\n        this._projectionTextureDirty = false;\n        this._projectionTextureViewLightMatrix.multiplyToRef(this._projectionTextureProjectionLightMatrix, this._projectionTextureMatrix);\n        if (this._projectionTexture instanceof Texture) {\n            const u = this._projectionTexture.uScale / 2.0;\n            const v = this._projectionTexture.vScale / 2.0;\n            Matrix.FromValuesToRef(u, 0.0, 0.0, 0.0, 0.0, v, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.5, 0.5, 1.0, this._projectionTextureScalingMatrix);\n        }\n        this._projectionTextureMatrix.multiplyToRef(this._projectionTextureScalingMatrix, this._projectionTextureMatrix);\n    }\n    _buildUniformLayout() {\n        this._uniformBuffer.addUniform(\"vLightData\", 4);\n        this._uniformBuffer.addUniform(\"vLightDiffuse\", 4);\n        this._uniformBuffer.addUniform(\"vLightSpecular\", 4);\n        this._uniformBuffer.addUniform(\"vLightDirection\", 3);\n        this._uniformBuffer.addUniform(\"vLightFalloff\", 4);\n        this._uniformBuffer.addUniform(\"shadowsInfo\", 3);\n        this._uniformBuffer.addUniform(\"depthValues\", 2);\n        this._uniformBuffer.create();\n    }\n    _computeAngleValues() {\n        this._lightAngleScale = 1.0 / Math.max(0.001, Math.cos(this._innerAngle * 0.5) - this._cosHalfAngle);\n        this._lightAngleOffset = -this._cosHalfAngle * this._lightAngleScale;\n    }\n    /**\n     * Sets the passed Effect \"effect\" with the Light textures.\n     * @param effect The effect to update\n     * @param lightIndex The index of the light in the effect to update\n     * @returns The light\n     */\n    transferTexturesToEffect(effect, lightIndex) {\n        if (this.projectionTexture && this.projectionTexture.isReady()) {\n            if (this._projectionTextureViewLightDirty) {\n                this._computeProjectionTextureViewLightMatrix();\n            }\n            if (this._projectionTextureProjectionLightDirty) {\n                this._computeProjectionTextureProjectionLightMatrix();\n            }\n            if (this._projectionTextureDirty) {\n                this._computeProjectionTextureMatrix();\n            }\n            effect.setMatrix(\"textureProjectionMatrix\" + lightIndex, this._projectionTextureMatrix);\n            effect.setTexture(\"projectionLightTexture\" + lightIndex, this.projectionTexture);\n        }\n        if (this._iesProfileTexture && this._iesProfileTexture.isReady()) {\n            effect.setTexture(\"iesLightTexture\" + lightIndex, this._iesProfileTexture);\n        }\n        return this;\n    }\n    /**\n     * Sets the passed Effect object with the SpotLight transformed position (or position if not parented) and normalized direction.\n     * @param effect The effect to update\n     * @param lightIndex The index of the light in the effect to update\n     * @returns The spot light\n     */\n    transferToEffect(effect, lightIndex) {\n        let normalizeDirection;\n        if (this.computeTransformedInformation()) {\n            this._uniformBuffer.updateFloat4(\"vLightData\", this.transformedPosition.x - this._scene.floatingOriginOffset.x, this.transformedPosition.y - this._scene.floatingOriginOffset.y, this.transformedPosition.z - this._scene.floatingOriginOffset.z, this.exponent, lightIndex);\n            normalizeDirection = Vector3.Normalize(this.transformedDirection);\n        }\n        else {\n            this._uniformBuffer.updateFloat4(\"vLightData\", this.position.x - this._scene.floatingOriginOffset.x, this.position.y - this._scene.floatingOriginOffset.y, this.position.z - this._scene.floatingOriginOffset.z, this.exponent, lightIndex);\n            normalizeDirection = Vector3.Normalize(this.direction);\n        }\n        this._uniformBuffer.updateFloat4(\"vLightDirection\", normalizeDirection.x, normalizeDirection.y, normalizeDirection.z, this._cosHalfAngle, lightIndex);\n        this._uniformBuffer.updateFloat4(\"vLightFalloff\", this.range, this._inverseSquaredRange, this._lightAngleScale, this._lightAngleOffset, lightIndex);\n        return this;\n    }\n    transferToNodeMaterialEffect(effect, lightDataUniformName) {\n        let normalizeDirection;\n        if (this.computeTransformedInformation()) {\n            normalizeDirection = Vector3.Normalize(this.transformedDirection);\n        }\n        else {\n            normalizeDirection = Vector3.Normalize(this.direction);\n        }\n        if (this.getScene().useRightHandedSystem) {\n            effect.setFloat3(lightDataUniformName, -normalizeDirection.x, -normalizeDirection.y, -normalizeDirection.z);\n        }\n        else {\n            effect.setFloat3(lightDataUniformName, normalizeDirection.x, normalizeDirection.y, normalizeDirection.z);\n        }\n        return this;\n    }\n    /**\n     * Disposes the light and the associated resources.\n     */\n    dispose() {\n        super.dispose();\n        if (this._projectionTexture) {\n            this._projectionTexture.dispose();\n        }\n        if (this._iesProfileTexture) {\n            this._iesProfileTexture.dispose();\n            this._iesProfileTexture = null;\n        }\n    }\n    /**\n     * Gets the minZ used for shadow according to both the scene and the light.\n     * @param activeCamera The camera we are returning the min for\n     * @returns the depth min z\n     */\n    getDepthMinZ(activeCamera) {\n        const engine = this._scene.getEngine();\n        const minZ = this.shadowMinZ !== undefined ? this.shadowMinZ : (activeCamera?.minZ ?? Constants.ShadowMinZ);\n        return engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? minZ : this._scene.getEngine().isNDCHalfZRange ? 0 : minZ;\n    }\n    /**\n     * Gets the maxZ used for shadow according to both the scene and the light.\n     * @param activeCamera The camera we are returning the max for\n     * @returns the depth max z\n     */\n    getDepthMaxZ(activeCamera) {\n        const engine = this._scene.getEngine();\n        const maxZ = this.shadowMaxZ !== undefined ? this.shadowMaxZ : (activeCamera?.maxZ ?? Constants.ShadowMaxZ);\n        return engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? 0 : maxZ;\n    }\n    /**\n     * Prepares the list of defines specific to the light type.\n     * @param defines the list of defines\n     * @param lightIndex defines the index of the light for the effect\n     */\n    prepareLightSpecificDefines(defines, lightIndex) {\n        defines[\"SPOTLIGHT\" + lightIndex] = true;\n        defines[\"PROJECTEDLIGHTTEXTURE\" + lightIndex] = this.projectionTexture && this.projectionTexture.isReady() ? true : false;\n        defines[\"IESLIGHTTEXTURE\" + lightIndex] = this._iesProfileTexture && this._iesProfileTexture.isReady() ? true : false;\n    }\n}\n__decorate([\n    serialize()\n], SpotLight.prototype, \"angle\", null);\n__decorate([\n    serialize()\n], SpotLight.prototype, \"innerAngle\", null);\n__decorate([\n    serialize()\n], SpotLight.prototype, \"shadowAngleScale\", null);\n__decorate([\n    serialize()\n], SpotLight.prototype, \"exponent\", void 0);\n__decorate([\n    serialize()\n], SpotLight.prototype, \"projectionTextureLightNear\", null);\n__decorate([\n    serialize()\n], SpotLight.prototype, \"projectionTextureLightFar\", null);\n__decorate([\n    serialize()\n], SpotLight.prototype, \"projectionTextureUpDirection\", null);\n__decorate([\n    serializeAsTexture(\"projectedLightTexture\")\n], SpotLight.prototype, \"_projectionTexture\", void 0);\n// Register Class Name\nRegisterClass(\"BABYLON.SpotLight\", SpotLight);\n//# sourceMappingURL=spotLight.js.map","/**\n * Adding an exception here will break traversing through the glTF object tree.\n * This is used for properties that might not be in the glTF object model, but are optional and have a default value.\n * For example, the path /nodes/\\{\\}/extensions/KHR_node_visibility/visible is optional - the object can be deferred without the object fully existing.\n */\nexport const OptionalPathExceptionsList = [\n    {\n        // get the node as object when reading an extension\n        regex: new RegExp(`^/nodes/\\\\d+/extensions/`),\n    },\n];\n/**\n * A converter that takes a glTF Object Model JSON Pointer\n * and transforms it into an ObjectAccessorContainer, allowing\n * objects referenced in the glTF to be associated with their\n * respective Babylon.js objects.\n */\nexport class GLTFPathToObjectConverter {\n    constructor(_gltf, _infoTree) {\n        this._gltf = _gltf;\n        this._infoTree = _infoTree;\n    }\n    /**\n     * The pointer string is represented by a [JSON pointer](https://datatracker.ietf.org/doc/html/rfc6901).\n     * See also https://github.com/KhronosGroup/glTF/blob/main/specification/2.0/ObjectModel.adoc#core-pointers\n     * <animationPointer> := /<rootNode>/<assetIndex>/<propertyPath>\n     * <rootNode> := \"nodes\" | \"materials\" | \"meshes\" | \"cameras\" | \"extensions\"\n     * <assetIndex> := <digit> | <name>\n     * <propertyPath> := <extensionPath> | <standardPath>\n     * <extensionPath> := \"extensions\"/<name>/<standardPath>\n     * <standardPath> := <name> | <name>/<standardPath>\n     * <name> := W+\n     * <digit> := D+\n     *\n     * Examples:\n     *  - \"/nodes/0/rotation\"\n     * - \"/nodes.length\"\n     *  - \"/materials/2/emissiveFactor\"\n     *  - \"/materials/2/pbrMetallicRoughness/baseColorFactor\"\n     *  - \"/materials/2/extensions/KHR_materials_emissive_strength/emissiveStrength\"\n     *\n     * @param path The path to convert\n     * @returns The object and info associated with the path\n     */\n    convert(path) {\n        let objectTree = this._gltf;\n        let infoTree = this._infoTree;\n        let target = undefined;\n        if (!path.startsWith(\"/\")) {\n            throw new Error(\"Path must start with a /\");\n        }\n        const parts = path.split(\"/\");\n        parts.shift();\n        //if the last part has \".length\" in it, separate that as an extra part\n        if (parts[parts.length - 1].includes(\".length\")) {\n            const lastPart = parts[parts.length - 1];\n            const split = lastPart.split(\".\");\n            parts.pop();\n            parts.push(...split);\n        }\n        let ignoreObjectTree = false;\n        for (const part of parts) {\n            const isLength = part === \"length\";\n            if (isLength && !infoTree.__array__) {\n                throw new Error(`Path ${path} is invalid`);\n            }\n            if (infoTree.__ignoreObjectTree__) {\n                ignoreObjectTree = true;\n            }\n            if (infoTree.__array__ && !isLength) {\n                infoTree = infoTree.__array__;\n            }\n            else {\n                infoTree = infoTree[part];\n                if (!infoTree) {\n                    throw new Error(`Path ${path} is invalid`);\n                }\n            }\n            if (!ignoreObjectTree) {\n                if (objectTree === undefined) {\n                    // check if the path is in the exception list. If it is, break and return the last object that was found\n                    const exception = OptionalPathExceptionsList.find((e) => e.regex.test(path));\n                    if (!exception) {\n                        throw new Error(`Path ${path} is invalid`);\n                    }\n                }\n                else if (!isLength) {\n                    objectTree = objectTree?.[part];\n                }\n            }\n            if (infoTree.__target__ || isLength) {\n                target = objectTree;\n            }\n        }\n        return {\n            object: target,\n            info: infoTree,\n        };\n    }\n}\n//# sourceMappingURL=gltfPathToObjectConverter.js.map","/* eslint-disable @typescript-eslint/naming-convention */\nimport { Matrix, Quaternion, Vector2 } from \"core/Maths/math.vector\";\nimport { Constants } from \"core/Engines/constants\";\nimport { Color4 } from \"core/Maths/math.color\";\nimport { SpotLight } from \"core/Lights/spotLight\";\nimport { GLTFPathToObjectConverter } from \"./gltfPathToObjectConverter\";\nconst nodesTree = {\n    length: {\n        type: \"number\",\n        get: (nodes) => nodes.length,\n        getTarget: (nodes) => nodes.map((node) => node._babylonTransformNode),\n        getPropertyName: [() => \"length\"],\n    },\n    __array__: {\n        __target__: true,\n        translation: {\n            type: \"Vector3\",\n            get: (node) => node._babylonTransformNode?.position,\n            set: (value, node) => node._babylonTransformNode?.position.copyFrom(value),\n            getTarget: (node) => node._babylonTransformNode,\n            getPropertyName: [() => \"position\"],\n        },\n        rotation: {\n            type: \"Quaternion\",\n            get: (node) => node._babylonTransformNode?.rotationQuaternion,\n            set: (value, node) => node._babylonTransformNode?.rotationQuaternion?.copyFrom(value),\n            getTarget: (node) => node._babylonTransformNode,\n            getPropertyName: [() => \"rotationQuaternion\"],\n        },\n        scale: {\n            type: \"Vector3\",\n            get: (node) => node._babylonTransformNode?.scaling,\n            set: (value, node) => node._babylonTransformNode?.scaling.copyFrom(value),\n            getTarget: (node) => node._babylonTransformNode,\n            getPropertyName: [() => \"scaling\"],\n        },\n        weights: {\n            length: {\n                type: \"number\",\n                get: (node) => node._numMorphTargets,\n                getTarget: (node) => node._babylonTransformNode,\n                getPropertyName: [() => \"influence\"],\n            },\n            __array__: {\n                __target__: true,\n                type: \"number\",\n                get: (node, index) => (index !== undefined ? node._primitiveBabylonMeshes?.[0].morphTargetManager?.getTarget(index).influence : undefined),\n                // set: (value: number, node: INode, index?: number) => node._babylonTransformNode?.getMorphTargetManager()?.getTarget(index)?.setInfluence(value),\n                getTarget: (node) => node._babylonTransformNode,\n                getPropertyName: [() => \"influence\"],\n            },\n            type: \"number[]\",\n            get: (node, index) => [0], // TODO: get the weights correctly\n            // set: (value: number, node: INode, index?: number) => node._babylonTransformNode?.getMorphTargetManager()?.getTarget(index)?.setInfluence(value),\n            getTarget: (node) => node._babylonTransformNode,\n            getPropertyName: [() => \"influence\"],\n        },\n        // readonly!\n        matrix: {\n            type: \"Matrix\",\n            get: (node) => Matrix.Compose(node._babylonTransformNode?.scaling, node._babylonTransformNode?.rotationQuaternion, node._babylonTransformNode?.position),\n            getTarget: (node) => node._babylonTransformNode,\n            isReadOnly: true,\n        },\n        globalMatrix: {\n            type: \"Matrix\",\n            get: (node) => {\n                const matrix = Matrix.Identity();\n                // RHS/LHS support\n                let rootNode = node.parent;\n                while (rootNode && rootNode.parent) {\n                    rootNode = rootNode.parent;\n                }\n                const forceUpdate = node._babylonTransformNode?.position._isDirty || node._babylonTransformNode?.rotationQuaternion?._isDirty || node._babylonTransformNode?.scaling._isDirty;\n                if (rootNode) {\n                    // take the parent root node's world matrix, invert it, and multiply it with the current node's world matrix\n                    // This will provide the global matrix, ignoring the RHS->LHS conversion\n                    const rootMatrix = rootNode._babylonTransformNode?.computeWorldMatrix(true).invert();\n                    if (rootMatrix) {\n                        node._babylonTransformNode?.computeWorldMatrix(forceUpdate)?.multiplyToRef(rootMatrix, matrix);\n                    }\n                }\n                else if (node._babylonTransformNode) {\n                    matrix.copyFrom(node._babylonTransformNode.computeWorldMatrix(forceUpdate));\n                }\n                return matrix;\n            },\n            getTarget: (node) => node._babylonTransformNode,\n            isReadOnly: true,\n        },\n        extensions: {\n            EXT_lights_ies: {\n                multiplier: {\n                    type: \"number\",\n                    get: (node) => {\n                        return node._babylonTransformNode?.getChildren((child) => child instanceof SpotLight, true)[0]?.intensity;\n                    },\n                    getTarget: (node) => node._babylonTransformNode?.getChildren((child) => child instanceof SpotLight, true)[0],\n                    set: (value, node) => {\n                        if (node._babylonTransformNode) {\n                            const light = node._babylonTransformNode.getChildren((child) => child instanceof SpotLight, true)[0];\n                            if (light) {\n                                light.intensity = value;\n                            }\n                        }\n                    },\n                },\n                color: {\n                    type: \"Color3\",\n                    get: (node) => {\n                        return node._babylonTransformNode?.getChildren((child) => child instanceof SpotLight, true)[0]?.diffuse;\n                    },\n                    getTarget: (node) => node._babylonTransformNode?.getChildren((child) => child instanceof SpotLight, true)[0],\n                    set: (value, node) => {\n                        if (node._babylonTransformNode) {\n                            const light = node._babylonTransformNode.getChildren((child) => child instanceof SpotLight, true)[0];\n                            if (light) {\n                                light.diffuse = value;\n                            }\n                        }\n                    },\n                },\n            },\n        },\n    },\n};\nconst animationsTree = {\n    length: {\n        type: \"number\",\n        get: (animations) => animations.length,\n        getTarget: (animations) => animations.map((animation) => animation._babylonAnimationGroup),\n        getPropertyName: [() => \"length\"],\n    },\n    __array__: {},\n};\nconst meshesTree = {\n    length: {\n        type: \"number\",\n        get: (meshes) => meshes.length,\n        getTarget: (meshes) => meshes.map((mesh) => mesh.primitives[0]._instanceData?.babylonSourceMesh),\n        getPropertyName: [() => \"length\"],\n    },\n    __array__: {},\n};\nconst camerasTree = {\n    __array__: {\n        __target__: true,\n        orthographic: {\n            xmag: {\n                componentsCount: 2,\n                type: \"Vector2\",\n                get: (camera) => new Vector2(camera._babylonCamera?.orthoLeft ?? 0, camera._babylonCamera?.orthoRight ?? 0),\n                set: (value, camera) => {\n                    if (camera._babylonCamera) {\n                        camera._babylonCamera.orthoLeft = value.x;\n                        camera._babylonCamera.orthoRight = value.y;\n                    }\n                },\n                getTarget: (camera) => camera,\n                getPropertyName: [() => \"orthoLeft\", () => \"orthoRight\"],\n            },\n            ymag: {\n                componentsCount: 2,\n                type: \"Vector2\",\n                get: (camera) => new Vector2(camera._babylonCamera?.orthoBottom ?? 0, camera._babylonCamera?.orthoTop ?? 0),\n                set: (value, camera) => {\n                    if (camera._babylonCamera) {\n                        camera._babylonCamera.orthoBottom = value.x;\n                        camera._babylonCamera.orthoTop = value.y;\n                    }\n                },\n                getTarget: (camera) => camera,\n                getPropertyName: [() => \"orthoBottom\", () => \"orthoTop\"],\n            },\n            zfar: {\n                type: \"number\",\n                get: (camera) => camera._babylonCamera?.maxZ,\n                set: (value, camera) => {\n                    if (camera._babylonCamera) {\n                        camera._babylonCamera.maxZ = value;\n                    }\n                },\n                getTarget: (camera) => camera,\n                getPropertyName: [() => \"maxZ\"],\n            },\n            znear: {\n                type: \"number\",\n                get: (camera) => camera._babylonCamera?.minZ,\n                set: (value, camera) => {\n                    if (camera._babylonCamera) {\n                        camera._babylonCamera.minZ = value;\n                    }\n                },\n                getTarget: (camera) => camera,\n                getPropertyName: [() => \"minZ\"],\n            },\n        },\n        perspective: {\n            aspectRatio: {\n                type: \"number\",\n                get: (camera) => camera._babylonCamera?.getEngine().getAspectRatio(camera._babylonCamera),\n                getTarget: (camera) => camera,\n                getPropertyName: [() => \"aspectRatio\"],\n                isReadOnly: true, // might not be the case for glTF?\n            },\n            yfov: {\n                type: \"number\",\n                get: (camera) => camera._babylonCamera?.fov,\n                set: (value, camera) => {\n                    if (camera._babylonCamera) {\n                        camera._babylonCamera.fov = value;\n                    }\n                },\n                getTarget: (camera) => camera,\n                getPropertyName: [() => \"fov\"],\n            },\n            zfar: {\n                type: \"number\",\n                get: (camera) => camera._babylonCamera?.maxZ,\n                set: (value, camera) => {\n                    if (camera._babylonCamera) {\n                        camera._babylonCamera.maxZ = value;\n                    }\n                },\n                getTarget: (camera) => camera,\n                getPropertyName: [() => \"maxZ\"],\n            },\n            znear: {\n                type: \"number\",\n                get: (camera) => camera._babylonCamera?.minZ,\n                set: (value, camera) => {\n                    if (camera._babylonCamera) {\n                        camera._babylonCamera.minZ = value;\n                    }\n                },\n                getTarget: (camera) => camera,\n                getPropertyName: [() => \"minZ\"],\n            },\n        },\n    },\n};\nconst materialsTree = {\n    __array__: {\n        __target__: true,\n        emissiveFactor: {\n            type: \"Color3\",\n            get: (material, index, payload) => GetMaterial(material, index, payload).emissiveColor,\n            set: (value, material, index, payload) => GetMaterial(material, index, payload).emissiveColor.copyFrom(value),\n            getTarget: (material, index, payload) => GetMaterial(material, index, payload),\n            getPropertyName: [() => \"emissiveColor\"],\n        },\n        emissiveTexture: {\n            extensions: {\n                KHR_texture_transform: GenerateTextureMap(\"emissiveTexture\"),\n            },\n        },\n        normalTexture: {\n            scale: {\n                type: \"number\",\n                get: (material, index, payload) => GetTexture(material, payload, \"bumpTexture\")?.level,\n                set: (value, material, index, payload) => {\n                    const texture = GetTexture(material, payload, \"bumpTexture\");\n                    if (texture) {\n                        texture.level = value;\n                    }\n                },\n                getTarget: (material, index, payload) => GetMaterial(material, index, payload),\n                getPropertyName: [() => \"level\"],\n            },\n            extensions: {\n                KHR_texture_transform: GenerateTextureMap(\"bumpTexture\"),\n            },\n        },\n        occlusionTexture: {\n            strength: {\n                type: \"number\",\n                get: (material, index, payload) => GetMaterial(material, index, payload).ambientTextureStrength,\n                set: (value, material, index, payload) => {\n                    const mat = GetMaterial(material, index, payload);\n                    if (mat) {\n                        mat.ambientTextureStrength = value;\n                    }\n                },\n                getTarget: (material, index, payload) => GetMaterial(material, index, payload),\n                getPropertyName: [() => \"ambientTextureStrength\"],\n            },\n            extensions: {\n                KHR_texture_transform: GenerateTextureMap(\"ambientTexture\"),\n            },\n        },\n        pbrMetallicRoughness: {\n            baseColorFactor: {\n                type: \"Color4\",\n                get: (material, index, payload) => {\n                    const mat = GetMaterial(material, index, payload);\n                    return Color4.FromColor3(mat.albedoColor, mat.alpha);\n                },\n                set: (value, material, index, payload) => {\n                    const mat = GetMaterial(material, index, payload);\n                    mat.albedoColor.set(value.r, value.g, value.b);\n                    mat.alpha = value.a;\n                },\n                getTarget: (material, index, payload) => GetMaterial(material, index, payload),\n                // This is correct on the animation level, but incorrect as a single property of a type Color4\n                getPropertyName: [() => \"albedoColor\", () => \"alpha\"],\n            },\n            baseColorTexture: {\n                extensions: {\n                    KHR_texture_transform: GenerateTextureMap(\"albedoTexture\"),\n                },\n            },\n            metallicFactor: {\n                type: \"number\",\n                get: (material, index, payload) => GetMaterial(material, index, payload).metallic,\n                set: (value, material, index, payload) => {\n                    const mat = GetMaterial(material, index, payload);\n                    if (mat) {\n                        mat.metallic = value;\n                    }\n                },\n                getTarget: (material, index, payload) => GetMaterial(material, index, payload),\n                getPropertyName: [() => \"metallic\"],\n            },\n            roughnessFactor: {\n                type: \"number\",\n                get: (material, index, payload) => GetMaterial(material, index, payload).roughness,\n                set: (value, material, index, payload) => {\n                    const mat = GetMaterial(material, index, payload);\n                    if (mat) {\n                        mat.roughness = value;\n                    }\n                },\n                getTarget: (material, index, payload) => GetMaterial(material, index, payload),\n                getPropertyName: [() => \"roughness\"],\n            },\n            metallicRoughnessTexture: {\n                extensions: {\n                    KHR_texture_transform: GenerateTextureMap(\"metallicTexture\"),\n                },\n            },\n        },\n        extensions: {\n            KHR_materials_anisotropy: {\n                anisotropyStrength: {\n                    type: \"number\",\n                    get: (material, index, payload) => GetMaterial(material, index, payload).anisotropy.intensity,\n                    set: (value, material, index, payload) => {\n                        GetMaterial(material, index, payload).anisotropy.intensity = value;\n                    },\n                    getTarget: (material, index, payload) => GetMaterial(material, index, payload),\n                    getPropertyName: [() => \"anisotropy.intensity\"],\n                },\n                anisotropyRotation: {\n                    type: \"number\",\n                    get: (material, index, payload) => GetMaterial(material, index, payload).anisotropy.angle,\n                    set: (value, material, index, payload) => {\n                        GetMaterial(material, index, payload).anisotropy.angle = value;\n                    },\n                    getTarget: (material, index, payload) => GetMaterial(material, index, payload),\n                    getPropertyName: [() => \"anisotropy.angle\"],\n                },\n                anisotropyTexture: {\n                    extensions: {\n                        KHR_texture_transform: GenerateTextureMap(\"anisotropy\", \"texture\"),\n                    },\n                },\n            },\n            KHR_materials_clearcoat: {\n                clearcoatFactor: {\n                    type: \"number\",\n                    get: (material, index, payload) => GetMaterial(material, index, payload).clearCoat.intensity,\n                    set: (value, material, index, payload) => {\n                        GetMaterial(material, index, payload).clearCoat.intensity = value;\n                    },\n                    getTarget: (material, index, payload) => GetMaterial(material, index, payload),\n                    getPropertyName: [() => \"clearCoat.intensity\"],\n                },\n                clearcoatRoughnessFactor: {\n                    type: \"number\",\n                    get: (material, index, payload) => GetMaterial(material, index, payload).clearCoat.roughness,\n                    set: (value, material, index, payload) => {\n                        GetMaterial(material, index, payload).clearCoat.roughness = value;\n                    },\n                    getTarget: (material, index, payload) => GetMaterial(material, index, payload),\n                    getPropertyName: [() => \"clearCoat.roughness\"],\n                },\n                clearcoatTexture: {\n                    extensions: {\n                        KHR_texture_transform: GenerateTextureMap(\"clearCoat\", \"texture\"),\n                    },\n                },\n                clearcoatNormalTexture: {\n                    scale: {\n                        type: \"number\",\n                        get: (material, index, payload) => GetMaterial(material, index, payload).clearCoat.bumpTexture?.level,\n                        getTarget: GetMaterial,\n                        set: (value, material, index, payload) => (GetMaterial(material, index, payload).clearCoat.bumpTexture.level = value),\n                    },\n                    extensions: {\n                        KHR_texture_transform: GenerateTextureMap(\"clearCoat\", \"bumpTexture\"),\n                    },\n                },\n                clearcoatRoughnessTexture: {\n                    extensions: {\n                        KHR_texture_transform: GenerateTextureMap(\"clearCoat\", \"textureRoughness\"),\n                    },\n                },\n            },\n            KHR_materials_dispersion: {\n                dispersion: {\n                    type: \"number\",\n                    get: (material, index, payload) => GetMaterial(material, index, payload).subSurface.dispersion,\n                    getTarget: GetMaterial,\n                    set: (value, material, index, payload) => (GetMaterial(material, index, payload).subSurface.dispersion = value),\n                },\n            },\n            KHR_materials_emissive_strength: {\n                emissiveStrength: {\n                    type: \"number\",\n                    get: (material, index, payload) => GetMaterial(material, index, payload).emissiveIntensity,\n                    getTarget: GetMaterial,\n                    set: (value, material, index, payload) => (GetMaterial(material, index, payload).emissiveIntensity = value),\n                },\n            },\n            KHR_materials_ior: {\n                ior: {\n                    type: \"number\",\n                    get: (material, index, payload) => GetMaterial(material, index, payload).indexOfRefraction,\n                    getTarget: GetMaterial,\n                    set: (value, material, index, payload) => (GetMaterial(material, index, payload).indexOfRefraction = value),\n                },\n            },\n            KHR_materials_iridescence: {\n                iridescenceFactor: {\n                    type: \"number\",\n                    get: (material, index, payload) => GetMaterial(material, index, payload).iridescence.intensity,\n                    getTarget: GetMaterial,\n                    set: (value, material, index, payload) => (GetMaterial(material, index, payload).iridescence.intensity = value),\n                },\n                iridescenceIor: {\n                    type: \"number\",\n                    get: (material, index, payload) => GetMaterial(material, index, payload).iridescence.indexOfRefraction,\n                    getTarget: GetMaterial,\n                    set: (value, material, index, payload) => (GetMaterial(material, index, payload).iridescence.indexOfRefraction = value),\n                },\n                iridescenceTexture: {\n                    extensions: {\n                        KHR_texture_transform: GenerateTextureMap(\"iridescence\", \"texture\"),\n                    },\n                },\n                iridescenceThicknessMaximum: {\n                    type: \"number\",\n                    get: (material, index, payload) => GetMaterial(material, index, payload).iridescence.maximumThickness,\n                    getTarget: GetMaterial,\n                    set: (value, material, index, payload) => (GetMaterial(material, index, payload).iridescence.maximumThickness = value),\n                },\n                iridescenceThicknessMinimum: {\n                    type: \"number\",\n                    get: (material, index, payload) => GetMaterial(material, index, payload).iridescence.minimumThickness,\n                    getTarget: GetMaterial,\n                    set: (value, material, index, payload) => (GetMaterial(material, index, payload).iridescence.minimumThickness = value),\n                },\n                iridescenceThicknessTexture: {\n                    extensions: {\n                        KHR_texture_transform: GenerateTextureMap(\"iridescence\", \"thicknessTexture\"),\n                    },\n                },\n            },\n            KHR_materials_sheen: {\n                sheenColorFactor: {\n                    type: \"Color3\",\n                    get: (material, index, payload) => GetMaterial(material, index, payload).sheen.color,\n                    getTarget: GetMaterial,\n                    set: (value, material, index, payload) => GetMaterial(material, index, payload).sheen.color.copyFrom(value),\n                },\n                sheenColorTexture: {\n                    extensions: {\n                        KHR_texture_transform: GenerateTextureMap(\"sheen\", \"texture\"),\n                    },\n                },\n                sheenRoughnessFactor: {\n                    type: \"number\",\n                    get: (material, index, payload) => GetMaterial(material, index, payload).sheen.intensity,\n                    getTarget: GetMaterial,\n                    set: (value, material, index, payload) => (GetMaterial(material, index, payload).sheen.intensity = value),\n                },\n                sheenRoughnessTexture: {\n                    extensions: {\n                        KHR_texture_transform: GenerateTextureMap(\"sheen\", \"thicknessTexture\"),\n                    },\n                },\n            },\n            KHR_materials_specular: {\n                specularFactor: {\n                    type: \"number\",\n                    get: (material, index, payload) => GetMaterial(material, index, payload).metallicF0Factor,\n                    getTarget: GetMaterial,\n                    set: (value, material, index, payload) => (GetMaterial(material, index, payload).metallicF0Factor = value),\n                    getPropertyName: [() => \"metallicF0Factor\"],\n                },\n                specularColorFactor: {\n                    type: \"Color3\",\n                    get: (material, index, payload) => GetMaterial(material, index, payload).metallicReflectanceColor,\n                    getTarget: GetMaterial,\n                    set: (value, material, index, payload) => GetMaterial(material, index, payload).metallicReflectanceColor.copyFrom(value),\n                    getPropertyName: [() => \"metallicReflectanceColor\"],\n                },\n                specularTexture: {\n                    extensions: {\n                        KHR_texture_transform: GenerateTextureMap(\"metallicReflectanceTexture\"),\n                    },\n                },\n                specularColorTexture: {\n                    extensions: {\n                        KHR_texture_transform: GenerateTextureMap(\"reflectanceTexture\"),\n                    },\n                },\n            },\n            KHR_materials_transmission: {\n                transmissionFactor: {\n                    type: \"number\",\n                    get: (material, index, payload) => GetMaterial(material, index, payload).subSurface.refractionIntensity,\n                    getTarget: GetMaterial,\n                    set: (value, material, index, payload) => (GetMaterial(material, index, payload).subSurface.refractionIntensity = value),\n                    getPropertyName: [() => \"subSurface.refractionIntensity\"],\n                },\n                transmissionTexture: {\n                    extensions: {\n                        KHR_texture_transform: GenerateTextureMap(\"subSurface\", \"refractionIntensityTexture\"),\n                    },\n                },\n            },\n            KHR_materials_diffuse_transmission: {\n                diffuseTransmissionFactor: {\n                    type: \"number\",\n                    get: (material, index, payload) => GetMaterial(material, index, payload).subSurface.translucencyIntensity,\n                    getTarget: GetMaterial,\n                    set: (value, material, index, payload) => (GetMaterial(material, index, payload).subSurface.translucencyIntensity = value),\n                },\n                diffuseTransmissionTexture: {\n                    extensions: {\n                        KHR_texture_transform: GenerateTextureMap(\"subSurface\", \"translucencyIntensityTexture\"),\n                    },\n                },\n                diffuseTransmissionColorFactor: {\n                    type: \"Color3\",\n                    get: (material, index, payload) => GetMaterial(material, index, payload).subSurface.translucencyColor,\n                    getTarget: GetMaterial,\n                    set: (value, material, index, payload) => value && GetMaterial(material, index, payload).subSurface.translucencyColor?.copyFrom(value),\n                },\n                diffuseTransmissionColorTexture: {\n                    extensions: {\n                        KHR_texture_transform: GenerateTextureMap(\"subSurface\", \"translucencyColorTexture\"),\n                    },\n                },\n            },\n            KHR_materials_volume: {\n                attenuationColor: {\n                    type: \"Color3\",\n                    get: (material, index, payload) => GetMaterial(material, index, payload).subSurface.tintColor,\n                    getTarget: GetMaterial,\n                    set: (value, material, index, payload) => GetMaterial(material, index, payload).subSurface.tintColor.copyFrom(value),\n                },\n                attenuationDistance: {\n                    type: \"number\",\n                    get: (material, index, payload) => GetMaterial(material, index, payload).subSurface.tintColorAtDistance,\n                    getTarget: GetMaterial,\n                    set: (value, material, index, payload) => (GetMaterial(material, index, payload).subSurface.tintColorAtDistance = value),\n                },\n                thicknessFactor: {\n                    type: \"number\",\n                    get: (material, index, payload) => GetMaterial(material, index, payload).subSurface.maximumThickness,\n                    getTarget: GetMaterial,\n                    set: (value, material, index, payload) => (GetMaterial(material, index, payload).subSurface.maximumThickness = value),\n                },\n                thicknessTexture: {\n                    extensions: {\n                        KHR_texture_transform: GenerateTextureMap(\"subSurface\", \"thicknessTexture\"),\n                    },\n                },\n            },\n        },\n    },\n};\nconst extensionsTree = {\n    KHR_lights_punctual: {\n        lights: {\n            length: {\n                type: \"number\",\n                get: (lights) => lights.length,\n                getTarget: (lights) => lights.map((light) => light._babylonLight),\n                getPropertyName: [(_lights) => \"length\"],\n            },\n            __array__: {\n                __target__: true,\n                color: {\n                    type: \"Color3\",\n                    get: (light) => light._babylonLight?.diffuse,\n                    set: (value, light) => light._babylonLight?.diffuse.copyFrom(value),\n                    getTarget: (light) => light._babylonLight,\n                    getPropertyName: [(_light) => \"diffuse\"],\n                },\n                intensity: {\n                    type: \"number\",\n                    get: (light) => light._babylonLight?.intensity,\n                    set: (value, light) => (light._babylonLight ? (light._babylonLight.intensity = value) : undefined),\n                    getTarget: (light) => light._babylonLight,\n                    getPropertyName: [(_light) => \"intensity\"],\n                },\n                range: {\n                    type: \"number\",\n                    get: (light) => light._babylonLight?.range,\n                    set: (value, light) => (light._babylonLight ? (light._babylonLight.range = value) : undefined),\n                    getTarget: (light) => light._babylonLight,\n                    getPropertyName: [(_light) => \"range\"],\n                },\n                spot: {\n                    innerConeAngle: {\n                        type: \"number\",\n                        get: (light) => light._babylonLight?.innerAngle,\n                        set: (value, light) => (light._babylonLight ? (light._babylonLight.innerAngle = value) : undefined),\n                        getTarget: (light) => light._babylonLight,\n                        getPropertyName: [(_light) => \"innerConeAngle\"],\n                    },\n                    outerConeAngle: {\n                        type: \"number\",\n                        get: (light) => light._babylonLight?.angle,\n                        set: (value, light) => (light._babylonLight ? (light._babylonLight.angle = value) : undefined),\n                        getTarget: (light) => light._babylonLight,\n                        getPropertyName: [(_light) => \"outerConeAngle\"],\n                    },\n                },\n            },\n        },\n    },\n    EXT_lights_ies: {\n        lights: {\n            length: {\n                type: \"number\",\n                get: (lights) => lights.length,\n                getTarget: (lights) => lights.map((light) => light._babylonLight),\n                getPropertyName: [(_lights) => \"length\"],\n            },\n        },\n    },\n    EXT_lights_image_based: {\n        lights: {\n            length: {\n                type: \"number\",\n                get: (lights) => lights.length,\n                getTarget: (lights) => lights.map((light) => light._babylonTexture),\n                getPropertyName: [(_lights) => \"length\"],\n            },\n            __array__: {\n                __target__: true,\n                intensity: {\n                    type: \"number\",\n                    get: (light) => light._babylonTexture?.level,\n                    set: (value, light) => {\n                        if (light._babylonTexture) {\n                            light._babylonTexture.level = value;\n                        }\n                    },\n                    getTarget: (light) => light._babylonTexture,\n                },\n                rotation: {\n                    type: \"Quaternion\",\n                    get: (light) => light._babylonTexture && Quaternion.FromRotationMatrix(light._babylonTexture?.getReflectionTextureMatrix()),\n                    set: (value, light) => {\n                        if (!light._babylonTexture) {\n                            return;\n                        }\n                        // Invert the rotation so that positive rotation is counter-clockwise.\n                        if (!light._babylonTexture.getScene()?.useRightHandedSystem) {\n                            value = Quaternion.Inverse(value);\n                        }\n                        Matrix.FromQuaternionToRef(value, light._babylonTexture.getReflectionTextureMatrix());\n                    },\n                    getTarget: (light) => light._babylonTexture,\n                },\n            },\n        },\n    },\n};\nfunction GetTexture(material, payload, textureType, textureInObject) {\n    const babylonMaterial = GetMaterial(material, payload);\n    return textureInObject ? babylonMaterial[textureType][textureInObject] : babylonMaterial[textureType];\n}\nfunction GetMaterial(material, _index, payload) {\n    return material._data?.[payload?.fillMode ?? Constants.MATERIAL_TriangleFillMode]?.babylonMaterial;\n}\nfunction GenerateTextureMap(textureType, textureInObject) {\n    return {\n        offset: {\n            componentsCount: 2,\n            // assuming two independent values for u and v, and NOT a Vector2\n            type: \"Vector2\",\n            get: (material, _index, payload) => {\n                const texture = GetTexture(material, payload, textureType, textureInObject);\n                return new Vector2(texture?.uOffset, texture?.vOffset);\n            },\n            getTarget: GetMaterial,\n            set: (value, material, _index, payload) => {\n                const texture = GetTexture(material, payload, textureType, textureInObject);\n                (texture.uOffset = value.x), (texture.vOffset = value.y);\n            },\n            getPropertyName: [\n                () => `${textureType}${textureInObject ? \".\" + textureInObject : \"\"}.uOffset`,\n                () => `${textureType}${textureInObject ? \".\" + textureInObject : \"\"}.vOffset`,\n            ],\n        },\n        rotation: {\n            type: \"number\",\n            get: (material, _index, payload) => GetTexture(material, payload, textureType, textureInObject)?.wAng,\n            getTarget: GetMaterial,\n            set: (value, material, _index, payload) => (GetTexture(material, payload, textureType, textureInObject).wAng = value),\n            getPropertyName: [() => `${textureType}${textureInObject ? \".\" + textureInObject : \"\"}.wAng`],\n        },\n        scale: {\n            componentsCount: 2,\n            type: \"Vector2\",\n            get: (material, _index, payload) => {\n                const texture = GetTexture(material, payload, textureType, textureInObject);\n                return new Vector2(texture?.uScale, texture?.vScale);\n            },\n            getTarget: GetMaterial,\n            set: (value, material, index, payload) => {\n                const texture = GetTexture(material, payload, textureType, textureInObject);\n                (texture.uScale = value.x), (texture.vScale = value.y);\n            },\n            getPropertyName: [\n                () => `${textureType}${textureInObject ? \".\" + textureInObject : \"\"}.uScale`,\n                () => `${textureType}${textureInObject ? \".\" + textureInObject : \"\"}.vScale`,\n            ],\n        },\n    };\n}\nconst objectModelMapping = {\n    cameras: camerasTree,\n    nodes: nodesTree,\n    materials: materialsTree,\n    extensions: extensionsTree,\n    animations: animationsTree,\n    meshes: meshesTree,\n};\n/**\n * get a path-to-object converter for the given glTF tree\n * @param gltf the glTF tree to use\n * @returns a path-to-object converter for the given glTF tree\n */\nexport function GetPathToObjectConverter(gltf) {\n    return new GLTFPathToObjectConverter(gltf, objectModelMapping);\n}\n/**\n * This function will return the object accessor for the given key in the object model\n * If the key is not found, it will return undefined\n * @param key the key to get the mapping for, for example /materials/\\{\\}/emissiveFactor\n * @returns an object accessor for the given key, or undefined if the key is not found\n */\nexport function GetMappingForKey(key) {\n    // replace every `{}` in key with __array__ to match the object model\n    const keyParts = key.split(\"/\").map((part) => part.replace(/{}/g, \"__array__\"));\n    let current = objectModelMapping;\n    for (const part of keyParts) {\n        // make sure part is not empty\n        if (!part) {\n            continue;\n        }\n        current = current[part];\n    }\n    // validate that current is an object accessor\n    if (current && current.type && current.get) {\n        return current;\n    }\n    return undefined;\n}\n/**\n * Set interpolation for a specific key in the object model\n * @param key the key to set, for example /materials/\\{\\}/emissiveFactor\n * @param interpolation the interpolation elements array\n */\nexport function SetInterpolationForKey(key, interpolation) {\n    // replace every `{}` in key with __array__ to match the object model\n    const keyParts = key.split(\"/\").map((part) => part.replace(/{}/g, \"__array__\"));\n    let current = objectModelMapping;\n    for (const part of keyParts) {\n        // make sure part is not empty\n        if (!part) {\n            continue;\n        }\n        current = current[part];\n    }\n    // validate that the current object is an object accessor\n    if (current && current.type && current.get) {\n        current.interpolation = interpolation;\n    }\n}\n/**\n * This will ad a new object accessor in the object model at the given key.\n * Note that this will NOT change the typescript types. To do that you will need to change the interface itself (extending it in the module that uses it)\n * @param key the key to add the object accessor at. For example /cameras/\\{\\}/perspective/aspectRatio\n * @param accessor the object accessor to add\n */\nexport function AddObjectAccessorToKey(key, accessor) {\n    // replace every `{}` in key with __array__ to match the object model\n    const keyParts = key.split(\"/\").map((part) => part.replace(/{}/g, \"__array__\"));\n    let current = objectModelMapping;\n    for (const part of keyParts) {\n        // make sure part is not empty\n        if (!part) {\n            continue;\n        }\n        if (!current[part]) {\n            if (part === \"?\") {\n                current.__ignoreObjectTree__ = true;\n                continue;\n            }\n            current[part] = {};\n            // if the part is __array__ then add the __target__ property\n            if (part === \"__array__\") {\n                current[part].__target__ = true;\n            }\n        }\n        current = current[part];\n    }\n    Object.assign(current, accessor);\n}\n//# sourceMappingURL=objectModelMapping.js.map"],"names":[],"mappings":"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"}