{"version":3,"file":"flowGraphVectorMathBlocks-Co0HooWz.esm.min.js","sources":["../../../../../dev/core/dist/Maths/math.vector.functions.js","../../../../../dev/core/dist/FlowGraph/Blocks/Data/Math/flowGraphVectorMathBlocks.js"],"sourcesContent":["import { Clamp } from \"./math.scalar.functions\";\nimport { Quaternion, Vector3 } from \"./math.vector\";\n/**\n * Creates a string representation of the IVector2Like\n * @param vector defines the IVector2Like to stringify\n * @param decimalCount defines the number of decimals to use\n * @returns a string with the IVector2Like coordinates.\n */\nexport function Vector2ToFixed(vector, decimalCount) {\n    return `{X: ${vector.x.toFixed(decimalCount)} Y: ${vector.y.toFixed(decimalCount)}}`;\n}\n/**\n * Computes the dot product of two IVector3Like objects.\n * @param a defines the first vector\n * @param b defines the second vector\n * @returns the dot product\n */\nexport function Vector3Dot(a, b) {\n    return a.x * b.x + a.y * b.y + a.z * b.z;\n}\n/**\n * Sets the given floats into the result.\n * @param x defines the x coordinate\n * @param y defines the y coordinate\n * @param z defines the z coordinate\n * @param result defines the target vector\n * @returns the result vector\n */\nexport function Vector3FromFloatsToRef(x, y, z, result) {\n    result.x = x;\n    result.y = y;\n    result.z = z;\n    return result;\n}\n/**\n * Stores the scaled values of a vector into the result.\n * @param a defines the source vector\n * @param scale defines the scale factor\n * @param result defines the target vector\n * @returns the scaled vector\n */\nexport function Vector3ScaleToRef(a, scale, result) {\n    result.x = a.x * scale;\n    result.y = a.y * scale;\n    result.z = a.z * scale;\n    return result;\n}\n/**\n * Creates a string representation of the Vector3\n * @param vector defines the Vector3 to stringify\n * @param decimalCount defines the number of decimals to use\n * @returns a string with the Vector3 coordinates.\n */\nexport function Vector3ToFixed(vector, decimalCount) {\n    return `{X: ${vector._x.toFixed(decimalCount)} Y: ${vector._y.toFixed(decimalCount)} Z: ${vector._z.toFixed(decimalCount)}}`;\n}\n/**\n * Creates a string representation of the Vector4\n * @param vector defines the Vector4 to stringify\n * @param decimalCount defines the number of decimals to use\n * @returns a string with the Vector4 coordinates.\n */\nexport function Vector4ToFixed(vector, decimalCount) {\n    return `{X: ${vector.x.toFixed(decimalCount)} Y: ${vector.y.toFixed(decimalCount)} Z: ${vector.z.toFixed(decimalCount)} W: ${vector.w.toFixed(decimalCount)}}`;\n}\n/**\n * Returns the angle in radians between two quaternions\n * @param q1 defines the first quaternion\n * @param q2 defines the second quaternion\n * @returns the angle in radians between the two quaternions\n */\nexport function GetAngleBetweenQuaternions(q1, q2) {\n    return Math.acos(Clamp(Quaternion.Dot(q1, q2))) * 2;\n}\n/**\n * Creates a quaternion from two direction vectors\n * @param a defines the first direction vector\n * @param b defines the second direction vector\n * @returns the target quaternion\n */\nexport function GetQuaternionFromDirections(a, b) {\n    const result = new Quaternion();\n    GetQuaternionFromDirectionsToRef(a, b, result);\n    return result;\n}\n/**\n * Creates a quaternion from two direction vectors\n * @param a defines the first direction vector\n * @param b defines the second direction vector\n * @param result defines the target quaternion\n * @returns the target quaternion\n */\nexport function GetQuaternionFromDirectionsToRef(a, b, result) {\n    const axis = Vector3.Cross(a, b);\n    const angle = Math.acos(Clamp(Vector3Dot(a, b), -1, 1));\n    Quaternion.RotationAxisToRef(axis, angle, result);\n    return result;\n}\n//# sourceMappingURL=math.vector.functions.js.map","import { FlowGraphBlock } from \"core/FlowGraph/flowGraphBlock\";\nimport { RichTypeVector3, RichTypeNumber, RichTypeAny, RichTypeVector2, RichTypeMatrix, getRichTypeByFlowGraphType, RichTypeQuaternion, RichTypeBoolean, } from \"core/FlowGraph/flowGraphRichTypes\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock\";\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock\";\nimport { Quaternion, Vector3, Vector4 } from \"core/Maths/math.vector\";\nimport { _GetClassNameOf } from \"core/FlowGraph/utils\";\nimport { GetAngleBetweenQuaternions, GetQuaternionFromDirections } from \"../../../../Maths/math.vector.functions\";\nconst AxisCacheName = \"cachedOperationAxis\";\nconst AngleCacheName = \"cachedOperationAngle\";\nconst CacheExecIdName = \"cachedExecutionId\";\n/**\n * Vector length block.\n */\nexport class FlowGraphLengthBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicLength(a), \"FlowGraphLengthBlock\" /* FlowGraphBlockNames.Length */, config);\n    }\n    _polymorphicLength(a) {\n        const aClassName = _GetClassNameOf(a);\n        switch (aClassName) {\n            case \"Vector2\" /* FlowGraphTypes.Vector2 */:\n            case \"Vector3\" /* FlowGraphTypes.Vector3 */:\n            case \"Vector4\" /* FlowGraphTypes.Vector4 */:\n            case \"Quaternion\" /* FlowGraphTypes.Quaternion */:\n                return a.length();\n            default:\n                throw new Error(`Cannot compute length of value ${a}`);\n        }\n    }\n}\nRegisterClass(\"FlowGraphLengthBlock\" /* FlowGraphBlockNames.Length */, FlowGraphLengthBlock);\n/**\n * Vector normalize block.\n */\nexport class FlowGraphNormalizeBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicNormalize(a), \"FlowGraphNormalizeBlock\" /* FlowGraphBlockNames.Normalize */, config);\n    }\n    _polymorphicNormalize(a) {\n        const aClassName = _GetClassNameOf(a);\n        let normalized;\n        switch (aClassName) {\n            case \"Vector2\" /* FlowGraphTypes.Vector2 */:\n            case \"Vector3\" /* FlowGraphTypes.Vector3 */:\n            case \"Vector4\" /* FlowGraphTypes.Vector4 */:\n            case \"Quaternion\" /* FlowGraphTypes.Quaternion */:\n                normalized = a.normalizeToNew();\n                if (this.config?.nanOnZeroLength) {\n                    const length = a.length();\n                    if (length === 0) {\n                        normalized.setAll(NaN);\n                    }\n                }\n                return normalized;\n            default:\n                throw new Error(`Cannot normalize value ${a}`);\n        }\n    }\n}\nRegisterClass(\"FlowGraphNormalizeBlock\" /* FlowGraphBlockNames.Normalize */, FlowGraphNormalizeBlock);\n/**\n * Dot product block.\n */\nexport class FlowGraphDotBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, RichTypeNumber, (a, b) => this._polymorphicDot(a, b), \"FlowGraphDotBlock\" /* FlowGraphBlockNames.Dot */, config);\n    }\n    _polymorphicDot(a, b) {\n        const className = _GetClassNameOf(a);\n        switch (className) {\n            case \"Vector2\" /* FlowGraphTypes.Vector2 */:\n            case \"Vector3\" /* FlowGraphTypes.Vector3 */:\n            case \"Vector4\" /* FlowGraphTypes.Vector4 */:\n            case \"Quaternion\" /* FlowGraphTypes.Quaternion */:\n                // casting is needed because dot requires both to be the same type\n                return a.dot(b);\n            default:\n                throw new Error(`Cannot get dot product of ${a} and ${b}`);\n        }\n    }\n}\nRegisterClass(\"FlowGraphDotBlock\" /* FlowGraphBlockNames.Dot */, FlowGraphDotBlock);\n/**\n * Cross product block.\n */\nexport class FlowGraphCrossBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeVector3, RichTypeVector3, RichTypeVector3, (a, b) => Vector3.Cross(a, b), \"FlowGraphCrossBlock\" /* FlowGraphBlockNames.Cross */, config);\n    }\n}\nRegisterClass(\"FlowGraphCrossBlock\" /* FlowGraphBlockNames.Cross */, FlowGraphCrossBlock);\n/**\n * 2D rotation block.\n */\nexport class FlowGraphRotate2DBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeVector2, RichTypeNumber, RichTypeVector2, (a, b) => a.rotate(b), \"FlowGraphRotate2DBlock\" /* FlowGraphBlockNames.Rotate2D */, config);\n    }\n}\nRegisterClass(\"FlowGraphRotate2DBlock\" /* FlowGraphBlockNames.Rotate2D */, FlowGraphRotate2DBlock);\n/**\n * 3D rotation block.\n */\nexport class FlowGraphRotate3DBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeVector3, RichTypeQuaternion, RichTypeVector3, (a, b) => a.applyRotationQuaternion(b), \"FlowGraphRotate3DBlock\" /* FlowGraphBlockNames.Rotate3D */, config);\n    }\n}\nRegisterClass(\"FlowGraphRotate3DBlock\" /* FlowGraphBlockNames.Rotate3D */, FlowGraphRotate3DBlock);\nfunction TransformVector(a, b) {\n    const className = _GetClassNameOf(a);\n    switch (className) {\n        case \"Vector2\" /* FlowGraphTypes.Vector2 */:\n            return b.transformVector(a);\n        case \"Vector3\" /* FlowGraphTypes.Vector3 */:\n            return b.transformVector(a);\n        case \"Vector4\" /* FlowGraphTypes.Vector4 */:\n            a = a;\n            // transform the vector 4 with the matrix here. Vector4.TransformCoordinates transforms a 3D coordinate, not Vector4\n            return new Vector4(a.x * b.m[0] + a.y * b.m[1] + a.z * b.m[2] + a.w * b.m[3], a.x * b.m[4] + a.y * b.m[5] + a.z * b.m[6] + a.w * b.m[7], a.x * b.m[8] + a.y * b.m[9] + a.z * b.m[10] + a.w * b.m[11], a.x * b.m[12] + a.y * b.m[13] + a.z * b.m[14] + a.w * b.m[15]);\n        default:\n            throw new Error(`Cannot transform value ${a}`);\n    }\n}\n/**\n * Transform a vector3 by a matrix.\n */\nexport class FlowGraphTransformBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        const vectorType = config?.vectorType || \"Vector3\" /* FlowGraphTypes.Vector3 */;\n        const matrixType = vectorType === \"Vector2\" /* FlowGraphTypes.Vector2 */ ? \"Matrix2D\" /* FlowGraphTypes.Matrix2D */ : vectorType === \"Vector3\" /* FlowGraphTypes.Vector3 */ ? \"Matrix3D\" /* FlowGraphTypes.Matrix3D */ : \"Matrix\" /* FlowGraphTypes.Matrix */;\n        super(getRichTypeByFlowGraphType(vectorType), getRichTypeByFlowGraphType(matrixType), getRichTypeByFlowGraphType(vectorType), TransformVector, \"FlowGraphTransformVectorBlock\" /* FlowGraphBlockNames.TransformVector */, config);\n    }\n}\nRegisterClass(\"FlowGraphTransformVectorBlock\" /* FlowGraphBlockNames.TransformVector */, FlowGraphTransformBlock);\n/**\n * Transform a vector3 by a matrix.\n */\nexport class FlowGraphTransformCoordinatesBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeVector3, RichTypeMatrix, RichTypeVector3, (a, b) => Vector3.TransformCoordinates(a, b), \"FlowGraphTransformCoordinatesBlock\" /* FlowGraphBlockNames.TransformCoordinates */, config);\n    }\n}\nRegisterClass(\"FlowGraphTransformCoordinatesBlock\" /* FlowGraphBlockNames.TransformCoordinates */, FlowGraphTransformCoordinatesBlock);\n/**\n * Conjugate the quaternion.\n */\nexport class FlowGraphConjugateBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeQuaternion, RichTypeQuaternion, (a) => a.conjugate(), \"FlowGraphConjugateBlock\" /* FlowGraphBlockNames.Conjugate */, config);\n    }\n}\nRegisterClass(\"FlowGraphConjugateBlock\" /* FlowGraphBlockNames.Conjugate */, FlowGraphConjugateBlock);\n/**\n * Get the angle between two quaternions.\n */\nexport class FlowGraphAngleBetweenBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeQuaternion, RichTypeQuaternion, RichTypeNumber, (a, b) => GetAngleBetweenQuaternions(a, b), \"FlowGraphAngleBetweenBlock\" /* FlowGraphBlockNames.AngleBetween */, config);\n    }\n}\nRegisterClass(\"FlowGraphAngleBetweenBlock\" /* FlowGraphBlockNames.AngleBetween */, FlowGraphAngleBetweenBlock);\n/**\n * Get the quaternion from an axis and an angle.\n */\nexport class FlowGraphQuaternionFromAxisAngleBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeVector3, RichTypeNumber, RichTypeQuaternion, (a, b) => Quaternion.RotationAxis(a, b), \"FlowGraphQuaternionFromAxisAngleBlock\" /* FlowGraphBlockNames.QuaternionFromAxisAngle */, config);\n    }\n}\nRegisterClass(\"FlowGraphQuaternionFromAxisAngleBlock\" /* FlowGraphBlockNames.QuaternionFromAxisAngle */, FlowGraphQuaternionFromAxisAngleBlock);\n/**\n * Get the axis and angle from a quaternion.\n */\nexport class FlowGraphAxisAngleFromQuaternionBlock extends FlowGraphBlock {\n    constructor(config) {\n        super(config);\n        this.a = this.registerDataInput(\"a\", RichTypeQuaternion);\n        this.axis = this.registerDataOutput(\"axis\", RichTypeVector3);\n        this.angle = this.registerDataOutput(\"angle\", RichTypeNumber);\n        this.isValid = this.registerDataOutput(\"isValid\", RichTypeBoolean);\n    }\n    /** @override */\n    _updateOutputs(context) {\n        const cachedExecutionId = context._getExecutionVariable(this, CacheExecIdName, -1);\n        const cachedAxis = context._getExecutionVariable(this, AxisCacheName, null);\n        const cachedAngle = context._getExecutionVariable(this, AngleCacheName, null);\n        if (cachedAxis !== undefined && cachedAxis !== null && cachedAngle !== undefined && cachedAngle !== null && cachedExecutionId === context.executionId) {\n            this.axis.setValue(cachedAxis, context);\n            this.angle.setValue(cachedAngle, context);\n        }\n        else {\n            try {\n                const { axis, angle } = this.a.getValue(context).toAxisAngle();\n                context._setExecutionVariable(this, AxisCacheName, axis);\n                context._setExecutionVariable(this, AngleCacheName, angle);\n                context._setExecutionVariable(this, CacheExecIdName, context.executionId);\n                this.axis.setValue(axis, context);\n                this.angle.setValue(angle, context);\n                this.isValid.setValue(true, context);\n            }\n            catch (e) {\n                this.isValid.setValue(false, context);\n            }\n        }\n    }\n    /** @override */\n    getClassName() {\n        return \"FlowGraphAxisAngleFromQuaternionBlock\" /* FlowGraphBlockNames.AxisAngleFromQuaternion */;\n    }\n}\nRegisterClass(\"FlowGraphAxisAngleFromQuaternionBlock\" /* FlowGraphBlockNames.AxisAngleFromQuaternion */, FlowGraphAxisAngleFromQuaternionBlock);\n/**\n * Get the quaternion from two direction vectors.\n */\nexport class FlowGraphQuaternionFromDirectionsBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeVector3, RichTypeVector3, RichTypeQuaternion, (a, b) => GetQuaternionFromDirections(a, b), \"FlowGraphQuaternionFromDirectionsBlock\" /* FlowGraphBlockNames.QuaternionFromDirections */, config);\n    }\n}\n//# sourceMappingURL=flowGraphVectorMathBlocks.js.map"],"names":["GetQuaternionFromDirections","a","b","result","Quaternion","axis","Vector3","Cross","angle","Math","acos","Clamp","x","y","z","Vector3Dot","RotationAxisToRef","GetQuaternionFromDirectionsToRef","AxisCacheName","AngleCacheName","CacheExecIdName","FlowGraphLengthBlock","FlowGraphUnaryOperationBlock","constructor","config","super","RichTypeAny","RichTypeNumber","this","_polymorphicLength","_GetClassNameOf","length","Error","RegisterClass","FlowGraphNormalizeBlock","_polymorphicNormalize","normalized","normalizeToNew","nanOnZeroLength","setAll","NaN","FlowGraphDotBlock","FlowGraphBinaryOperationBlock","_polymorphicDot","dot","FlowGraphCrossBlock","RichTypeVector3","FlowGraphRotate2DBlock","RichTypeVector2","rotate","FlowGraphRotate3DBlock","RichTypeQuaternion","applyRotationQuaternion","TransformVector","transformVector","Vector4","m","w","FlowGraphTransformBlock","vectorType","matrixType","getRichTypeByFlowGraphType","FlowGraphTransformCoordinatesBlock","RichTypeMatrix","TransformCoordinates","FlowGraphConjugateBlock","conjugate","FlowGraphAngleBetweenBlock","GetAngleBetweenQuaternions","q1","q2","Dot","FlowGraphQuaternionFromAxisAngleBlock","RotationAxis","FlowGraphAxisAngleFromQuaternionBlock","FlowGraphBlock","registerDataInput","registerDataOutput","isValid","RichTypeBoolean","_updateOutputs","context","cachedExecutionId","_getExecutionVariable","cachedAxis","cachedAngle","executionId","setValue","getValue","toAxisAngle","_setExecutionVariable","e","getClassName","FlowGraphQuaternionFromDirectionsBlock"],"mappings":"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"}