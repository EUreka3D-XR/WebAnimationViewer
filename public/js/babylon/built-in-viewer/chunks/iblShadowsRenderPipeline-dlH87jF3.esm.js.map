{"version":3,"file":"iblShadowsRenderPipeline-dlH87jF3.esm.js","sources":["../../../../../dev/core/dist/Rendering/IBLShadows/iblShadowsVoxelRenderer.js","../../../../../dev/core/dist/Rendering/IBLShadows/iblShadowsVoxelTracingPass.js","../../../../../dev/core/dist/Rendering/IBLShadows/iblShadowsSpatialBlurPass.js","../../../../../dev/core/dist/Rendering/IBLShadows/iblShadowsAccumulationPass.js","../../../../../dev/core/dist/Materials/Textures/rawTexture3D.js","../../../../../dev/core/dist/Rendering/IBLShadows/iblShadowsPluginMaterial.js","../../../../../dev/core/dist/Rendering/IBLShadows/iblShadowsRenderPipeline.js"],"sourcesContent":["import { Constants } from \"../../Engines/constants\";\nimport { Engine } from \"../../Engines/engine\";\nimport { ShaderMaterial } from \"../../Materials/shaderMaterial\";\nimport { MultiRenderTarget } from \"../../Materials/Textures/multiRenderTarget\";\nimport { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture\";\nimport { Color4 } from \"../../Maths/math.color\";\nimport { Matrix, Vector3, Vector4 } from \"../../Maths/math.vector\";\nimport { Texture } from \"../../Materials/Textures/texture\";\nimport { Logger } from \"../../Misc/logger\";\nimport { Observable } from \"../../Misc/observable\";\nimport { PostProcess } from \"../../PostProcesses/postProcess\";\nimport { ProceduralTexture } from \"../../Materials/Textures/Procedurals/proceduralTexture\";\nimport { EffectRenderer, EffectWrapper } from \"../../Materials/effectRenderer\";\n/**\n * Voxel-based shadow rendering for IBL's.\n * This should not be instanciated directly, as it is part of a scene component\n * @internal\n * @see https://playground.babylonjs.com/#8R5SSE#222\n */\nexport class _IblShadowsVoxelRenderer {\n    /**\n     * Return the voxel grid texture.\n     * @returns The voxel grid texture.\n     */\n    getVoxelGrid() {\n        if (this._triPlanarVoxelization) {\n            return this._voxelGridRT;\n        }\n        else {\n            return this._voxelGridZaxis;\n        }\n    }\n    /**\n     * The debug pass post process\n     * @returns The debug pass post process\n     */\n    getDebugPassPP() {\n        if (!this._voxelDebugPass) {\n            this._createDebugPass();\n        }\n        return this._voxelDebugPass;\n    }\n    /**\n     * Whether to use tri-planar voxelization. More expensive, but can help with artifacts.\n     */\n    get triPlanarVoxelization() {\n        return this._triPlanarVoxelization;\n    }\n    /**\n     * Whether to use tri-planar voxelization. More expensive, but can help with artifacts.\n     */\n    set triPlanarVoxelization(enabled) {\n        if (this._triPlanarVoxelization === enabled) {\n            return;\n        }\n        this._triPlanarVoxelization = enabled;\n        this._disposeVoxelTextures();\n        this._createTextures();\n    }\n    /**\n     * Set the matrix to use for scaling the world space to voxel space\n     * @param matrix The matrix to use for scaling the world space to voxel space\n     */\n    setWorldScaleMatrix(matrix) {\n        this._invWorldScaleMatrix = matrix;\n    }\n    /**\n     * @returns Whether voxelization is currently happening.\n     */\n    isVoxelizationInProgress() {\n        return this._voxelizationInProgress;\n    }\n    /**\n     * Resolution of the voxel grid. The final resolution will be 2^resolutionExp.\n     */\n    get voxelResolutionExp() {\n        return this._voxelResolutionExp;\n    }\n    /**\n     * Resolution of the voxel grid. The final resolution will be 2^resolutionExp.\n     */\n    set voxelResolutionExp(resolutionExp) {\n        if (this._voxelResolutionExp === resolutionExp && this._voxelGridZaxis) {\n            return;\n        }\n        this._voxelResolutionExp = Math.round(Math.min(Math.max(resolutionExp, 3), 9));\n        this._voxelResolution = Math.pow(2.0, this._voxelResolutionExp);\n        this._disposeVoxelTextures();\n        this._createTextures();\n    }\n    /**\n     * Shows only the voxels that were rendered along a particular axis (while using triPlanarVoxelization).\n     * If not set, the combined voxel grid will be shown.\n     * Note: This only works when the debugMipNumber is set to 0 because we don't generate mips for each axis.\n     * @param axis The axis to show (0 = x, 1 = y, 2 = z)\n     */\n    set voxelDebugAxis(axis) {\n        this._voxelDebugAxis = axis;\n    }\n    get voxelDebugAxis() {\n        return this._voxelDebugAxis;\n    }\n    /**\n     * Sets params that control the position and scaling of the debug display on the screen.\n     * @param x Screen X offset of the debug display (0-1)\n     * @param y Screen Y offset of the debug display (0-1)\n     * @param widthScale X scale of the debug display (0-1)\n     * @param heightScale Y scale of the debug display (0-1)\n     */\n    setDebugDisplayParams(x, y, widthScale, heightScale) {\n        this._debugSizeParams.set(x, y, widthScale, heightScale);\n    }\n    /**\n     * The mip level to show in the debug display\n     * @param mipNum The mip level to show in the debug display\n     */\n    setDebugMipNumber(mipNum) {\n        this._debugMipNumber = mipNum;\n    }\n    /**\n     * Sets the name of the debug pass\n     */\n    get debugPassName() {\n        return this._debugPassName;\n    }\n    /**\n     * Enable or disable the debug view for this pass\n     */\n    get voxelDebugEnabled() {\n        return this._voxelDebugEnabled;\n    }\n    set voxelDebugEnabled(enabled) {\n        if (this._voxelDebugEnabled === enabled) {\n            return;\n        }\n        this._voxelDebugEnabled = enabled;\n        if (enabled) {\n            this._voxelSlabDebugRT = new RenderTargetTexture(\"voxelSlabDebug\", { width: this._engine.getRenderWidth(), height: this._engine.getRenderHeight() }, this._scene, {\n                generateDepthBuffer: true,\n                generateMipMaps: false,\n                type: Constants.TEXTURETYPE_UNSIGNED_BYTE,\n                format: Constants.TEXTUREFORMAT_RGBA,\n                samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n            });\n            this._voxelSlabDebugRT.noPrePassRenderer = true;\n        }\n        if (this._voxelSlabDebugRT) {\n            this._removeVoxelRTs([this._voxelSlabDebugRT]);\n        }\n        // Add the slab debug RT if needed.\n        if (this._voxelDebugEnabled) {\n            this._addRTsForRender([this._voxelSlabDebugRT], this._includedMeshes, this._voxelDebugAxis, 1, true);\n            this._setDebugBindingsBound = this._setDebugBindings.bind(this);\n            this._scene.onBeforeRenderObservable.add(this._setDebugBindingsBound);\n        }\n        else {\n            this._scene.onBeforeRenderObservable.removeCallback(this._setDebugBindingsBound);\n        }\n    }\n    /**\n     * Creates the debug post process effect for this pass\n     */\n    _createDebugPass() {\n        const isWebGPU = this._engine.isWebGPU;\n        if (!this._voxelDebugPass) {\n            const debugOptions = {\n                width: this._engine.getRenderWidth(),\n                height: this._engine.getRenderHeight(),\n                textureFormat: Constants.TEXTUREFORMAT_RGBA,\n                textureType: Constants.TEXTURETYPE_UNSIGNED_BYTE,\n                samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n                uniforms: [\"sizeParams\", \"mipNumber\"],\n                samplers: [\"voxelTexture\", \"voxelSlabTexture\"],\n                engine: this._engine,\n                reusable: false,\n                shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n                extraInitializations: (useWebGPU, list) => {\n                    if (this._isVoxelGrid3D) {\n                        if (useWebGPU) {\n                            list.push(import(\"../../ShadersWGSL/iblVoxelGrid3dDebug.fragment\"));\n                        }\n                        else {\n                            list.push(import(\"../../Shaders/iblVoxelGrid3dDebug.fragment\"));\n                        }\n                        return;\n                    }\n                    if (useWebGPU) {\n                        list.push(import(\"../../ShadersWGSL/iblVoxelGrid2dArrayDebug.fragment\"));\n                    }\n                    else {\n                        list.push(import(\"../../Shaders/iblVoxelGrid2dArrayDebug.fragment\"));\n                    }\n                },\n            };\n            this._voxelDebugPass = new PostProcess(this.debugPassName, this._isVoxelGrid3D ? \"iblVoxelGrid3dDebug\" : \"iblVoxelGrid2dArrayDebug\", debugOptions);\n            this._voxelDebugPass.onApplyObservable.add((effect) => {\n                if (this._voxelDebugAxis === 0) {\n                    effect.setTexture(\"voxelTexture\", this._voxelGridXaxis);\n                }\n                else if (this._voxelDebugAxis === 1) {\n                    effect.setTexture(\"voxelTexture\", this._voxelGridYaxis);\n                }\n                else if (this._voxelDebugAxis === 2) {\n                    effect.setTexture(\"voxelTexture\", this._voxelGridZaxis);\n                }\n                else {\n                    effect.setTexture(\"voxelTexture\", this.getVoxelGrid());\n                }\n                effect.setTexture(\"voxelSlabTexture\", this._voxelSlabDebugRT);\n                effect.setVector4(\"sizeParams\", this._debugSizeParams);\n                effect.setFloat(\"mipNumber\", this._debugMipNumber);\n            });\n        }\n    }\n    /**\n     * Instanciates the voxel renderer\n     * @param scene Scene to attach to\n     * @param iblShadowsRenderPipeline The render pipeline this pass is associated with\n     * @param resolutionExp Resolution of the voxel grid. The final resolution will be 2^resolutionExp.\n     * @param triPlanarVoxelization Whether to use tri-planar voxelization. More expensive, but can help with artifacts.\n     * @returns The voxel renderer\n     */\n    constructor(scene, iblShadowsRenderPipeline, resolutionExp = 6, triPlanarVoxelization = true) {\n        this._voxelMrtsXaxis = [];\n        this._voxelMrtsYaxis = [];\n        this._voxelMrtsZaxis = [];\n        this._isVoxelGrid3D = true;\n        /**\n         * Observable that triggers when the voxelization is complete\n         */\n        this.onVoxelizationCompleteObservable = new Observable();\n        this._renderTargets = [];\n        this._triPlanarVoxelization = true;\n        this._voxelizationInProgress = false;\n        this._invWorldScaleMatrix = Matrix.Identity();\n        this._voxelResolution = 64;\n        this._voxelResolutionExp = 6;\n        this._mipArray = [];\n        this._voxelDebugEnabled = false;\n        this._voxelDebugAxis = -1;\n        this._debugSizeParams = new Vector4(0.0, 0.0, 0.0, 0.0);\n        this._includedMeshes = [];\n        this._debugMipNumber = 0;\n        this._debugPassName = \"Voxelization Debug Pass\";\n        this._scene = scene;\n        this._engine = scene.getEngine();\n        this._triPlanarVoxelization = triPlanarVoxelization;\n        if (!this._engine.getCaps().drawBuffersExtension) {\n            Logger.Error(\"Can't do voxel rendering without the draw buffers extension.\");\n        }\n        const isWebGPU = this._engine.isWebGPU;\n        this._maxDrawBuffers = this._engine.getCaps().maxDrawBuffers || 0;\n        this._copyMipEffectRenderer = new EffectRenderer(this._engine);\n        this._copyMipEffectWrapper = new EffectWrapper({\n            engine: this._engine,\n            fragmentShader: \"copyTexture3DLayerToTexture\",\n            useShaderStore: true,\n            uniformNames: [\"layerNum\"],\n            samplerNames: [\"textureSampler\"],\n            shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n            extraInitializationsAsync: async () => {\n                if (isWebGPU) {\n                    await import(\"../../ShadersWGSL/copyTexture3DLayerToTexture.fragment\");\n                }\n                else {\n                    await import(\"../../Shaders/copyTexture3DLayerToTexture.fragment\");\n                }\n            },\n        });\n        this.voxelResolutionExp = resolutionExp;\n    }\n    _generateMipMaps() {\n        const iterations = Math.ceil(Math.log2(this._voxelResolution));\n        for (let i = 1; i < iterations + 1; i++) {\n            this._generateMipMap(i);\n        }\n    }\n    _generateMipMap(lodLevel) {\n        // Generate a mip map for the given level by triggering the render of the procedural mip texture.\n        const mipTarget = this._mipArray[lodLevel - 1];\n        if (!mipTarget) {\n            return;\n        }\n        mipTarget.setTexture(\"srcMip\", lodLevel === 1 ? this.getVoxelGrid() : this._mipArray[lodLevel - 2]);\n        mipTarget.render();\n    }\n    _copyMipMaps() {\n        const iterations = Math.ceil(Math.log2(this._voxelResolution));\n        for (let i = 1; i < iterations + 1; i++) {\n            this._copyMipMap(i);\n        }\n    }\n    _copyMipMap(lodLevel) {\n        // Now, copy this mip into the mip chain of the voxel grid.\n        // TODO - this currently isn't working. \"textureSampler\" isn't being properly set to mipTarget.\n        const mipTarget = this._mipArray[lodLevel - 1];\n        if (!mipTarget) {\n            return;\n        }\n        const voxelGrid = this.getVoxelGrid();\n        let rt;\n        if (voxelGrid instanceof RenderTargetTexture && voxelGrid.renderTarget) {\n            rt = voxelGrid.renderTarget;\n        }\n        else {\n            rt = voxelGrid._rtWrapper;\n        }\n        if (rt) {\n            this._copyMipEffectRenderer.saveStates();\n            const bindSize = mipTarget.getSize().width;\n            // Render to each layer of the voxel grid.\n            for (let layer = 0; layer < bindSize; layer++) {\n                this._engine.bindFramebuffer(rt, 0, bindSize, bindSize, true, lodLevel, layer);\n                this._copyMipEffectRenderer.applyEffectWrapper(this._copyMipEffectWrapper);\n                this._copyMipEffectWrapper.effect.setTexture(\"textureSampler\", mipTarget);\n                this._copyMipEffectWrapper.effect.setInt(\"layerNum\", layer);\n                this._copyMipEffectRenderer.draw();\n                this._engine.unBindFramebuffer(rt, true);\n            }\n            this._copyMipEffectRenderer.restoreStates();\n        }\n    }\n    _computeNumberOfSlabs() {\n        return Math.ceil(this._voxelResolution / this._maxDrawBuffers);\n    }\n    _createTextures() {\n        const isWebGPU = this._engine.isWebGPU;\n        const size = {\n            width: this._voxelResolution,\n            height: this._voxelResolution,\n            layers: this._isVoxelGrid3D ? undefined : this._voxelResolution,\n            depth: this._isVoxelGrid3D ? this._voxelResolution : undefined,\n        };\n        const voxelAxisOptions = {\n            generateDepthBuffer: false,\n            generateMipMaps: false,\n            type: Constants.TEXTURETYPE_UNSIGNED_BYTE,\n            format: Constants.TEXTUREFORMAT_R,\n            samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n        };\n        // We can render up to maxDrawBuffers voxel slices of the grid per render.\n        // We call this a slab.\n        const numSlabs = this._computeNumberOfSlabs();\n        const voxelCombinedOptions = {\n            generateDepthBuffer: false,\n            generateMipMaps: true,\n            type: Constants.TEXTURETYPE_UNSIGNED_BYTE,\n            format: Constants.TEXTUREFORMAT_R,\n            samplingMode: Constants.TEXTURE_NEAREST_NEAREST_MIPNEAREST,\n            shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n            extraInitializationsAsync: async () => {\n                if (isWebGPU) {\n                    await import(\"../../ShadersWGSL/iblCombineVoxelGrids.fragment\");\n                }\n                else {\n                    await import(\"../../Shaders/iblCombineVoxelGrids.fragment\");\n                }\n            },\n        };\n        if (this._triPlanarVoxelization) {\n            this._voxelGridXaxis = new RenderTargetTexture(\"voxelGridXaxis\", size, this._scene, voxelAxisOptions);\n            this._voxelGridYaxis = new RenderTargetTexture(\"voxelGridYaxis\", size, this._scene, voxelAxisOptions);\n            this._voxelGridZaxis = new RenderTargetTexture(\"voxelGridZaxis\", size, this._scene, voxelAxisOptions);\n            this._voxelMrtsXaxis = this._createVoxelMRTs(\"x_axis_\", this._voxelGridXaxis, numSlabs);\n            this._voxelMrtsYaxis = this._createVoxelMRTs(\"y_axis_\", this._voxelGridYaxis, numSlabs);\n            this._voxelMrtsZaxis = this._createVoxelMRTs(\"z_axis_\", this._voxelGridZaxis, numSlabs);\n            this._voxelGridRT = new ProceduralTexture(\"combinedVoxelGrid\", size, \"iblCombineVoxelGrids\", this._scene, voxelCombinedOptions, false);\n            this._scene.proceduralTextures.splice(this._scene.proceduralTextures.indexOf(this._voxelGridRT), 1);\n            this._voxelGridRT.setFloat(\"layer\", 0.0);\n            this._voxelGridRT.setTexture(\"voxelXaxisSampler\", this._voxelGridXaxis);\n            this._voxelGridRT.setTexture(\"voxelYaxisSampler\", this._voxelGridYaxis);\n            this._voxelGridRT.setTexture(\"voxelZaxisSampler\", this._voxelGridZaxis);\n            // We will render this only after voxelization is completed for the 3 axes.\n            this._voxelGridRT.autoClear = false;\n            this._voxelGridRT.wrapU = Texture.CLAMP_ADDRESSMODE;\n            this._voxelGridRT.wrapV = Texture.CLAMP_ADDRESSMODE;\n        }\n        else {\n            this._voxelGridZaxis = new RenderTargetTexture(\"voxelGridZaxis\", size, this._scene, voxelCombinedOptions);\n            this._voxelMrtsZaxis = this._createVoxelMRTs(\"z_axis_\", this._voxelGridZaxis, numSlabs);\n        }\n        const generateVoxelMipOptions = {\n            generateDepthBuffer: false,\n            generateMipMaps: false,\n            type: Constants.TEXTURETYPE_UNSIGNED_BYTE,\n            format: Constants.TEXTUREFORMAT_R,\n            samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n            shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n            extraInitializationsAsync: async () => {\n                if (isWebGPU) {\n                    await import(\"../../ShadersWGSL/iblGenerateVoxelMip.fragment\");\n                }\n                else {\n                    await import(\"../../Shaders/iblGenerateVoxelMip.fragment\");\n                }\n            },\n        };\n        this._mipArray = new Array(Math.ceil(Math.log2(this._voxelResolution)));\n        for (let mipIdx = 1; mipIdx <= this._mipArray.length; mipIdx++) {\n            const mipDim = this._voxelResolution >> mipIdx;\n            const mipSize = { width: mipDim, height: mipDim, depth: mipDim };\n            this._mipArray[mipIdx - 1] = new ProceduralTexture(\"voxelMip\" + mipIdx, mipSize, \"iblGenerateVoxelMip\", this._scene, generateVoxelMipOptions, false);\n            this._scene.proceduralTextures.splice(this._scene.proceduralTextures.indexOf(this._mipArray[mipIdx - 1]), 1);\n            const mipTarget = this._mipArray[mipIdx - 1];\n            mipTarget.autoClear = false;\n            mipTarget.wrapU = Texture.CLAMP_ADDRESSMODE;\n            mipTarget.wrapV = Texture.CLAMP_ADDRESSMODE;\n            mipTarget.setTexture(\"srcMip\", mipIdx > 1 ? this._mipArray[mipIdx - 2] : this.getVoxelGrid());\n            mipTarget.setInt(\"layerNum\", 0);\n        }\n        this._createVoxelMaterials();\n    }\n    _createVoxelMRTs(name, voxelRT, numSlabs) {\n        voxelRT.wrapU = Texture.CLAMP_ADDRESSMODE;\n        voxelRT.wrapV = Texture.CLAMP_ADDRESSMODE;\n        voxelRT.noPrePassRenderer = true;\n        const mrtArray = [];\n        const targetTypes = new Array(this._maxDrawBuffers).fill(this._isVoxelGrid3D ? Constants.TEXTURE_3D : Constants.TEXTURE_2D_ARRAY);\n        for (let mrtIndex = 0; mrtIndex < numSlabs; mrtIndex++) {\n            let layerIndices = new Array(this._maxDrawBuffers).fill(0);\n            layerIndices = layerIndices.map((value, index) => mrtIndex * this._maxDrawBuffers + index);\n            let textureNames = new Array(this._maxDrawBuffers).fill(\"\");\n            textureNames = textureNames.map((value, index) => \"voxel_grid_\" + name + (mrtIndex * this._maxDrawBuffers + index));\n            const mrt = new MultiRenderTarget(\"mrt_\" + name + mrtIndex, { width: this._voxelResolution, height: this._voxelResolution, depth: this._isVoxelGrid3D ? this._voxelResolution : undefined }, this._maxDrawBuffers, // number of draw buffers\n            this._scene, {\n                types: new Array(this._maxDrawBuffers).fill(Constants.TEXTURETYPE_UNSIGNED_BYTE),\n                samplingModes: new Array(this._maxDrawBuffers).fill(Constants.TEXTURE_TRILINEAR_SAMPLINGMODE),\n                generateMipMaps: false,\n                targetTypes,\n                formats: new Array(this._maxDrawBuffers).fill(Constants.TEXTUREFORMAT_R),\n                faceIndex: new Array(this._maxDrawBuffers).fill(0),\n                layerIndex: layerIndices,\n                layerCounts: new Array(this._maxDrawBuffers).fill(this._voxelResolution),\n                generateDepthBuffer: false,\n                generateStencilBuffer: false,\n            }, textureNames);\n            mrt.clearColor = new Color4(0, 0, 0, 1);\n            mrt.noPrePassRenderer = true;\n            for (let i = 0; i < this._maxDrawBuffers; i++) {\n                mrt.setInternalTexture(voxelRT.getInternalTexture(), i);\n            }\n            mrtArray.push(mrt);\n        }\n        return mrtArray;\n    }\n    _disposeVoxelTextures() {\n        this._stopVoxelization();\n        for (let i = 0; i < this._voxelMrtsZaxis.length; i++) {\n            if (this._triPlanarVoxelization) {\n                this._voxelMrtsXaxis[i].dispose(true);\n                this._voxelMrtsYaxis[i].dispose(true);\n            }\n            this._voxelMrtsZaxis[i].dispose(true);\n        }\n        if (this._triPlanarVoxelization) {\n            this._voxelGridXaxis?.dispose();\n            this._voxelGridYaxis?.dispose();\n            this._voxelGridRT?.dispose();\n        }\n        this._voxelGridZaxis?.dispose();\n        for (const mip of this._mipArray) {\n            mip.dispose();\n        }\n        this._voxelMaterial?.dispose();\n        this._voxelSlabDebugMaterial?.dispose();\n        this._mipArray = [];\n        this._voxelMrtsXaxis = [];\n        this._voxelMrtsYaxis = [];\n        this._voxelMrtsZaxis = [];\n    }\n    _createVoxelMaterials() {\n        const isWebGPU = this._engine.isWebGPU;\n        this._voxelMaterial = new ShaderMaterial(\"voxelization\", this._scene, \"iblVoxelGrid\", {\n            uniforms: [\"world\", \"viewMatrix\", \"invWorldScale\", \"nearPlane\", \"farPlane\", \"stepSize\"],\n            defines: [\"MAX_DRAW_BUFFERS \" + this._maxDrawBuffers],\n            shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n            extraInitializationsAsync: async () => {\n                if (isWebGPU) {\n                    await Promise.all([import(\"../../ShadersWGSL/iblVoxelGrid.fragment\"), import(\"../../ShadersWGSL/iblVoxelGrid.vertex\")]);\n                }\n                else {\n                    await Promise.all([import(\"../../Shaders/iblVoxelGrid.fragment\"), import(\"../../Shaders/iblVoxelGrid.vertex\")]);\n                }\n            },\n        });\n        this._voxelMaterial.cullBackFaces = false;\n        this._voxelMaterial.backFaceCulling = false;\n        this._voxelMaterial.depthFunction = Engine.ALWAYS;\n        this._voxelSlabDebugMaterial = new ShaderMaterial(\"voxelSlabDebug\", this._scene, \"iblVoxelSlabDebug\", {\n            uniforms: [\"world\", \"viewMatrix\", \"cameraViewMatrix\", \"projection\", \"invWorldScale\", \"nearPlane\", \"farPlane\", \"stepSize\"],\n            defines: [\"MAX_DRAW_BUFFERS \" + this._maxDrawBuffers],\n            shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n            extraInitializationsAsync: async () => {\n                if (isWebGPU) {\n                    await Promise.all([import(\"../../ShadersWGSL/iblVoxelSlabDebug.fragment\"), import(\"../../ShadersWGSL/iblVoxelSlabDebug.vertex\")]);\n                }\n                else {\n                    await Promise.all([import(\"../../Shaders/iblVoxelSlabDebug.fragment\"), import(\"../../Shaders/iblVoxelSlabDebug.vertex\")]);\n                }\n            },\n        });\n    }\n    _setDebugBindings() {\n        this._voxelSlabDebugMaterial.setMatrix(\"projection\", this._scene.activeCamera.getProjectionMatrix());\n        this._voxelSlabDebugMaterial.setMatrix(\"cameraViewMatrix\", this._scene.activeCamera.getViewMatrix());\n    }\n    /**\n     * Checks if the voxel renderer is ready to voxelize scene\n     * @returns true if the voxel renderer is ready to voxelize scene\n     */\n    isReady() {\n        let allReady = this.getVoxelGrid().isReady();\n        for (let i = 0; i < this._mipArray.length; i++) {\n            const mipReady = this._mipArray[i].isReady();\n            allReady &&= mipReady;\n        }\n        if (!allReady || this._voxelizationInProgress) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * If the MRT's are already in the list of render targets, this will\n     * remove them so that they don't get rendered again.\n     */\n    _stopVoxelization() {\n        // If the MRT's are already in the list of render targets, remove them.\n        this._removeVoxelRTs(this._voxelMrtsXaxis);\n        this._removeVoxelRTs(this._voxelMrtsYaxis);\n        this._removeVoxelRTs(this._voxelMrtsZaxis);\n    }\n    _removeVoxelRTs(rts) {\n        // const currentRTs = this._scene.customRenderTargets;\n        const rtIdx = this._renderTargets.findIndex((rt) => {\n            if (rt === rts[0]) {\n                return true;\n            }\n            return false;\n        });\n        if (rtIdx >= 0) {\n            this._renderTargets.splice(rtIdx, rts.length);\n        }\n        else {\n            const rtIdx = this._scene.customRenderTargets.findIndex((rt) => {\n                if (rt === rts[0]) {\n                    return true;\n                }\n                return false;\n            });\n            if (rtIdx >= 0) {\n                this._scene.customRenderTargets.splice(rtIdx, rts.length);\n            }\n        }\n    }\n    /**\n     * Renders voxel grid of scene for IBL shadows\n     * @param includedMeshes\n     */\n    updateVoxelGrid(includedMeshes) {\n        this._stopVoxelization();\n        this._includedMeshes = includedMeshes;\n        this._voxelizationInProgress = true;\n        if (this._triPlanarVoxelization) {\n            this._addRTsForRender(this._voxelMrtsXaxis, includedMeshes, 0);\n            this._addRTsForRender(this._voxelMrtsYaxis, includedMeshes, 1);\n            this._addRTsForRender(this._voxelMrtsZaxis, includedMeshes, 2);\n        }\n        else {\n            this._addRTsForRender(this._voxelMrtsZaxis, includedMeshes, 2);\n        }\n        if (this._voxelDebugEnabled) {\n            this._addRTsForRender([this._voxelSlabDebugRT], includedMeshes, this._voxelDebugAxis, 1, true);\n        }\n        this._renderVoxelGridBound = this._renderVoxelGrid.bind(this);\n        this._scene.onAfterRenderObservable.add(this._renderVoxelGridBound);\n    }\n    _renderVoxelGrid() {\n        if (this._voxelizationInProgress) {\n            let allReady = this.getVoxelGrid().isReady();\n            for (let i = 0; i < this._mipArray.length; i++) {\n                const mipReady = this._mipArray[i].isReady();\n                allReady &&= mipReady;\n            }\n            for (let i = 0; i < this._renderTargets.length; i++) {\n                const rttReady = this._renderTargets[i].isReadyForRendering();\n                allReady &&= rttReady;\n            }\n            if (allReady) {\n                for (const rt of this._renderTargets) {\n                    rt.render();\n                }\n                this._stopVoxelization();\n                if (this._triPlanarVoxelization) {\n                    this._voxelGridRT.render();\n                }\n                this._generateMipMaps();\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises, github/no-then\n                this._copyMipEffectWrapper.effect.whenCompiledAsync().then(() => {\n                    this._copyMipMaps();\n                    this._scene.onAfterRenderObservable.removeCallback(this._renderVoxelGridBound);\n                    this._voxelizationInProgress = false;\n                    this.onVoxelizationCompleteObservable.notifyObservers();\n                });\n            }\n        }\n    }\n    _addRTsForRender(mrts, includedMeshes, axis, shaderType = 0, continuousRender = false) {\n        const slabSize = 1.0 / this._computeNumberOfSlabs();\n        let voxelMaterial;\n        if (shaderType === 0) {\n            voxelMaterial = this._voxelMaterial;\n        }\n        else {\n            voxelMaterial = this._voxelSlabDebugMaterial;\n        }\n        // We need to update the world scale uniform for every mesh being rendered to the voxel grid.\n        for (let mrtIndex = 0; mrtIndex < mrts.length; mrtIndex++) {\n            const mrt = mrts[mrtIndex];\n            mrt.renderList = [];\n            const nearPlane = mrtIndex * slabSize;\n            const farPlane = (mrtIndex + 1) * slabSize;\n            const stepSize = slabSize / this._maxDrawBuffers;\n            const cameraPosition = new Vector3(0, 0, 0);\n            let targetPosition = new Vector3(0, 0, 1);\n            if (axis === 0) {\n                targetPosition = new Vector3(1, 0, 0);\n            }\n            else if (axis === 1) {\n                targetPosition = new Vector3(0, 1, 0);\n            }\n            let upDirection = new Vector3(0, 1, 0);\n            if (axis === 1) {\n                upDirection = new Vector3(1, 0, 0);\n            }\n            mrt.onBeforeRenderObservable.add(() => {\n                voxelMaterial.setMatrix(\"viewMatrix\", Matrix.LookAtLH(cameraPosition, targetPosition, upDirection));\n                voxelMaterial.setMatrix(\"invWorldScale\", this._invWorldScaleMatrix);\n                voxelMaterial.setFloat(\"nearPlane\", nearPlane);\n                voxelMaterial.setFloat(\"farPlane\", farPlane);\n                voxelMaterial.setFloat(\"stepSize\", stepSize);\n            });\n            // Set this material on every mesh in the scene (for this RT)\n            if (includedMeshes.length === 0) {\n                return;\n            }\n            for (const mesh of includedMeshes) {\n                if (mesh) {\n                    if (mesh.subMeshes && mesh.subMeshes.length > 0) {\n                        mrt.renderList?.push(mesh);\n                        mrt.setMaterialForRendering(mesh, voxelMaterial);\n                    }\n                    const meshes = mesh.getChildMeshes();\n                    for (const childMesh of meshes) {\n                        if (childMesh.subMeshes && childMesh.subMeshes.length > 0) {\n                            mrt.renderList?.push(childMesh);\n                            mrt.setMaterialForRendering(childMesh, voxelMaterial);\n                        }\n                    }\n                }\n            }\n        }\n        // Add the MRT's to render.\n        if (continuousRender) {\n            for (const mrt of mrts) {\n                if (this._scene.customRenderTargets.indexOf(mrt) === -1) {\n                    this._scene.customRenderTargets.push(mrt);\n                }\n            }\n        }\n        else {\n            this._renderTargets = this._renderTargets.concat(mrts);\n        }\n    }\n    /**\n     * Called by the pipeline to resize resources.\n     */\n    resize() {\n        this._voxelSlabDebugRT?.resize({ width: this._scene.getEngine().getRenderWidth(), height: this._scene.getEngine().getRenderHeight() });\n    }\n    /**\n     * Disposes the voxel renderer and associated resources\n     */\n    dispose() {\n        this._disposeVoxelTextures();\n        if (this._voxelSlabDebugRT) {\n            this._removeVoxelRTs([this._voxelSlabDebugRT]);\n            this._voxelSlabDebugRT.dispose();\n        }\n        if (this._voxelDebugPass) {\n            this._voxelDebugPass.dispose();\n        }\n        // TODO - dispose all created voxel materials.\n    }\n}\n//# sourceMappingURL=iblShadowsVoxelRenderer.js.map","import { Constants } from \"../../Engines/constants\";\nimport { Matrix, Vector4 } from \"../../Maths/math.vector\";\nimport { PostProcess } from \"../../PostProcesses/postProcess\";\nimport { GeometryBufferRenderer } from \"../../Rendering/geometryBufferRenderer\";\nimport { ProceduralTexture } from \"core/Materials/Textures/Procedurals/proceduralTexture\";\nimport { Logger } from \"../../Misc/logger\";\n/**\n * Build cdf maps for IBL importance sampling during IBL shadow computation.\n * This should not be instantiated directly, as it is part of a scene component\n * @internal\n */\nexport class _IblShadowsVoxelTracingPass {\n    /**\n     * The opacity of the shadow cast from the voxel grid\n     */\n    get voxelShadowOpacity() {\n        return this._voxelShadowOpacity;\n    }\n    /**\n     * The opacity of the shadow cast from the voxel grid\n     */\n    set voxelShadowOpacity(value) {\n        this._voxelShadowOpacity = value;\n    }\n    /**\n     * The opacity of the screen-space shadow\n     */\n    get ssShadowOpacity() {\n        return this._ssShadowOpacity;\n    }\n    /**\n     * The opacity of the screen-space shadow\n     */\n    set ssShadowOpacity(value) {\n        this._ssShadowOpacity = value;\n    }\n    /**\n     * The number of samples used in the screen space shadow pass.\n     */\n    get sssSamples() {\n        return this._sssSamples;\n    }\n    /**\n     * The number of samples used in the screen space shadow pass.\n     */\n    set sssSamples(value) {\n        this._sssSamples = value;\n    }\n    /**\n     * The stride used in the screen space shadow pass. This controls the distance between samples.\n     */\n    get sssStride() {\n        return this._sssStride;\n    }\n    /**\n     * The stride used in the screen space shadow pass. This controls the distance between samples.\n     */\n    set sssStride(value) {\n        this._sssStride = value;\n    }\n    /**\n     * The maximum distance that the screen-space shadow will be able to occlude.\n     */\n    get sssMaxDist() {\n        return this._sssMaxDist;\n    }\n    /**\n     * The maximum distance that the screen-space shadow will be able to occlude.\n     */\n    set sssMaxDist(value) {\n        this._sssMaxDist = value;\n    }\n    /**\n     * The thickness of the screen-space shadow\n     */\n    get sssThickness() {\n        return this._sssThickness;\n    }\n    /**\n     * The thickness of the screen-space shadow\n     */\n    set sssThickness(value) {\n        this._sssThickness = value;\n    }\n    /**\n     * The bias to apply to the voxel sampling in the direction of the surface normal of the geometry.\n     */\n    get voxelNormalBias() {\n        return this._voxelNormalBias;\n    }\n    set voxelNormalBias(value) {\n        this._voxelNormalBias = value;\n    }\n    /**\n     * The bias to apply to the voxel sampling in the direction of the light.\n     */\n    get voxelDirectionBias() {\n        return this._voxelDirectionBias;\n    }\n    set voxelDirectionBias(value) {\n        this._voxelDirectionBias = value;\n    }\n    /**\n     * The number of directions to sample for the voxel tracing.\n     */\n    get sampleDirections() {\n        return this._sampleDirections;\n    }\n    /**\n     * The number of directions to sample for the voxel tracing.\n     */\n    set sampleDirections(value) {\n        this._sampleDirections = value;\n    }\n    /**\n     * The current rotation of the environment map, in radians.\n     */\n    get envRotation() {\n        return this._envRotation;\n    }\n    /**\n     * The current rotation of the environment map, in radians.\n     */\n    set envRotation(value) {\n        this._envRotation = value;\n    }\n    /**\n     * Returns the output texture of the pass.\n     * @returns The output texture.\n     */\n    getOutputTexture() {\n        return this._outputTexture;\n    }\n    /**\n     * Gets the debug pass post process. This will create the resources for the pass\n     * if they don't already exist.\n     * @returns The post process\n     */\n    getDebugPassPP() {\n        if (!this._debugPassPP) {\n            this._createDebugPass();\n        }\n        return this._debugPassPP;\n    }\n    /**\n     * The name of the debug pass\n     */\n    get debugPassName() {\n        return this._debugPassName;\n    }\n    /**\n     * Set the matrix to use for scaling the world space to voxel space\n     * @param matrix The matrix to use for scaling the world space to voxel space\n     */\n    setWorldScaleMatrix(matrix) {\n        this._invWorldScaleMatrix = matrix;\n    }\n    /**\n     * Render the shadows in color rather than black and white.\n     * This is slightly more expensive than black and white shadows but can be much\n     * more accurate when the strongest lights in the IBL are non-white.\n     */\n    set coloredShadows(value) {\n        this._coloredShadows = value;\n    }\n    get coloredShadows() {\n        return this._coloredShadows;\n    }\n    /**\n     * Sets params that control the position and scaling of the debug display on the screen.\n     * @param x Screen X offset of the debug display (0-1)\n     * @param y Screen Y offset of the debug display (0-1)\n     * @param widthScale X scale of the debug display (0-1)\n     * @param heightScale Y scale of the debug display (0-1)\n     */\n    setDebugDisplayParams(x, y, widthScale, heightScale) {\n        this._debugSizeParams.set(x, y, widthScale, heightScale);\n    }\n    /**\n     * Creates the debug post process effect for this pass\n     */\n    _createDebugPass() {\n        const isWebGPU = this._engine.isWebGPU;\n        if (!this._debugPassPP) {\n            const debugOptions = {\n                width: this._engine.getRenderWidth(),\n                height: this._engine.getRenderHeight(),\n                uniforms: [\"sizeParams\"],\n                samplers: [\"debugSampler\"],\n                engine: this._engine,\n                reusable: true,\n                shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n                extraInitializations: (useWebGPU, list) => {\n                    if (useWebGPU) {\n                        list.push(import(\"../../ShadersWGSL/iblShadowDebug.fragment\"));\n                    }\n                    else {\n                        list.push(import(\"../../Shaders/iblShadowDebug.fragment\"));\n                    }\n                },\n            };\n            this._debugPassPP = new PostProcess(this.debugPassName, \"iblShadowDebug\", debugOptions);\n            this._debugPassPP.autoClear = false;\n            this._debugPassPP.onApplyObservable.add((effect) => {\n                // update the caustic texture with what we just rendered.\n                effect.setTexture(\"debugSampler\", this._outputTexture);\n                effect.setVector4(\"sizeParams\", this._debugSizeParams);\n            });\n        }\n    }\n    /**\n     * Instantiates the shadow voxel-tracing pass\n     * @param scene Scene to attach to\n     * @param iblShadowsRenderPipeline The IBL shadows render pipeline\n     * @returns The shadow voxel-tracing pass\n     */\n    constructor(scene, iblShadowsRenderPipeline) {\n        this._voxelShadowOpacity = 1.0;\n        this._sssSamples = 16;\n        this._sssStride = 8;\n        this._sssMaxDist = 0.05;\n        this._sssThickness = 0.5;\n        this._ssShadowOpacity = 1.0;\n        this._cameraInvView = Matrix.Identity();\n        this._cameraInvProj = Matrix.Identity();\n        this._invWorldScaleMatrix = Matrix.Identity();\n        this._frameId = 0;\n        this._sampleDirections = 4;\n        this._shadowParameters = new Vector4(0.0, 0.0, 0.0, 0.0);\n        this._sssParameters = new Vector4(0.0, 0.0, 0.0, 0.0);\n        this._opacityParameters = new Vector4(0.0, 0.0, 0.0, 0.0);\n        this._voxelBiasParameters = new Vector4(0.0, 0.0, 0.0, 0.0);\n        this._voxelNormalBias = 1.4;\n        this._voxelDirectionBias = 1.75;\n        /**\n         * Is the effect enabled\n         */\n        this.enabled = true;\n        /** Enable the debug view for this pass */\n        this.debugEnabled = false;\n        this._debugPassName = \"Voxel Tracing Debug Pass\";\n        /** The default rotation of the environment map will align the shadows with the default lighting orientation */\n        this._envRotation = 0.0;\n        this._coloredShadows = false;\n        this._debugVoxelMarchEnabled = false;\n        this._debugSizeParams = new Vector4(0.0, 0.0, 0.0, 0.0);\n        this._renderWhenGBufferReady = null;\n        this._scene = scene;\n        this._engine = scene.getEngine();\n        this._renderPipeline = iblShadowsRenderPipeline;\n        this._createTextures();\n    }\n    _createTextures() {\n        const defines = this._createDefines();\n        const isWebGPU = this._engine.isWebGPU;\n        const textureOptions = {\n            type: Constants.TEXTURETYPE_UNSIGNED_BYTE,\n            format: Constants.TEXTUREFORMAT_RGBA,\n            samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n            generateDepthBuffer: false,\n            shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n            extraInitializationsAsync: async () => {\n                if (isWebGPU) {\n                    await Promise.all([import(\"../../ShadersWGSL/iblShadowVoxelTracing.fragment\")]);\n                }\n                else {\n                    await Promise.all([import(\"../../Shaders/iblShadowVoxelTracing.fragment\")]);\n                }\n            },\n        };\n        this._outputTexture = new ProceduralTexture(\"voxelTracingPass\", {\n            width: this._engine.getRenderWidth(),\n            height: this._engine.getRenderHeight(),\n        }, \"iblShadowVoxelTracing\", this._scene, textureOptions);\n        this._outputTexture.refreshRate = -1;\n        this._outputTexture.autoClear = false;\n        this._outputTexture.defines = defines;\n        // Need to set all the textures first so that the effect gets created with the proper uniforms.\n        this._setBindings(this._scene.activeCamera);\n        this._renderWhenGBufferReady = this._render.bind(this);\n        // Don't start rendering until the first vozelization is done.\n        this._renderPipeline.onVoxelizationCompleteObservable.addOnce(() => {\n            this._scene.geometryBufferRenderer.getGBuffer().onAfterRenderObservable.add(this._renderWhenGBufferReady);\n        });\n    }\n    _createDefines() {\n        let defines = \"\";\n        if (this._scene.useRightHandedSystem) {\n            defines += \"#define RIGHT_HANDED\\n\";\n        }\n        if (this._debugVoxelMarchEnabled) {\n            defines += \"#define VOXEL_MARCH_DIAGNOSTIC_INFO_OPTION 1u\\n\";\n        }\n        if (this._coloredShadows) {\n            defines += \"#define COLOR_SHADOWS 1u\\n\";\n        }\n        return defines;\n    }\n    _setBindings(camera) {\n        this._outputTexture.defines = this._createDefines();\n        this._outputTexture.setMatrix(\"viewMtx\", camera.getViewMatrix());\n        this._outputTexture.setMatrix(\"projMtx\", camera.getProjectionMatrix());\n        camera.getProjectionMatrix().invertToRef(this._cameraInvProj);\n        camera.getViewMatrix().invertToRef(this._cameraInvView);\n        this._outputTexture.setMatrix(\"invProjMtx\", this._cameraInvProj);\n        this._outputTexture.setMatrix(\"invViewMtx\", this._cameraInvView);\n        this._outputTexture.setMatrix(\"wsNormalizationMtx\", this._invWorldScaleMatrix);\n        this._frameId++;\n        let rotation = 0.0;\n        if (this._scene.environmentTexture) {\n            rotation = this._scene.environmentTexture.rotationY ?? 0;\n        }\n        rotation = this._scene.useRightHandedSystem ? -(rotation + 0.5 * Math.PI) : rotation - 0.5 * Math.PI;\n        rotation = rotation % (2.0 * Math.PI);\n        this._shadowParameters.set(this._sampleDirections, this._frameId, 1.0, rotation);\n        this._outputTexture.setVector4(\"shadowParameters\", this._shadowParameters);\n        const voxelGrid = this._renderPipeline._getVoxelGridTexture();\n        const highestMip = Math.floor(Math.log2(voxelGrid.getSize().width));\n        this._voxelBiasParameters.set(this._voxelNormalBias, this._voxelDirectionBias, highestMip, 0.0);\n        this._outputTexture.setVector4(\"voxelBiasParameters\", this._voxelBiasParameters);\n        // SSS Options.\n        this._sssParameters.set(this._sssSamples, this._sssStride, this._sssMaxDist, this._sssThickness);\n        this._outputTexture.setVector4(\"sssParameters\", this._sssParameters);\n        this._opacityParameters.set(this._voxelShadowOpacity, this._ssShadowOpacity, 0.0, 0.0);\n        this._outputTexture.setVector4(\"shadowOpacity\", this._opacityParameters);\n        this._outputTexture.setTexture(\"voxelGridSampler\", voxelGrid);\n        this._outputTexture.setTexture(\"blueNoiseSampler\", this._renderPipeline._getNoiseTexture());\n        const cdfGenerator = this._scene.iblCdfGenerator;\n        if (!cdfGenerator) {\n            Logger.Warn(\"IBLShadowsVoxelTracingPass: Can't bind for render because iblCdfGenerator is not enabled.\");\n            return false;\n        }\n        this._outputTexture.setTexture(\"icdfSampler\", cdfGenerator.getIcdfTexture());\n        if (this._coloredShadows && this._scene.environmentTexture) {\n            this._outputTexture.setTexture(\"iblSampler\", this._scene.environmentTexture);\n        }\n        const geometryBufferRenderer = this._scene.geometryBufferRenderer;\n        if (!geometryBufferRenderer) {\n            Logger.Warn(\"IBLShadowsVoxelTracingPass: Can't bind for render because GeometryBufferRenderer is not enabled.\");\n            return false;\n        }\n        const depthIndex = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.SCREENSPACE_DEPTH_TEXTURE_TYPE);\n        this._outputTexture.setTexture(\"depthSampler\", geometryBufferRenderer.getGBuffer().textures[depthIndex]);\n        const wnormalIndex = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.NORMAL_TEXTURE_TYPE);\n        this._outputTexture.setTexture(\"worldNormalSampler\", geometryBufferRenderer.getGBuffer().textures[wnormalIndex]);\n        return true;\n    }\n    _render() {\n        if (this.enabled && this._outputTexture.isReady() && this._outputTexture.getEffect()?.isReady()) {\n            if (this._setBindings(this._scene.activeCamera)) {\n                this._outputTexture.render();\n            }\n        }\n    }\n    /**\n     * Called by render pipeline when canvas resized.\n     * @param scaleFactor The factor by which to scale the canvas size.\n     */\n    resize(scaleFactor = 1.0) {\n        const newSize = {\n            width: Math.max(1.0, Math.floor(this._engine.getRenderWidth() * scaleFactor)),\n            height: Math.max(1.0, Math.floor(this._engine.getRenderHeight() * scaleFactor)),\n        };\n        // Don't resize if the size is the same as the current size.\n        if (this._outputTexture.getSize().width === newSize.width && this._outputTexture.getSize().height === newSize.height) {\n            return;\n        }\n        this._outputTexture.resize(newSize, false);\n    }\n    /**\n     * Checks if the pass is ready\n     * @returns true if the pass is ready\n     */\n    isReady() {\n        return (this._outputTexture.isReady() &&\n            !(this._debugPassPP && !this._debugPassPP.isReady()) &&\n            this._scene.iblCdfGenerator &&\n            this._scene.iblCdfGenerator.getIcdfTexture().isReady() &&\n            this._renderPipeline._getVoxelGridTexture().isReady());\n    }\n    /**\n     * Disposes the associated resources\n     */\n    dispose() {\n        if (this._scene.geometryBufferRenderer && this._renderWhenGBufferReady) {\n            const gBuffer = this._scene.geometryBufferRenderer.getGBuffer();\n            gBuffer.onAfterRenderObservable.removeCallback(this._renderWhenGBufferReady);\n        }\n        this._outputTexture.dispose();\n        if (this._debugPassPP) {\n            this._debugPassPP.dispose();\n        }\n    }\n}\n//# sourceMappingURL=iblShadowsVoxelTracingPass.js.map","import { Constants } from \"../../Engines/constants\";\nimport { Vector4 } from \"../../Maths/math.vector\";\nimport { PostProcess } from \"../../PostProcesses/postProcess\";\nimport { GeometryBufferRenderer } from \"../../Rendering/geometryBufferRenderer\";\nimport { ProceduralTexture } from \"core/Materials/Textures/Procedurals/proceduralTexture\";\n/**\n * This should not be instanciated directly, as it is part of a scene component\n * @internal\n */\nexport class _IblShadowsSpatialBlurPass {\n    /**\n     * Returns the output texture of the pass.\n     * @returns The output texture.\n     */\n    getOutputTexture() {\n        return this._outputTexture;\n    }\n    /**\n     * Gets the debug pass post process\n     * @returns The post process\n     */\n    getDebugPassPP() {\n        if (!this._debugPassPP) {\n            this._createDebugPass();\n        }\n        return this._debugPassPP;\n    }\n    /**\n     * Sets the name of the debug pass\n     */\n    get debugPassName() {\n        return this._debugPassName;\n    }\n    /**\n     * The scale of the voxel grid in world space. This is used to scale the blur radius in world space.\n     * @param scale The scale of the voxel grid in world space.\n     */\n    setWorldScale(scale) {\n        this._worldScale = scale;\n    }\n    /**\n     * Sets params that control the position and scaling of the debug display on the screen.\n     * @param x Screen X offset of the debug display (0-1)\n     * @param y Screen Y offset of the debug display (0-1)\n     * @param widthScale X scale of the debug display (0-1)\n     * @param heightScale Y scale of the debug display (0-1)\n     */\n    setDebugDisplayParams(x, y, widthScale, heightScale) {\n        this._debugSizeParams.set(x, y, widthScale, heightScale);\n    }\n    /**\n     * Creates the debug post process effect for this pass\n     */\n    _createDebugPass() {\n        if (!this._debugPassPP) {\n            const isWebGPU = this._engine.isWebGPU;\n            const debugOptions = {\n                width: this._engine.getRenderWidth(),\n                height: this._engine.getRenderHeight(),\n                textureFormat: Constants.TEXTUREFORMAT_RGBA,\n                textureType: Constants.TEXTURETYPE_UNSIGNED_BYTE,\n                samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n                uniforms: [\"sizeParams\"],\n                samplers: [\"debugSampler\"],\n                engine: this._engine,\n                reusable: false,\n                shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n                extraInitializations: (useWebGPU, list) => {\n                    if (useWebGPU) {\n                        list.push(import(\"../../ShadersWGSL/iblShadowDebug.fragment\"));\n                    }\n                    else {\n                        list.push(import(\"../../Shaders/iblShadowDebug.fragment\"));\n                    }\n                },\n            };\n            this._debugPassPP = new PostProcess(this.debugPassName, \"iblShadowDebug\", debugOptions);\n            this._debugPassPP.autoClear = false;\n            this._debugPassPP.onApplyObservable.add((effect) => {\n                // update the caustic texture with what we just rendered.\n                effect.setTexture(\"debugSampler\", this._outputTexture);\n                effect.setVector4(\"sizeParams\", this._debugSizeParams);\n            });\n        }\n    }\n    /**\n     * Instanciates the importance sampling renderer\n     * @param scene Scene to attach to\n     * @param iblShadowsRenderPipeline The IBL shadows render pipeline\n     * @returns The importance sampling renderer\n     */\n    constructor(scene, iblShadowsRenderPipeline) {\n        this._worldScale = 1.0;\n        this._blurParameters = new Vector4(0.0, 0.0, 0.0, 0.0);\n        /**\n         * Is the effect enabled\n         */\n        this.enabled = true;\n        this._debugPassName = \"Spatial Blur Debug Pass\";\n        /** Enable the debug view for this pass */\n        this.debugEnabled = false;\n        this._debugSizeParams = new Vector4(0.0, 0.0, 0.0, 0.0);\n        this._renderWhenGBufferReady = null;\n        this._scene = scene;\n        this._engine = scene.getEngine();\n        this._renderPipeline = iblShadowsRenderPipeline;\n        this._createTextures();\n    }\n    _createTextures() {\n        const isWebGPU = this._engine.isWebGPU;\n        const textureOptions = {\n            type: Constants.TEXTURETYPE_UNSIGNED_BYTE,\n            format: Constants.TEXTUREFORMAT_RGBA,\n            samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n            generateDepthBuffer: false,\n            generateMipMaps: false,\n            shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n            extraInitializationsAsync: async () => {\n                if (isWebGPU) {\n                    await Promise.all([import(\"../../ShadersWGSL/iblShadowSpatialBlur.fragment\")]);\n                }\n                else {\n                    await Promise.all([import(\"../../Shaders/iblShadowSpatialBlur.fragment\")]);\n                }\n            },\n        };\n        this._outputTexture = new ProceduralTexture(\"spatialBlurPass\", {\n            width: this._engine.getRenderWidth(),\n            height: this._engine.getRenderHeight(),\n        }, \"iblShadowSpatialBlur\", this._scene, textureOptions, false, false, Constants.TEXTURETYPE_UNSIGNED_BYTE);\n        this._outputTexture.refreshRate = -1;\n        this._outputTexture.autoClear = false;\n        // Need to set all the textures first so that the effect gets created with the proper uniforms.\n        this._setBindings();\n        this._renderWhenGBufferReady = this._render.bind(this);\n        // Don't start rendering until the first vozelization is done.\n        this._renderPipeline.onVoxelizationCompleteObservable.addOnce(() => {\n            this._scene.geometryBufferRenderer.getGBuffer().onAfterRenderObservable.add(this._renderWhenGBufferReady);\n        });\n    }\n    _setBindings() {\n        this._outputTexture.setTexture(\"voxelTracingSampler\", this._renderPipeline._getVoxelTracingTexture());\n        const iterationCount = 1;\n        this._blurParameters.set(iterationCount, this._worldScale, 0.0, 0.0);\n        this._outputTexture.setVector4(\"blurParameters\", this._blurParameters);\n        const geometryBufferRenderer = this._scene.geometryBufferRenderer;\n        if (!geometryBufferRenderer) {\n            return false;\n        }\n        const depthIndex = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.SCREENSPACE_DEPTH_TEXTURE_TYPE);\n        this._outputTexture.setTexture(\"depthSampler\", geometryBufferRenderer.getGBuffer().textures[depthIndex]);\n        const wnormalIndex = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.NORMAL_TEXTURE_TYPE);\n        this._outputTexture.setTexture(\"worldNormalSampler\", geometryBufferRenderer.getGBuffer().textures[wnormalIndex]);\n        return true;\n    }\n    _render() {\n        if (this.enabled && this._outputTexture.isReady() && this._outputTexture.getEffect()?.isReady()) {\n            if (this._setBindings()) {\n                this._outputTexture.render();\n            }\n        }\n    }\n    /**\n     * Called by render pipeline when canvas resized.\n     * @param scaleFactor The factor by which to scale the canvas size.\n     */\n    resize(scaleFactor = 1.0) {\n        const newSize = {\n            width: Math.max(1.0, Math.floor(this._engine.getRenderWidth() * scaleFactor)),\n            height: Math.max(1.0, Math.floor(this._engine.getRenderHeight() * scaleFactor)),\n        };\n        // Don't resize if the size is the same as the current size.\n        if (this._outputTexture.getSize().width === newSize.width && this._outputTexture.getSize().height === newSize.height) {\n            return;\n        }\n        this._outputTexture.resize(newSize, false);\n    }\n    /**\n     * Checks if the pass is ready\n     * @returns true if the pass is ready\n     */\n    isReady() {\n        return this._outputTexture.isReady() && !(this._debugPassPP && !this._debugPassPP.isReady());\n    }\n    /**\n     * Disposes the associated resources\n     */\n    dispose() {\n        if (this._scene.geometryBufferRenderer && this._renderWhenGBufferReady) {\n            const gBuffer = this._scene.geometryBufferRenderer.getGBuffer();\n            gBuffer.onAfterRenderObservable.removeCallback(this._renderWhenGBufferReady);\n        }\n        this._outputTexture.dispose();\n        if (this._debugPassPP) {\n            this._debugPassPP.dispose();\n        }\n    }\n}\n//# sourceMappingURL=iblShadowsSpatialBlurPass.js.map","import { Constants } from \"../../Engines/constants\";\nimport { Vector4 } from \"../../Maths/math.vector\";\nimport { PostProcess } from \"../../PostProcesses/postProcess\";\nimport { GeometryBufferRenderer } from \"../../Rendering/geometryBufferRenderer\";\nimport { ProceduralTexture } from \"core/Materials/Textures/Procedurals/proceduralTexture\";\nimport { Observable } from \"../../Misc/observable\";\n/**\n * This should not be instantiated directly, as it is part of a scene component\n * @internal\n */\nexport class _IblShadowsAccumulationPass {\n    /**\n     * Returns the output texture of the pass.\n     * @returns The output texture.\n     */\n    getOutputTexture() {\n        return this._outputTexture;\n    }\n    /**\n     * Gets the debug pass post process\n     * @returns The post process\n     */\n    getDebugPassPP() {\n        if (!this._debugPassPP) {\n            this._createDebugPass();\n        }\n        return this._debugPassPP;\n    }\n    /**\n     * Gets the name of the debug pass\n     * @returns The name of the debug pass\n     */\n    get debugPassName() {\n        return this._debugPassName;\n    }\n    /**\n     * A value that controls how much of the previous frame's accumulation to keep.\n     * The higher the value, the faster the shadows accumulate but the more potential ghosting you'll see.\n     */\n    get remanence() {\n        return this._remanence;\n    }\n    /**\n     * A value that controls how much of the previous frame's accumulation to keep.\n     * The higher the value, the faster the shadows accumulate but the more potential ghosting you'll see.\n     */\n    set remanence(value) {\n        this._remanence = value;\n    }\n    /**\n     * Reset the accumulation.\n     */\n    get reset() {\n        return this._reset;\n    }\n    /**\n     * Reset the accumulation.\n     */\n    set reset(value) {\n        this._reset = value;\n    }\n    /**\n     * Tell the pass that the camera is moving. This will cause the accumulation\n     * rate to change.\n     */\n    set isMoving(value) {\n        this._isMoving = value;\n    }\n    /**\n     * Sets params that control the position and scaling of the debug display on the screen.\n     * @param x Screen X offset of the debug display (0-1)\n     * @param y Screen Y offset of the debug display (0-1)\n     * @param widthScale X scale of the debug display (0-1)\n     * @param heightScale Y scale of the debug display (0-1)\n     */\n    setDebugDisplayParams(x, y, widthScale, heightScale) {\n        this._debugSizeParams.set(x, y, widthScale, heightScale);\n    }\n    /**\n     * Creates the debug post process effect for this pass\n     */\n    _createDebugPass() {\n        if (!this._debugPassPP) {\n            const isWebGPU = this._engine.isWebGPU;\n            const debugOptions = {\n                width: this._engine.getRenderWidth(),\n                height: this._engine.getRenderHeight(),\n                textureFormat: Constants.TEXTUREFORMAT_RGBA,\n                textureType: Constants.TEXTURETYPE_UNSIGNED_BYTE,\n                samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n                uniforms: [\"sizeParams\"],\n                samplers: [\"debugSampler\"],\n                engine: this._engine,\n                reusable: false,\n                shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n                extraInitializations: (useWebGPU, list) => {\n                    if (useWebGPU) {\n                        list.push(import(\"../../ShadersWGSL/iblShadowDebug.fragment\"));\n                    }\n                    else {\n                        list.push(import(\"../../Shaders/iblShadowDebug.fragment\"));\n                    }\n                },\n            };\n            this._debugPassPP = new PostProcess(this.debugPassName, \"iblShadowDebug\", debugOptions);\n            this._debugPassPP.autoClear = false;\n            this._debugPassPP.onApplyObservable.add((effect) => {\n                // update the caustic texture with what we just rendered.\n                effect.setTexture(\"debugSampler\", this._outputTexture);\n                effect.setVector4(\"sizeParams\", this._debugSizeParams);\n            });\n        }\n    }\n    /**\n     * Instantiates the accumulation pass\n     * @param scene Scene to attach to\n     * @param iblShadowsRenderPipeline The IBL shadows render pipeline\n     * @returns The accumulation pass\n     */\n    constructor(scene, iblShadowsRenderPipeline) {\n        this._accumulationParams = new Vector4(0.0, 0.0, 0.0, 0.0);\n        /** Enable the debug view for this pass */\n        this.debugEnabled = false;\n        /**\n         * Is the effect enabled\n         */\n        this.enabled = true;\n        /**\n         * Observable that triggers when the accumulation texture is ready\n         */\n        this.onReadyObservable = new Observable();\n        this._debugPassName = \"Shadow Accumulation Debug Pass\";\n        this._remanence = 0.9;\n        this._reset = true;\n        this._isMoving = false;\n        this._debugSizeParams = new Vector4(0.0, 0.0, 0.0, 0.0);\n        this._renderWhenGBufferReady = null;\n        this._scene = scene;\n        this._engine = scene.getEngine();\n        this._renderPipeline = iblShadowsRenderPipeline;\n        this._createTextures();\n    }\n    _createTextures() {\n        const isWebGPU = this._engine.isWebGPU;\n        const outputTextureOptions = {\n            type: Constants.TEXTURETYPE_HALF_FLOAT,\n            format: Constants.TEXTUREFORMAT_RGBA,\n            samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n            generateDepthBuffer: false,\n            generateMipMaps: false,\n            shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n            extraInitializationsAsync: async () => {\n                if (isWebGPU) {\n                    await Promise.all([import(\"../../ShadersWGSL/iblShadowAccumulation.fragment\")]);\n                }\n                else {\n                    await Promise.all([import(\"../../Shaders/iblShadowAccumulation.fragment\")]);\n                }\n            },\n        };\n        this._outputTexture = new ProceduralTexture(\"shadowAccumulationPass\", {\n            width: this._engine.getRenderWidth(),\n            height: this._engine.getRenderHeight(),\n        }, \"iblShadowAccumulation\", this._scene, outputTextureOptions);\n        this._outputTexture.refreshRate = 1;\n        this._outputTexture.autoClear = false;\n        this._outputTexture.onGeneratedObservable.addOnce(() => {\n            this.onReadyObservable.notifyObservers();\n        });\n        // Need to set all the textures first so that the effect gets created with the proper uniforms.\n        this._setOutputTextureBindings();\n        this._renderWhenGBufferReady = this._render.bind(this);\n        // Don't start rendering until the first vozelization is done.\n        this._renderPipeline.onVoxelizationCompleteObservable.addOnce(() => {\n            this._scene.geometryBufferRenderer.getGBuffer().onAfterRenderObservable.add(this._renderWhenGBufferReady);\n        });\n        // Create the accumulation texture for the previous frame.\n        // We'll copy the output of the accumulation pass to this texture at the start of every frame.\n        const accumulationOptions = {\n            type: Constants.TEXTURETYPE_HALF_FLOAT,\n            format: Constants.TEXTUREFORMAT_RGBA,\n            samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n            generateDepthBuffer: false,\n            generateMipMaps: false,\n            shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n            extraInitializationsAsync: async () => {\n                if (isWebGPU) {\n                    await Promise.all([import(\"../../ShadersWGSL/pass.fragment\")]);\n                }\n                else {\n                    await Promise.all([import(\"../../Shaders/pass.fragment\")]);\n                }\n            },\n        };\n        this._oldAccumulationCopy = new ProceduralTexture(\"oldAccumulationRT\", { width: this._engine.getRenderWidth(), height: this._engine.getRenderHeight() }, \"pass\", this._scene, accumulationOptions, false);\n        this._oldAccumulationCopy.autoClear = false;\n        this._oldAccumulationCopy.refreshRate = 1;\n        this._oldAccumulationCopy.onBeforeGenerationObservable.add(this._setAccumulationCopyBindings.bind(this));\n        this._setAccumulationCopyBindings();\n        // Create the local position texture for the previous frame.\n        // We'll copy the previous local position texture to this texture at the start of every frame.\n        const localPositionOptions = {\n            type: Constants.TEXTURETYPE_HALF_FLOAT,\n            format: Constants.TEXTUREFORMAT_RGBA,\n            samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n            generateDepthBuffer: false,\n            generateMipMaps: false,\n            shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n            extraInitializationsAsync: async () => {\n                if (isWebGPU) {\n                    await Promise.all([import(\"../../ShadersWGSL/pass.fragment\")]);\n                }\n                else {\n                    await Promise.all([import(\"../../Shaders/pass.fragment\")]);\n                }\n            },\n        };\n        this._oldPositionCopy = new ProceduralTexture(\"oldLocalPositionRT\", { width: this._engine.getRenderWidth(), height: this._engine.getRenderHeight() }, \"pass\", this._scene, localPositionOptions, false);\n        this._updatePositionCopy();\n        this._oldPositionCopy.autoClear = false;\n        this._oldPositionCopy.refreshRate = 1;\n        this._oldPositionCopy.onBeforeGenerationObservable.add(this._updatePositionCopy.bind(this));\n    }\n    _setOutputTextureBindings() {\n        const remanence = this._isMoving ? this.remanence : 0.99;\n        this._accumulationParams.set(remanence, this.reset ? 1.0 : 0.0, this._renderPipeline.voxelGridSize, 0.0);\n        this._outputTexture.setTexture(\"spatialBlurSampler\", this._renderPipeline._getSpatialBlurTexture());\n        this._outputTexture.setVector4(\"accumulationParameters\", this._accumulationParams);\n        this._outputTexture.setTexture(\"oldAccumulationSampler\", this._oldAccumulationCopy ? this._oldAccumulationCopy : this._renderPipeline._dummyTexture2d);\n        this._outputTexture.setTexture(\"prevPositionSampler\", this._oldPositionCopy ? this._oldPositionCopy : this._renderPipeline._dummyTexture2d);\n        const geometryBufferRenderer = this._scene.geometryBufferRenderer;\n        if (!geometryBufferRenderer) {\n            return false;\n        }\n        const velocityIndex = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.VELOCITY_LINEAR_TEXTURE_TYPE);\n        this._outputTexture.setTexture(\"motionSampler\", geometryBufferRenderer.getGBuffer().textures[velocityIndex]);\n        const wPositionIndex = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.POSITION_TEXTURE_TYPE);\n        this._outputTexture.setTexture(\"positionSampler\", geometryBufferRenderer.getGBuffer().textures[wPositionIndex]);\n        this.reset = false;\n        this._isMoving = false;\n        return true;\n    }\n    _updatePositionCopy() {\n        const geometryBufferRenderer = this._scene.geometryBufferRenderer;\n        const index = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.POSITION_TEXTURE_TYPE);\n        this._oldPositionCopy.setTexture(\"textureSampler\", geometryBufferRenderer.getGBuffer().textures[index]);\n    }\n    _setAccumulationCopyBindings() {\n        this._oldAccumulationCopy.setTexture(\"textureSampler\", this._outputTexture);\n    }\n    _render() {\n        if (this.enabled && this._outputTexture.isReady() && this._outputTexture.getEffect()?.isReady()) {\n            if (this._setOutputTextureBindings()) {\n                this._outputTexture.render();\n            }\n        }\n    }\n    /**\n     * Called by render pipeline when canvas resized.\n     * @param scaleFactor The factor by which to scale the canvas size.\n     */\n    resize(scaleFactor = 1.0) {\n        const newSize = {\n            width: Math.max(1.0, Math.floor(this._engine.getRenderWidth() * scaleFactor)),\n            height: Math.max(1.0, Math.floor(this._engine.getRenderHeight() * scaleFactor)),\n        };\n        // Don't resize if the size is the same as the current size.\n        if (this._outputTexture.getSize().width === newSize.width && this._outputTexture.getSize().height === newSize.height) {\n            return;\n        }\n        this._outputTexture.resize(newSize, false);\n        this._oldAccumulationCopy.resize(newSize, false);\n        this._oldPositionCopy.resize({ width: this._engine.getRenderWidth(), height: this._engine.getRenderHeight() }, false);\n        this.reset = true;\n    }\n    _disposeTextures() {\n        this._oldAccumulationCopy.dispose();\n        this._oldPositionCopy.dispose();\n        this._outputTexture.dispose();\n    }\n    /**\n     * Checks if the pass is ready\n     * @returns true if the pass is ready\n     */\n    isReady() {\n        return (this._oldAccumulationCopy &&\n            this._oldAccumulationCopy.isReady() &&\n            this._oldPositionCopy &&\n            this._oldPositionCopy.isReady() &&\n            this._outputTexture.isReady() &&\n            !(this._debugPassPP && !this._debugPassPP.isReady()));\n    }\n    /**\n     * Disposes the associated resources\n     */\n    dispose() {\n        if (this._scene.geometryBufferRenderer && this._renderWhenGBufferReady) {\n            const gBuffer = this._scene.geometryBufferRenderer.getGBuffer();\n            gBuffer.onAfterRenderObservable.removeCallback(this._renderWhenGBufferReady);\n        }\n        this._disposeTextures();\n        if (this._debugPassPP) {\n            this._debugPassPP.dispose();\n        }\n        this.onReadyObservable.clear();\n    }\n}\n//# sourceMappingURL=iblShadowsAccumulationPass.js.map","import { Texture } from \"./texture\";\nimport { Constants } from \"../../Engines/constants\";\n/**\n * Class used to store 3D textures containing user data\n */\nexport class RawTexture3D extends Texture {\n    /**\n     * Gets the width of the texture\n     */\n    get width() {\n        return this._texture ? this._texture.width : 0;\n    }\n    /**\n     * Gets the height of the texture\n     */\n    get height() {\n        return this._texture ? this._texture.height : 0;\n    }\n    /**\n     * Gets the depth of the texture\n     */\n    get depth() {\n        return this._texture ? this._texture.depth : 0;\n    }\n    /**\n     * Create a new RawTexture3D\n     * @param data defines the data of the texture\n     * @param width defines the width of the texture\n     * @param height defines the height of the texture\n     * @param depth defines the depth of the texture\n     * @param format defines the texture format to use\n     * @param scene defines the hosting scene\n     * @param generateMipMaps defines a boolean indicating if mip levels should be generated (true by default)\n     * @param invertY defines if texture must be stored with Y axis inverted\n     * @param samplingMode defines the sampling mode to use (Texture.TRILINEAR_SAMPLINGMODE by default)\n     * @param textureType defines the texture Type (Engine.TEXTURETYPE_UNSIGNED_BYTE, Engine.TEXTURETYPE_FLOAT...)\n     * @param creationFlags specific flags to use when creating the texture (Constants.TEXTURE_CREATIONFLAG_STORAGE for storage textures, for eg)\n     */\n    constructor(data, width, height, depth, \n    /** Gets or sets the texture format to use */\n    format, scene, generateMipMaps = true, invertY = false, samplingMode = Texture.TRILINEAR_SAMPLINGMODE, textureType = Constants.TEXTURETYPE_UNSIGNED_BYTE, creationFlags) {\n        super(null, scene, !generateMipMaps, invertY);\n        this.format = format;\n        this._texture = scene.getEngine().createRawTexture3D(data, width, height, depth, format, generateMipMaps, invertY, samplingMode, null, textureType, creationFlags);\n        this.is3D = true;\n    }\n    /**\n     * Update the texture with new data\n     * @param data defines the data to store in the texture\n     */\n    update(data) {\n        if (!this._texture) {\n            return;\n        }\n        this._getEngine().updateRawTexture3D(this._texture, data, this._texture.format, this._texture.invertY, null, this._texture.type);\n    }\n}\n//# sourceMappingURL=rawTexture3D.js.map","import { __decorate } from \"tslib\";\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\nimport { MaterialPluginBase } from \"core/Materials/materialPluginBase\";\nimport { Constants } from \"core/Engines/constants\";\nimport { PBRBaseMaterial } from \"core/Materials/PBR/pbrBaseMaterial\";\nimport { expandToProperty, serialize } from \"core/Misc/decorators\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\nimport { OpenPBRMaterial } from \"core/Materials/PBR/openPbrMaterial\";\n/**\n * @internal\n */\nclass MaterialIBLShadowsRenderDefines extends MaterialDefines {\n    constructor() {\n        super(...arguments);\n        this.RENDER_WITH_IBL_SHADOWS = false;\n        this.COLORED_IBL_SHADOWS = false;\n    }\n}\n/**\n * Plugin used to render the contribution from IBL shadows.\n */\nexport class IBLShadowsPluginMaterial extends MaterialPluginBase {\n    get isColored() {\n        return this._isColored;\n    }\n    set isColored(value) {\n        if (this._isColored === value) {\n            return;\n        }\n        this._isColored = value;\n        this._markAllSubMeshesAsTexturesDirty();\n    }\n    _markAllSubMeshesAsTexturesDirty() {\n        this._enable(this._isEnabled);\n        this._internalMarkAllSubMeshesAsTexturesDirty();\n    }\n    /**\n     * Gets a boolean indicating that the plugin is compatible with a give shader language.\n     * @returns true if the plugin is compatible with the shader language\n     */\n    isCompatible() {\n        return true;\n    }\n    constructor(material) {\n        super(material, IBLShadowsPluginMaterial.Name, 310, new MaterialIBLShadowsRenderDefines());\n        /**\n         * The opacity of the shadows.\n         */\n        this.shadowOpacity = 1.0;\n        this._isEnabled = false;\n        this._isColored = false;\n        /**\n         * Defines if the plugin is enabled in the material.\n         */\n        this.isEnabled = false;\n        this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[Constants.MATERIAL_TextureDirtyFlag];\n    }\n    prepareDefines(defines) {\n        defines.RENDER_WITH_IBL_SHADOWS = this._isEnabled;\n        defines.COLORED_IBL_SHADOWS = this.isColored;\n    }\n    getClassName() {\n        return \"IBLShadowsPluginMaterial\";\n    }\n    getUniforms() {\n        return {\n            ubo: [\n                { name: \"renderTargetSize\", size: 2, type: \"vec2\" },\n                { name: \"shadowOpacity\", size: 1, type: \"float\" },\n            ],\n            fragment: `#ifdef RENDER_WITH_IBL_SHADOWS\r\n                    uniform vec2 renderTargetSize;\r\n                    uniform float shadowOpacity;\r\n                #endif`,\n        };\n    }\n    getSamplers(samplers) {\n        samplers.push(\"iblShadowsTexture\");\n    }\n    bindForSubMesh(uniformBuffer) {\n        if (this._isEnabled) {\n            uniformBuffer.bindTexture(\"iblShadowsTexture\", this.iblShadowsTexture);\n            uniformBuffer.updateFloat2(\"renderTargetSize\", this._material.getScene().getEngine().getRenderWidth(), this._material.getScene().getEngine().getRenderHeight());\n            uniformBuffer.updateFloat(\"shadowOpacity\", this.shadowOpacity);\n        }\n    }\n    getCustomCode(shaderType, shaderLanguage) {\n        let frag;\n        if (shaderLanguage === 1 /* ShaderLanguage.WGSL */) {\n            frag = {\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                CUSTOM_FRAGMENT_DEFINITIONS: `\r\n                #ifdef RENDER_WITH_IBL_SHADOWS\r\n                    var iblShadowsTextureSampler: sampler;\r\n                    var iblShadowsTexture: texture_2d<f32>;\r\n\r\n                    #ifdef COLORED_IBL_SHADOWS\r\n                        fn computeIndirectShadow() -> vec3f {\r\n                            var uv = fragmentInputs.position.xy / uniforms.renderTargetSize;\r\n                            var shadowValue: vec3f = textureSample(iblShadowsTexture, iblShadowsTextureSampler, uv).rgb;\r\n                            return mix(shadowValue, vec3f(1.0), 1.0 - uniforms.shadowOpacity);\r\n                        }\r\n                    #else\r\n                        fn computeIndirectShadow() -> vec2f {\r\n                            var uv = fragmentInputs.position.xy / uniforms.renderTargetSize;\r\n                            var shadowValue: vec2f = textureSample(iblShadowsTexture, iblShadowsTextureSampler, uv).rg;\r\n                            return mix(shadowValue, vec2f(1.0), 1.0 - uniforms.shadowOpacity);\r\n                        }\r\n                    #endif\r\n                #endif\r\n            `,\n            };\n            if (this._material instanceof PBRBaseMaterial) {\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                frag[\"CUSTOM_FRAGMENT_BEFORE_FINALCOLORCOMPOSITION\"] = `\r\n                #ifdef RENDER_WITH_IBL_SHADOWS\r\n                    #ifndef UNLIT\r\n                        #ifdef REFLECTION\r\n                            #ifdef COLORED_IBL_SHADOWS\r\n                                var shadowValue: vec3f = computeIndirectShadow();\r\n                                finalIrradiance *= shadowValue;\r\n                                finalRadianceScaled *= mix(vec3f(1.0), shadowValue, roughness);\r\n                            #else\r\n                                var shadowValue: vec2f = computeIndirectShadow();\r\n                                finalIrradiance *= vec3f(shadowValue.x);\r\n                                finalRadianceScaled *= vec3f(mix(pow(shadowValue.y, 4.0), shadowValue.x, roughness));\r\n                            #endif\r\n                        #endif\r\n                    #else\r\n                        finalDiffuse *= computeIndirectShadow().x;\r\n                    #endif\r\n                #endif\r\n            `;\n            }\n            else if (this._material instanceof OpenPBRMaterial) {\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                frag[\"CUSTOM_FRAGMENT_BEFORE_IBLLAYERCOMPOSITION\"] = `\r\n                #ifdef RENDER_WITH_IBL_SHADOWS\r\n                    #ifndef UNLIT\r\n                        #ifdef REFLECTION\r\n                            #ifdef COLORED_IBL_SHADOWS\r\n                                var shadowValue: vec3f = computeIndirectShadow();\r\n                                slab_diffuse_ibl *= shadowValue;\r\n                                slab_glossy_ibl *= mix(vec3f(1.0), shadowValue, specularAlphaG);\r\n                            #else\r\n                                var shadowValue: vec2f = computeIndirectShadow();\r\n                                slab_diffuse_ibl *= vec3f(shadowValue.x);\r\n                                slab_glossy_ibl *= vec3f(mix(pow(shadowValue.y, 4.0), shadowValue.x, specularAlphaG));\r\n                            #endif\r\n                        #endif\r\n                    #else\r\n                        slab_diffuse_ibl *= computeIndirectShadow().x;\r\n                    #endif\r\n                #endif\r\n            `;\n            }\n            else {\n                frag[\"CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR\"] = `\r\n                #ifdef RENDER_WITH_IBL_SHADOWS\r\n                    #ifdef COLORED_IBL_SHADOWS\r\n                        var shadowValue: vec3f = computeIndirectShadow();\r\n                        color *= toGammaSpace(vec4f(shadowValue, 1.0f));\r\n                    #else\r\n                        var shadowValue: vec2f = computeIndirectShadow();\r\n                        color *= toGammaSpace(vec4f(shadowValue.x, shadowValue.x, shadowValue.x, 1.0f));\r\n                    #endif\r\n                #endif\r\n            `;\n            }\n        }\n        else {\n            frag = {\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                CUSTOM_FRAGMENT_DEFINITIONS: `\r\n                #ifdef RENDER_WITH_IBL_SHADOWS\r\n                    uniform sampler2D iblShadowsTexture;\r\n                #ifdef COLORED_IBL_SHADOWS\r\n                    vec3 computeIndirectShadow() {\r\n                        vec2 uv = gl_FragCoord.xy / renderTargetSize;\r\n                        vec3 shadowValue = texture2D(iblShadowsTexture, uv).rgb;\r\n                        return mix(shadowValue.rgb, vec3(1.0), 1.0 - shadowOpacity);\r\n                    }\r\n                #else\r\n                    vec2 computeIndirectShadow() {\r\n                        vec2 uv = gl_FragCoord.xy / renderTargetSize;\r\n                        vec2 shadowValue = texture2D(iblShadowsTexture, uv).rg;\r\n                        return mix(shadowValue.rg, vec2(1.0), 1.0 - shadowOpacity);\r\n                    }\r\n                #endif\r\n                #endif\r\n            `,\n            };\n            if (this._material instanceof PBRBaseMaterial) {\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                frag[\"CUSTOM_FRAGMENT_BEFORE_FINALCOLORCOMPOSITION\"] = `\r\n                #ifdef RENDER_WITH_IBL_SHADOWS\r\n                    #ifndef UNLIT\r\n                        #ifdef REFLECTION\r\n                            #ifdef COLORED_IBL_SHADOWS\r\n                                vec3 shadowValue = computeIndirectShadow();\r\n                                finalIrradiance.rgb *= shadowValue.rgb;\r\n                                finalRadianceScaled *= mix(vec3(1.0), shadowValue.rgb, roughness);\r\n                            #else\r\n                                vec2 shadowValue = computeIndirectShadow();\r\n                                finalIrradiance *= shadowValue.x;\r\n                                finalRadianceScaled *= mix(pow(shadowValue.y, 4.0), shadowValue.x, roughness);\r\n                            #endif\r\n                        #endif\r\n                    #else\r\n                        finalDiffuse *= computeIndirectShadow().x;\r\n                    #endif\r\n                #endif\r\n            `;\n            }\n            else if (this._material instanceof OpenPBRMaterial) {\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                frag[\"CUSTOM_FRAGMENT_BEFORE_IBLLAYERCOMPOSITION\"] = `\r\n                #ifdef RENDER_WITH_IBL_SHADOWS\r\n                    #ifndef UNLIT\r\n                        #ifdef REFLECTION\r\n                            #ifdef COLORED_IBL_SHADOWS\r\n                                vec3 shadowValue = computeIndirectShadow();\r\n                                slab_diffuse_ibl.rgb *= shadowValue.rgb;\r\n                                slab_glossy_ibl *= mix(vec3(1.0), shadowValue.rgb, specularAlphaG);\r\n                            #else\r\n                                vec2 shadowValue = computeIndirectShadow();\r\n                                slab_diffuse_ibl *= shadowValue.x;\r\n                                slab_glossy_ibl *= mix(pow(shadowValue.y, 4.0), shadowValue.x, specularAlphaG);\r\n                            #endif\r\n                        #endif\r\n                    #else\r\n                        slab_diffuse_ibl *= computeIndirectShadow().x;\r\n                    #endif\r\n                #endif\r\n            `;\n            }\n            else {\n                frag[\"CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR\"] = `\r\n                #ifdef RENDER_WITH_IBL_SHADOWS\r\n                    #ifdef COLORED_IBL_SHADOWS\r\n                        vec3 shadowValue = computeIndirectShadow();\r\n                        color.rgb *= toGammaSpace(shadowValue.rgb);\r\n                    #else\r\n                        vec2 shadowValue = computeIndirectShadow();\r\n                        color.rgb *= toGammaSpace(shadowValue.x);\r\n                    #endif\r\n                #endif\r\n            `;\n            }\n        }\n        return shaderType === \"vertex\" ? null : frag;\n    }\n}\n/**\n * Defines the name of the plugin.\n */\nIBLShadowsPluginMaterial.Name = \"IBLShadowsPluginMaterial\";\n__decorate([\n    serialize()\n], IBLShadowsPluginMaterial.prototype, \"shadowOpacity\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], IBLShadowsPluginMaterial.prototype, \"isEnabled\", void 0);\nRegisterClass(`BABYLON.IBLShadowsPluginMaterial`, IBLShadowsPluginMaterial);\n//# sourceMappingURL=iblShadowsPluginMaterial.js.map","import { Constants } from \"../../Engines/constants\";\nimport { EngineStore } from \"../../Engines/engineStore\";\nimport { Matrix, Vector3, Vector4, Quaternion } from \"../../Maths/math.vector\";\nimport { Texture } from \"../../Materials/Textures/texture\";\nimport { Logger } from \"../../Misc/logger\";\nimport { _IblShadowsVoxelRenderer } from \"./iblShadowsVoxelRenderer\";\nimport { _IblShadowsVoxelTracingPass } from \"./iblShadowsVoxelTracingPass\";\nimport { PostProcess } from \"../../PostProcesses/postProcess\";\nimport { _IblShadowsSpatialBlurPass } from \"./iblShadowsSpatialBlurPass\";\nimport { _IblShadowsAccumulationPass } from \"./iblShadowsAccumulationPass\";\nimport { PostProcessRenderPipeline } from \"../../PostProcesses/RenderPipeline/postProcessRenderPipeline\";\nimport { PostProcessRenderEffect } from \"core/PostProcesses/RenderPipeline/postProcessRenderEffect\";\nimport { GeometryBufferRenderer } from \"core/Rendering/geometryBufferRenderer\";\nimport { RawTexture } from \"core/Materials/Textures/rawTexture\";\nimport { RawTexture3D } from \"core/Materials/Textures/rawTexture3D\";\nimport { Engine } from \"core/Engines/engine\";\nimport { IBLShadowsPluginMaterial } from \"./iblShadowsPluginMaterial\";\nimport { PBRBaseMaterial } from \"core/Materials/PBR/pbrBaseMaterial\";\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\nimport { Observable } from \"core/Misc/observable\";\nimport \"../geometryBufferRendererSceneComponent\";\nimport \"../iblCdfGeneratorSceneComponent\";\nimport { OpenPBRMaterial } from \"core/Materials/PBR/openPbrMaterial\";\n/**\n * Voxel-based shadow rendering for IBL's.\n * This should not be instanciated directly, as it is part of a scene component\n */\nexport class IblShadowsRenderPipeline extends PostProcessRenderPipeline {\n    /**\n     * Reset the shadow accumulation. This has a similar affect to lowering the remanence for a single frame.\n     * This is useful when making a sudden change to the IBL.\n     */\n    resetAccumulation() {\n        this._accumulationPass.reset = true;\n    }\n    /**\n     * How dark the shadows appear. 1.0 is full opacity, 0.0 is no shadows.\n     */\n    get shadowOpacity() {\n        return this._shadowOpacity;\n    }\n    set shadowOpacity(value) {\n        this._shadowOpacity = value;\n        this._setPluginParameters();\n    }\n    /**\n     * Render the shadows in color rather than black and white.\n     * This is slightly more expensive than black and white shadows but can be much\n     * more accurate when the strongest lights in the IBL are non-white.\n     */\n    get coloredShadows() {\n        return this._coloredShadows;\n    }\n    set coloredShadows(value) {\n        this._coloredShadows = value;\n        this._voxelTracingPass.coloredShadows = value;\n        this._setPluginParameters();\n    }\n    /**\n     * A multiplier for the render size of the shadows. Used for rendering lower-resolution shadows.\n     */\n    get shadowRenderSizeFactor() {\n        return this._renderSizeFactor;\n    }\n    set shadowRenderSizeFactor(value) {\n        this._renderSizeFactor = Math.max(Math.min(value, 1.0), 0.0);\n        this._voxelTracingPass.resize(value);\n        this._spatialBlurPass.resize(value);\n        this._accumulationPass.resize(value);\n        this._setPluginParameters();\n    }\n    /**\n     * How dark the voxel shadows appear. 1.0 is full opacity, 0.0 is no shadows.\n     */\n    get voxelShadowOpacity() {\n        return this._voxelTracingPass?.voxelShadowOpacity;\n    }\n    set voxelShadowOpacity(value) {\n        if (!this._voxelTracingPass) {\n            return;\n        }\n        this._voxelTracingPass.voxelShadowOpacity = value;\n    }\n    /**\n     * How dark the screen-space shadows appear. 1.0 is full opacity, 0.0 is no shadows.\n     */\n    get ssShadowOpacity() {\n        return this._voxelTracingPass?.ssShadowOpacity;\n    }\n    set ssShadowOpacity(value) {\n        if (!this._voxelTracingPass) {\n            return;\n        }\n        this._voxelTracingPass.ssShadowOpacity = value;\n    }\n    /**\n     * The number of samples used in the screen space shadow pass.\n     */\n    get ssShadowSampleCount() {\n        return this._voxelTracingPass?.sssSamples;\n    }\n    set ssShadowSampleCount(value) {\n        if (!this._voxelTracingPass) {\n            return;\n        }\n        this._voxelTracingPass.sssSamples = value;\n    }\n    /**\n     * The stride of the screen-space shadow pass. This controls the distance between samples\n     * in pixels.\n     */\n    get ssShadowStride() {\n        return this._voxelTracingPass?.sssStride;\n    }\n    set ssShadowStride(value) {\n        if (!this._voxelTracingPass) {\n            return;\n        }\n        this._voxelTracingPass.sssStride = value;\n    }\n    /**\n     * A scale for the maximum distance a screen-space shadow can be cast in world-space.\n     * The maximum distance that screen-space shadows cast is derived from the voxel size\n     * and this value so shouldn't need to change if you scale your scene\n     */\n    get ssShadowDistanceScale() {\n        return this._sssMaxDistScale;\n    }\n    set ssShadowDistanceScale(value) {\n        this._sssMaxDistScale = value;\n        this._updateSsShadowParams();\n    }\n    /**\n     * Screen-space shadow thickness scale. This value controls the assumed thickness of\n     * on-screen surfaces in world-space. It scales with the size of the shadow-casting\n     * region so shouldn't need to change if you scale your scene.\n     */\n    get ssShadowThicknessScale() {\n        return this._sssThicknessScale;\n    }\n    set ssShadowThicknessScale(value) {\n        this._sssThicknessScale = value;\n        this._updateSsShadowParams();\n    }\n    /**\n     * Returns the texture containing the voxel grid data\n     * @returns The texture containing the voxel grid data\n     * @internal\n     */\n    _getVoxelGridTexture() {\n        const tex = this._voxelRenderer?.getVoxelGrid();\n        if (tex && tex.isReady()) {\n            return tex;\n        }\n        return this._dummyTexture3d;\n    }\n    /**\n     * Returns the noise texture.\n     * @returns The noise texture.\n     * @internal\n     */\n    _getNoiseTexture() {\n        const tex = this._noiseTexture;\n        if (tex && tex.isReady()) {\n            return tex;\n        }\n        return this._dummyTexture2d;\n    }\n    /**\n     * Returns the voxel-tracing texture.\n     * @returns The voxel-tracing texture.\n     * @internal\n     */\n    _getVoxelTracingTexture() {\n        const tex = this._voxelTracingPass?.getOutputTexture();\n        if (tex && tex.isReady()) {\n            return tex;\n        }\n        return this._dummyTexture2d;\n    }\n    /**\n     * Returns the spatial blur texture.\n     * @returns The spatial blur texture.\n     * @internal\n     */\n    _getSpatialBlurTexture() {\n        const tex = this._spatialBlurPass.getOutputTexture();\n        if (tex && tex.isReady()) {\n            return tex;\n        }\n        return this._dummyTexture2d;\n    }\n    /**\n     * Returns the accumulated shadow texture.\n     * @returns The accumulated shadow texture.\n     * @internal\n     */\n    _getAccumulatedTexture() {\n        const tex = this._accumulationPass?.getOutputTexture();\n        if (tex && tex.isReady()) {\n            return tex;\n        }\n        return this._dummyTexture2d;\n    }\n    /**\n     * Turn on or off the debug view of the G-Buffer. This will display only the targets\n     * of the g-buffer that are used by the shadow pipeline.\n     */\n    get gbufferDebugEnabled() {\n        return this._gbufferDebugEnabled;\n    }\n    set gbufferDebugEnabled(enabled) {\n        if (enabled && !this.allowDebugPasses) {\n            Logger.Warn(\"Can't enable G-Buffer debug view without setting allowDebugPasses to true.\");\n            return;\n        }\n        this._gbufferDebugEnabled = enabled;\n        if (enabled) {\n            this._enableEffect(this._getGBufferDebugPass().name, this.cameras);\n        }\n        else {\n            this._disableEffect(this._getGBufferDebugPass().name, this.cameras);\n        }\n    }\n    /**\n     * Turn on or off the debug view of the CDF importance sampling data\n     */\n    get cdfDebugEnabled() {\n        return this.scene.iblCdfGenerator ? this.scene.iblCdfGenerator.debugEnabled : false;\n    }\n    /**\n     * Turn on or off the debug view of the CDF importance sampling data\n     */\n    set cdfDebugEnabled(enabled) {\n        if (!this.scene.iblCdfGenerator) {\n            return;\n        }\n        if (enabled && !this.allowDebugPasses) {\n            Logger.Warn(\"Can't enable importance sampling debug view without setting allowDebugPasses to true.\");\n            return;\n        }\n        if (enabled === this.scene.iblCdfGenerator.debugEnabled) {\n            return;\n        }\n        this.scene.iblCdfGenerator.debugEnabled = enabled;\n        if (enabled) {\n            this._enableEffect(this.scene.iblCdfGenerator.debugPassName, this.cameras);\n        }\n        else {\n            this._disableEffect(this.scene.iblCdfGenerator.debugPassName, this.cameras);\n        }\n    }\n    /**\n     * This displays the voxel grid in slices spread across the screen.\n     * It also displays what slices of the model are stored in each layer\n     * of the voxel grid. Each red stripe represents one layer while each gradient\n     * (from bright red to black) represents the layers rendered in a single draw call.\n     */\n    get voxelDebugEnabled() {\n        return this._voxelRenderer?.voxelDebugEnabled;\n    }\n    set voxelDebugEnabled(enabled) {\n        if (!this._voxelRenderer) {\n            return;\n        }\n        if (enabled && !this.allowDebugPasses) {\n            Logger.Warn(\"Can't enable voxel debug view without setting allowDebugPasses to true.\");\n            return;\n        }\n        this._voxelRenderer.voxelDebugEnabled = enabled;\n        if (enabled) {\n            this._enableEffect(this._voxelRenderer.debugPassName, this.cameras);\n        }\n        else {\n            this._disableEffect(this._voxelRenderer.debugPassName, this.cameras);\n        }\n    }\n    /**\n     * When using tri-planar voxelization (the default), this value can be used to\n     * display only the voxelization result for that axis. z-axis = 0, y-axis = 1, x-axis = 2\n     */\n    get voxelDebugAxis() {\n        return this._voxelRenderer?.voxelDebugAxis;\n    }\n    set voxelDebugAxis(axisNum) {\n        if (!this._voxelRenderer) {\n            return;\n        }\n        this._voxelRenderer.voxelDebugAxis = axisNum;\n    }\n    /**\n     * Displays a given mip of the voxel grid. `voxelDebugAxis` must be undefined in this\n     * case because we only generate mips for the combined voxel grid.\n     */\n    set voxelDebugDisplayMip(mipNum) {\n        if (!this._voxelRenderer) {\n            return;\n        }\n        this._voxelRenderer.setDebugMipNumber(mipNum);\n    }\n    /**\n     * Display the debug view for just the shadow samples taken this frame.\n     */\n    get voxelTracingDebugEnabled() {\n        return this._voxelTracingPass?.debugEnabled;\n    }\n    set voxelTracingDebugEnabled(enabled) {\n        if (!this._voxelTracingPass) {\n            return;\n        }\n        if (enabled && !this.allowDebugPasses) {\n            Logger.Warn(\"Can't enable voxel tracing debug view without setting allowDebugPasses to true.\");\n            return;\n        }\n        if (enabled === this._voxelTracingPass.debugEnabled) {\n            return;\n        }\n        this._voxelTracingPass.debugEnabled = enabled;\n        if (enabled) {\n            this._enableEffect(this._voxelTracingPass.debugPassName, this.cameras);\n        }\n        else {\n            this._disableEffect(this._voxelTracingPass.debugPassName, this.cameras);\n        }\n    }\n    /**\n     * Display the debug view for the spatial blur pass\n     */\n    get spatialBlurPassDebugEnabled() {\n        return this._spatialBlurPass.debugEnabled;\n    }\n    set spatialBlurPassDebugEnabled(enabled) {\n        if (!this._spatialBlurPass) {\n            return;\n        }\n        if (enabled && !this.allowDebugPasses) {\n            Logger.Warn(\"Can't enable spatial blur debug view without setting allowDebugPasses to true.\");\n            return;\n        }\n        if (enabled === this._spatialBlurPass.debugEnabled) {\n            return;\n        }\n        this._spatialBlurPass.debugEnabled = enabled;\n        if (enabled) {\n            this._enableEffect(this._spatialBlurPass.debugPassName, this.cameras);\n        }\n        else {\n            this._disableEffect(this._spatialBlurPass.debugPassName, this.cameras);\n        }\n    }\n    /**\n     * Display the debug view for the shadows accumulated over time.\n     */\n    get accumulationPassDebugEnabled() {\n        return this._accumulationPass?.debugEnabled;\n    }\n    set accumulationPassDebugEnabled(enabled) {\n        if (!this._accumulationPass) {\n            return;\n        }\n        if (enabled && !this.allowDebugPasses) {\n            Logger.Warn(\"Can't enable accumulation pass debug view without setting allowDebugPasses to true.\");\n            return;\n        }\n        if (enabled === this._accumulationPass.debugEnabled) {\n            return;\n        }\n        this._accumulationPass.debugEnabled = enabled;\n        if (enabled) {\n            this._enableEffect(this._accumulationPass.debugPassName, this.cameras);\n        }\n        else {\n            this._disableEffect(this._accumulationPass.debugPassName, this.cameras);\n        }\n    }\n    /**\n     * Add a mesh to be used for shadow-casting in the IBL shadow pipeline.\n     * These meshes will be written to the voxel grid.\n     * @param mesh A mesh or list of meshes that you want to cast shadows\n     */\n    addShadowCastingMesh(mesh) {\n        if (Array.isArray(mesh)) {\n            for (const m of mesh) {\n                if (m && this._shadowCastingMeshes.indexOf(m) === -1) {\n                    this._shadowCastingMeshes.push(m);\n                }\n            }\n        }\n        else {\n            if (mesh && this._shadowCastingMeshes.indexOf(mesh) === -1) {\n                this._shadowCastingMeshes.push(mesh);\n            }\n        }\n    }\n    /**\n     * Remove a mesh from the shadow-casting list. The mesh will no longer be written\n     * to the voxel grid and will not cast shadows.\n     * @param mesh The mesh or list of meshes that you don't want to cast shadows.\n     */\n    removeShadowCastingMesh(mesh) {\n        if (Array.isArray(mesh)) {\n            for (const m of mesh) {\n                const index = this._shadowCastingMeshes.indexOf(m);\n                if (index !== -1) {\n                    this._shadowCastingMeshes.splice(index, 1);\n                }\n            }\n        }\n        else {\n            const index = this._shadowCastingMeshes.indexOf(mesh);\n            if (index !== -1) {\n                this._shadowCastingMeshes.splice(index, 1);\n            }\n        }\n    }\n    /**\n     * Clear the list of shadow-casting meshes. This will remove all meshes from the list\n     */\n    clearShadowCastingMeshes() {\n        this._shadowCastingMeshes.length = 0;\n    }\n    /**\n     * The exponent of the resolution of the voxel shadow grid. Higher resolutions will result in sharper\n     * shadows but are more expensive to compute and require more memory.\n     * The resolution is calculated as 2 to the power of this number.\n     */\n    get resolutionExp() {\n        return this._voxelRenderer.voxelResolutionExp;\n    }\n    set resolutionExp(newResolution) {\n        if (newResolution === this._voxelRenderer.voxelResolutionExp) {\n            return;\n        }\n        if (this._voxelRenderer.isVoxelizationInProgress()) {\n            Logger.Warn(\"Can't change the resolution of the voxel grid while voxelization is in progress.\");\n            return;\n        }\n        this._voxelRenderer.voxelResolutionExp = Math.max(1, Math.min(newResolution, 8));\n        this._accumulationPass.reset = true;\n    }\n    /**\n     * The number of different directions to sample during the voxel tracing pass\n     */\n    get sampleDirections() {\n        return this._voxelTracingPass?.sampleDirections;\n    }\n    /**\n     * The number of different directions to sample during the voxel tracing pass\n     */\n    set sampleDirections(value) {\n        if (!this._voxelTracingPass) {\n            return;\n        }\n        this._voxelTracingPass.sampleDirections = value;\n    }\n    /**\n     * The decree to which the shadows persist between frames. 0.0 is no persistence, 1.0 is full persistence.\n     **/\n    get shadowRemanence() {\n        return this._accumulationPass?.remanence;\n    }\n    /**\n     * The decree to which the shadows persist between frames. 0.0 is no persistence, 1.0 is full persistence.\n     **/\n    set shadowRemanence(value) {\n        if (!this._accumulationPass) {\n            return;\n        }\n        this._accumulationPass.remanence = value;\n    }\n    /**\n     * The global Y-axis rotation of the IBL for shadows. This should match the Y-rotation of the environment map applied to materials, skybox, etc.\n     */\n    get envRotation() {\n        return this._voxelTracingPass?.envRotation;\n    }\n    /**\n     * The global Y-axis rotation of the IBL for shadows. This should match the Y-rotation of the environment map applied to materials, skybox, etc.\n     */\n    set envRotation(value) {\n        if (!this._voxelTracingPass) {\n            return;\n        }\n        this._voxelTracingPass.envRotation = value;\n        this._accumulationPass.reset = true;\n    }\n    /**\n     * Allow debug passes to be enabled. Default is false.\n     */\n    get allowDebugPasses() {\n        return this._allowDebugPasses;\n    }\n    /**\n     * Allow debug passes to be enabled. Default is false.\n     */\n    set allowDebugPasses(value) {\n        if (this._allowDebugPasses === value) {\n            return;\n        }\n        this._allowDebugPasses = value;\n        if (value && this.scene.iblCdfGenerator) {\n            if (this.scene.iblCdfGenerator.isReady()) {\n                this._createDebugPasses();\n            }\n            else {\n                this.scene.iblCdfGenerator.onGeneratedObservable.addOnce(() => {\n                    this._createDebugPasses();\n                });\n            }\n        }\n        else {\n            this._disposeDebugPasses();\n        }\n    }\n    /**\n     *  Support test.\n     */\n    static get IsSupported() {\n        const engine = EngineStore.LastCreatedEngine;\n        if (!engine) {\n            return false;\n        }\n        return engine._features.supportIBLShadows;\n    }\n    /**\n     * Toggle the shadow tracing on or off\n     * @param enabled Toggle the shadow tracing on or off\n     */\n    toggleShadow(enabled) {\n        this._enabled = enabled;\n        this._voxelTracingPass.enabled = enabled;\n        this._spatialBlurPass.enabled = enabled;\n        this._accumulationPass.enabled = enabled;\n        for (const mat of this._materialsWithRenderPlugin) {\n            if (mat.pluginManager) {\n                const plugin = mat.pluginManager.getPlugin(IBLShadowsPluginMaterial.Name);\n                plugin.isEnabled = enabled;\n            }\n        }\n        this._setPluginParameters();\n    }\n    /**\n     * Trigger the scene to be re-voxelized. This should be run when any shadow-casters have been added, removed or moved.\n     */\n    updateVoxelization() {\n        if (this._shadowCastingMeshes.length === 0) {\n            Logger.Warn(\"IBL Shadows: updateVoxelization called with no shadow-casting meshes to voxelize.\");\n            return;\n        }\n        this._voxelRenderer.updateVoxelGrid(this._shadowCastingMeshes);\n        this._voxelRenderer.onVoxelizationCompleteObservable.addOnce(() => {\n            this.onVoxelizationCompleteObservable.notifyObservers();\n        });\n        this._updateSsShadowParams();\n    }\n    /**\n     * Trigger the scene bounds of shadow-casters to be calculated. This is the world size that the voxel grid will cover and will always be a cube.\n     */\n    updateSceneBounds() {\n        const bounds = {\n            min: new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE),\n            max: new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE),\n        };\n        for (const mesh of this._shadowCastingMeshes) {\n            const localBounds = mesh.getHierarchyBoundingVectors(true);\n            bounds.min = Vector3.Minimize(bounds.min, localBounds.min);\n            bounds.max = Vector3.Maximize(bounds.max, localBounds.max);\n        }\n        const size = bounds.max.subtract(bounds.min);\n        this.voxelGridSize = Math.max(size.x, size.y, size.z);\n        if (this._shadowCastingMeshes.length === 0 || !isFinite(this.voxelGridSize) || this.voxelGridSize === 0) {\n            Logger.Warn(\"IBL Shadows: Scene size is invalid. Can't update bounds.\");\n            this.voxelGridSize = 1.0;\n            return;\n        }\n        const halfSize = this.voxelGridSize / 2.0;\n        const centre = bounds.max.add(bounds.min).multiplyByFloats(-0.5, -0.5, -0.5);\n        const invWorldScaleMatrix = Matrix.Compose(new Vector3(1.0 / halfSize, 1.0 / halfSize, 1.0 / halfSize), new Quaternion(), new Vector3(0, 0, 0));\n        const invTranslationMatrix = Matrix.Compose(new Vector3(1.0, 1.0, 1.0), new Quaternion(), centre);\n        invTranslationMatrix.multiplyToRef(invWorldScaleMatrix, invWorldScaleMatrix);\n        this._voxelTracingPass.setWorldScaleMatrix(invWorldScaleMatrix);\n        this._voxelRenderer.setWorldScaleMatrix(invWorldScaleMatrix);\n        // Set world scale for spatial blur.\n        this._spatialBlurPass.setWorldScale(halfSize * 2.0);\n        this._updateSsShadowParams();\n    }\n    /**\n     * @param name The rendering pipeline name\n     * @param scene The scene linked to this pipeline\n     * @param options Options to configure the pipeline\n     * @param cameras Cameras to apply the pipeline to.\n     */\n    constructor(name, scene, options = {}, cameras) {\n        super(scene.getEngine(), name);\n        this._allowDebugPasses = false;\n        this._debugPasses = [];\n        this._shadowCastingMeshes = [];\n        this._shadowOpacity = 0.8;\n        this._enabled = true;\n        this._coloredShadows = false;\n        this._materialsWithRenderPlugin = [];\n        /**\n         * Observable that triggers when the shadow renderer is ready\n         */\n        this.onShadowTextureReadyObservable = new Observable();\n        /**\n         * Observable that triggers when a new IBL is set and the importance sampling is ready\n         */\n        this.onNewIblReadyObservable = new Observable();\n        /**\n         * Observable that triggers when the voxelization is complete\n         */\n        this.onVoxelizationCompleteObservable = new Observable();\n        /**\n         * The current world-space size of that the voxel grid covers in the scene.\n         */\n        this.voxelGridSize = 1.0;\n        this._renderSizeFactor = 1.0;\n        this._gbufferDebugEnabled = false;\n        this._gBufferDebugSizeParams = new Vector4(0.0, 0.0, 0.0, 0.0);\n        this.scene = scene;\n        this._cameras = cameras || [scene.activeCamera];\n        // Create the dummy textures to be used when the pipeline is not ready\n        const blackPixels = new Uint8Array([0, 0, 0, 255]);\n        this._dummyTexture2d = new RawTexture(blackPixels, 1, 1, Engine.TEXTUREFORMAT_RGBA, scene, false);\n        this._dummyTexture3d = new RawTexture3D(blackPixels, 1, 1, 1, Engine.TEXTUREFORMAT_RGBA, scene, false);\n        // Setup the geometry buffer target formats\n        const textureTypesAndFormats = {};\n        textureTypesAndFormats[GeometryBufferRenderer.SCREENSPACE_DEPTH_TEXTURE_TYPE] = { textureFormat: Constants.TEXTUREFORMAT_R, textureType: Constants.TEXTURETYPE_FLOAT };\n        textureTypesAndFormats[GeometryBufferRenderer.VELOCITY_LINEAR_TEXTURE_TYPE] = { textureFormat: Constants.TEXTUREFORMAT_RG, textureType: Constants.TEXTURETYPE_HALF_FLOAT };\n        textureTypesAndFormats[GeometryBufferRenderer.POSITION_TEXTURE_TYPE] = { textureFormat: Constants.TEXTUREFORMAT_RGBA, textureType: Constants.TEXTURETYPE_HALF_FLOAT };\n        textureTypesAndFormats[GeometryBufferRenderer.NORMAL_TEXTURE_TYPE] = { textureFormat: Constants.TEXTUREFORMAT_RGBA, textureType: Constants.TEXTURETYPE_HALF_FLOAT };\n        const geometryBufferRenderer = scene.enableGeometryBufferRenderer(undefined, Constants.TEXTUREFORMAT_DEPTH32_FLOAT, textureTypesAndFormats);\n        if (!geometryBufferRenderer) {\n            Logger.Error(\"Geometry buffer renderer is required for IBL shadows to work.\");\n            return;\n        }\n        this._geometryBufferRenderer = geometryBufferRenderer;\n        this._geometryBufferRenderer.enableScreenspaceDepth = true;\n        this._geometryBufferRenderer.enableVelocityLinear = true;\n        this._geometryBufferRenderer.enablePosition = true;\n        this._geometryBufferRenderer.enableNormal = true;\n        this._geometryBufferRenderer.generateNormalsInWorldSpace = true;\n        this.scene.enableIblCdfGenerator();\n        this.shadowOpacity = options.shadowOpacity || 0.8;\n        this._voxelRenderer = new _IblShadowsVoxelRenderer(this.scene, this, options ? options.resolutionExp : 6, options.triPlanarVoxelization !== undefined ? options.triPlanarVoxelization : true);\n        this._voxelTracingPass = new _IblShadowsVoxelTracingPass(this.scene, this);\n        this._spatialBlurPass = new _IblShadowsSpatialBlurPass(this.scene, this);\n        this._accumulationPass = new _IblShadowsAccumulationPass(this.scene, this);\n        this._accumulationPass.onReadyObservable.addOnce(() => {\n            this.onShadowTextureReadyObservable.notifyObservers();\n        });\n        this.sampleDirections = options.sampleDirections || 2;\n        this.voxelShadowOpacity = options.voxelShadowOpacity ?? 1.0;\n        this.envRotation = options.envRotation ?? 0.0;\n        this.shadowRenderSizeFactor = options.shadowRenderSizeFactor || 1.0;\n        this.ssShadowOpacity = options.ssShadowsEnabled === undefined || options.ssShadowsEnabled ? 1.0 : 0.0;\n        this.ssShadowDistanceScale = options.ssShadowDistanceScale || 1.25;\n        this.ssShadowSampleCount = options.ssShadowSampleCount || 16;\n        this.ssShadowStride = options.ssShadowStride || 8;\n        this.ssShadowThicknessScale = options.ssShadowThicknessScale || 1.0;\n        this.shadowRemanence = options.shadowRemanence ?? 0.75;\n        this._noiseTexture = new Texture(\"https://assets.babylonjs.com/textures/blue_noise/blue_noise_rgb.png\", this.scene, false, true, Constants.TEXTURE_NEAREST_SAMPLINGMODE);\n        scene.postProcessRenderPipelineManager.addPipeline(this);\n        this.scene.onActiveCameraChanged.add(this._listenForCameraChanges.bind(this));\n        this.scene.onBeforeRenderObservable.add(this._updateBeforeRender.bind(this));\n        this._listenForCameraChanges();\n        this.scene.getEngine().onResizeObservable.add(this._handleResize.bind(this));\n        // Assigning the shadow texture to the materials needs to be done after the RT's are created.\n        if (this.scene.iblCdfGenerator) {\n            this.scene.iblCdfGenerator.onGeneratedObservable.add(() => {\n                this._setPluginParameters();\n                this.onNewIblReadyObservable.notifyObservers();\n            });\n        }\n    }\n    _handleResize() {\n        this._voxelRenderer.resize();\n        this._voxelTracingPass.resize(this.shadowRenderSizeFactor);\n        this._spatialBlurPass.resize(this.shadowRenderSizeFactor);\n        this._accumulationPass.resize(this.shadowRenderSizeFactor);\n        this._setPluginParameters();\n    }\n    _getGBufferDebugPass() {\n        if (this._gbufferDebugPass) {\n            return this._gbufferDebugPass;\n        }\n        const isWebGPU = this.engine.isWebGPU;\n        const textureNames = [\"depthSampler\", \"normalSampler\", \"positionSampler\", \"velocitySampler\"];\n        const options = {\n            width: this.scene.getEngine().getRenderWidth(),\n            height: this.scene.getEngine().getRenderHeight(),\n            samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n            engine: this.scene.getEngine(),\n            textureType: Constants.TEXTURETYPE_UNSIGNED_BYTE,\n            textureFormat: Constants.TEXTUREFORMAT_RGBA,\n            uniforms: [\"sizeParams\"],\n            samplers: textureNames,\n            reusable: false,\n            shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n            extraInitializations: (useWebGPU, list) => {\n                if (useWebGPU) {\n                    list.push(import(\"../../ShadersWGSL/iblShadowGBufferDebug.fragment\"));\n                }\n                else {\n                    list.push(import(\"../../Shaders/iblShadowGBufferDebug.fragment\"));\n                }\n            },\n        };\n        this._gbufferDebugPass = new PostProcess(\"iblShadowGBufferDebug\", \"iblShadowGBufferDebug\", options);\n        if (this.engine.isWebGPU) {\n            this._gbufferDebugPass.samples = this.engine.currentSampleCount ?? 1;\n        }\n        this._gbufferDebugPass.autoClear = false;\n        this._gbufferDebugPass.onApplyObservable.add((effect) => {\n            const depthIndex = this._geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.SCREENSPACE_DEPTH_TEXTURE_TYPE);\n            effect.setTexture(\"depthSampler\", this._geometryBufferRenderer.getGBuffer().textures[depthIndex]);\n            const normalIndex = this._geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.NORMAL_TEXTURE_TYPE);\n            effect.setTexture(\"normalSampler\", this._geometryBufferRenderer.getGBuffer().textures[normalIndex]);\n            const positionIndex = this._geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.POSITION_TEXTURE_TYPE);\n            effect.setTexture(\"positionSampler\", this._geometryBufferRenderer.getGBuffer().textures[positionIndex]);\n            const velocityIndex = this._geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.VELOCITY_LINEAR_TEXTURE_TYPE);\n            effect.setTexture(\"velocitySampler\", this._geometryBufferRenderer.getGBuffer().textures[velocityIndex]);\n            effect.setVector4(\"sizeParams\", this._gBufferDebugSizeParams);\n            if (this.scene.activeCamera) {\n                effect.setFloat(\"maxDepth\", this.scene.activeCamera.maxZ);\n            }\n        });\n        return this._gbufferDebugPass;\n    }\n    _createDebugPasses() {\n        if (this.scene.iblCdfGenerator) {\n            this._debugPasses = [{ pass: this.scene.iblCdfGenerator.getDebugPassPP(), enabled: this.cdfDebugEnabled }];\n        }\n        else {\n            this._debugPasses = [];\n        }\n        this._debugPasses.push({ pass: this._voxelRenderer.getDebugPassPP(), enabled: this.voxelDebugEnabled }, { pass: this._voxelTracingPass.getDebugPassPP(), enabled: this.voxelTracingDebugEnabled }, { pass: this._spatialBlurPass.getDebugPassPP(), enabled: this.spatialBlurPassDebugEnabled }, { pass: this._accumulationPass.getDebugPassPP(), enabled: this.accumulationPassDebugEnabled }, { pass: this._getGBufferDebugPass(), enabled: this.gbufferDebugEnabled });\n        for (let i = 0; i < this._debugPasses.length; i++) {\n            if (!this._debugPasses[i].pass) {\n                continue;\n            }\n            this.addEffect(new PostProcessRenderEffect(this.scene.getEngine(), this._debugPasses[i].pass.name, () => {\n                return this._debugPasses[i].pass;\n            }, true));\n        }\n        const cameras = this.cameras.slice();\n        this.scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this.name, this.cameras);\n        this.scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(this.name, cameras);\n        for (let i = 0; i < this._debugPasses.length; i++) {\n            if (!this._debugPasses[i].pass) {\n                continue;\n            }\n            if (this._debugPasses[i].enabled) {\n                this._enableEffect(this._debugPasses[i].pass.name, this.cameras);\n            }\n            else {\n                this._disableEffect(this._debugPasses[i].pass.name, this.cameras);\n            }\n        }\n    }\n    _disposeEffectPasses() {\n        this.scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this.name, this.cameras);\n        this._disposeDebugPasses();\n        this._reset();\n    }\n    _disposeDebugPasses() {\n        for (let i = 0; i < this._debugPasses.length; i++) {\n            this._disableEffect(this._debugPasses[i].pass.name, this.cameras);\n            this._debugPasses[i].pass.dispose();\n        }\n        this._debugPasses = [];\n    }\n    _updateDebugPasses() {\n        let count = 0;\n        if (this._gbufferDebugEnabled) {\n            count++;\n        }\n        if (this.cdfDebugEnabled) {\n            count++;\n        }\n        if (this.voxelDebugEnabled) {\n            count++;\n        }\n        if (this.voxelTracingDebugEnabled) {\n            count++;\n        }\n        if (this.spatialBlurPassDebugEnabled) {\n            count++;\n        }\n        if (this.accumulationPassDebugEnabled) {\n            count++;\n        }\n        const rows = Math.ceil(Math.sqrt(count));\n        const cols = Math.ceil(count / rows);\n        const width = 1.0 / cols;\n        const height = 1.0 / rows;\n        let x = 0;\n        let y = 0;\n        if (this.gbufferDebugEnabled) {\n            this._gBufferDebugSizeParams.set(x, y, cols, rows);\n            x -= width;\n            if (x <= -1) {\n                x = 0;\n                y -= height;\n            }\n        }\n        if (this.cdfDebugEnabled && this.scene.iblCdfGenerator) {\n            this.scene.iblCdfGenerator.setDebugDisplayParams(x, y, cols, rows);\n            x -= width;\n            if (x <= -1) {\n                x = 0;\n                y -= height;\n            }\n        }\n        if (this.voxelDebugEnabled) {\n            this._voxelRenderer.setDebugDisplayParams(x, y, cols, rows);\n            x -= width;\n            if (x <= -1) {\n                x = 0;\n                y -= height;\n            }\n        }\n        if (this.voxelTracingDebugEnabled) {\n            this._voxelTracingPass.setDebugDisplayParams(x, y, cols, rows);\n            x -= width;\n            if (x <= -1) {\n                x = 0;\n                y -= height;\n            }\n        }\n        if (this.spatialBlurPassDebugEnabled) {\n            this._spatialBlurPass.setDebugDisplayParams(x, y, cols, rows);\n            x -= width;\n            if (x <= -1) {\n                x = 0;\n                y -= height;\n            }\n        }\n        if (this.accumulationPassDebugEnabled) {\n            this._accumulationPass.setDebugDisplayParams(x, y, cols, rows);\n            x -= width;\n            if (x <= -1) {\n                x = 0;\n                y -= height;\n            }\n        }\n    }\n    /**\n     * Update the SS shadow max distance and thickness based on the voxel grid size and resolution.\n     * The max distance should be just a little larger than the world size of a single voxel.\n     */\n    _updateSsShadowParams() {\n        this._voxelTracingPass.sssMaxDist = (this._sssMaxDistScale * this.voxelGridSize) / (1 << this.resolutionExp);\n        this._voxelTracingPass.sssThickness = this._sssThicknessScale * 0.005 * this.voxelGridSize;\n    }\n    /**\n     * Apply the shadows to a material or array of materials. If no material is provided, all\n     * materials in the scene will be added.\n     * @param material Material that will be affected by the shadows. If not provided, all materials of the scene will be affected.\n     */\n    addShadowReceivingMaterial(material) {\n        if (material) {\n            if (Array.isArray(material)) {\n                for (const m of material) {\n                    this._addShadowSupportToMaterial(m);\n                }\n            }\n            else {\n                this._addShadowSupportToMaterial(material);\n            }\n        }\n        else {\n            for (const mat of this.scene.materials) {\n                this._addShadowSupportToMaterial(mat);\n            }\n        }\n    }\n    /**\n     * Remove a material from the list of materials that receive shadows. If no material\n     * is provided, all materials in the scene will be removed.\n     * @param material The material or array of materials that will no longer receive shadows\n     */\n    removeShadowReceivingMaterial(material) {\n        if (Array.isArray(material)) {\n            for (const m of material) {\n                const matIndex = this._materialsWithRenderPlugin.indexOf(m);\n                if (matIndex !== -1) {\n                    this._materialsWithRenderPlugin.splice(matIndex, 1);\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\n                    const plugin = m.pluginManager?.getPlugin(IBLShadowsPluginMaterial.Name);\n                    plugin.isEnabled = false;\n                }\n            }\n        }\n        else {\n            const matIndex = this._materialsWithRenderPlugin.indexOf(material);\n            if (matIndex !== -1) {\n                this._materialsWithRenderPlugin.splice(matIndex, 1);\n                const plugin = material.pluginManager.getPlugin(IBLShadowsPluginMaterial.Name);\n                plugin.isEnabled = false;\n            }\n        }\n    }\n    /**\n     * Clear the list of materials that receive shadows. This will remove all materials from the list\n     */\n    clearShadowReceivingMaterials() {\n        for (const mat of this._materialsWithRenderPlugin) {\n            const plugin = mat.pluginManager?.getPlugin(IBLShadowsPluginMaterial.Name);\n            if (plugin) {\n                plugin.isEnabled = false;\n            }\n        }\n        this._materialsWithRenderPlugin.length = 0;\n    }\n    _addShadowSupportToMaterial(material) {\n        if (!(material instanceof PBRBaseMaterial) && !(material instanceof StandardMaterial) && !(material instanceof OpenPBRMaterial)) {\n            return;\n        }\n        let plugin = material.pluginManager?.getPlugin(IBLShadowsPluginMaterial.Name);\n        if (!plugin) {\n            plugin = new IBLShadowsPluginMaterial(material);\n        }\n        if (this._materialsWithRenderPlugin.indexOf(material) !== -1) {\n            return;\n        }\n        if (this._enabled) {\n            plugin.iblShadowsTexture = this._getAccumulatedTexture().getInternalTexture();\n            plugin.shadowOpacity = this.shadowOpacity;\n        }\n        plugin.isEnabled = this._enabled;\n        plugin.isColored = this._coloredShadows;\n        this._materialsWithRenderPlugin.push(material);\n    }\n    _setPluginParameters() {\n        if (!this._enabled) {\n            return;\n        }\n        for (const mat of this._materialsWithRenderPlugin) {\n            if (mat.pluginManager) {\n                const plugin = mat.pluginManager.getPlugin(IBLShadowsPluginMaterial.Name);\n                plugin.iblShadowsTexture = this._getAccumulatedTexture().getInternalTexture();\n                plugin.shadowOpacity = this.shadowOpacity;\n                plugin.isColored = this._coloredShadows;\n            }\n        }\n    }\n    _updateBeforeRender() {\n        this._updateDebugPasses();\n    }\n    _listenForCameraChanges() {\n        // We want to listen for camera changes and change settings while the camera is moving.\n        this.scene.activeCamera?.onViewMatrixChangedObservable.add(() => {\n            this._accumulationPass.isMoving = true;\n        });\n    }\n    /**\n     * Checks if the IBL shadow pipeline is ready to render shadows\n     * @returns true if the IBL shadow pipeline is ready to render the shadows\n     */\n    isReady() {\n        return (this._noiseTexture.isReady() &&\n            this._voxelRenderer.isReady() &&\n            this.scene.iblCdfGenerator &&\n            this.scene.iblCdfGenerator.isReady() &&\n            (!this._voxelTracingPass || this._voxelTracingPass.isReady()) &&\n            (!this._spatialBlurPass || this._spatialBlurPass.isReady()) &&\n            (!this._accumulationPass || this._accumulationPass.isReady()));\n    }\n    /**\n     * Get the class name\n     * @returns \"IBLShadowsRenderPipeline\"\n     */\n    getClassName() {\n        return \"IBLShadowsRenderPipeline\";\n    }\n    /**\n     * Disposes the IBL shadow pipeline and associated resources\n     */\n    dispose() {\n        const materials = this._materialsWithRenderPlugin.splice(0);\n        for (const mat of materials) {\n            this.removeShadowReceivingMaterial(mat);\n        }\n        this._disposeEffectPasses();\n        this._noiseTexture.dispose();\n        this._voxelRenderer.dispose();\n        this._voxelTracingPass.dispose();\n        this._spatialBlurPass.dispose();\n        this._accumulationPass.dispose();\n        this._dummyTexture2d.dispose();\n        this._dummyTexture3d.dispose();\n        this.onNewIblReadyObservable.clear();\n        this.onShadowTextureReadyObservable.clear();\n        this.onVoxelizationCompleteObservable.clear();\n        super.dispose();\n    }\n}\n//# sourceMappingURL=iblShadowsRenderPipeline.js.map"],"names":[],"mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,CAAC;AACb;AACA,iBAAiB;AACjB,gBAAgB,IAAI,CAAC,kCAAkC,CAAC,GAAG,CAAC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,CAAC;AACb;AACA;AACA,aAAa;AACb,YAAY,IAAI,GAAG;AACnB;AACA,gBAAgB,2BAA2B,EAAE,CAAC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,CAAC;AACb,aAAa;AACb,YAAY,IAAI,IAAI,CAAC,SAAS,YAAY,eAAe,EAAE;AAC3D;AACA,gBAAgB,IAAI,CAAC,8CAA8C,CAAC,GAAG,CAAC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,CAAC;AACb;AACA,iBAAiB,IAAI,IAAI,CAAC,SAAS,YAAY,eAAe,EAAE;AAChE;AACA,gBAAgB,IAAI,CAAC,4CAA4C,CAAC,GAAG,CAAC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,CAAC;AACb;AACA,iBAAiB;AACjB,gBAAgB,IAAI,CAAC,kCAAkC,CAAC,GAAG,CAAC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,CAAC;AACb;AACA;AACA,QAAQ,OAAO,UAAU,KAAK,QAAQ,GAAG,IAAI,GAAG,IAAI;AACpD;AACA;AACA;AACA;AACA;AACA,wBAAwB,CAAC,IAAI,GAAG,0BAA0B;AAC1D,UAAU,CAAC;AACX,IAAI,SAAS;AACb,CAAC,EAAE,wBAAwB,CAAC,SAAS,EAAE,eAAe,EAAE,MAAM,CAAC;AAC/D,UAAU,CAAC;AACX,IAAI,SAAS,EAAE;AACf,IAAI,gBAAgB,CAAC,kCAAkC;AACvD,CAAC,EAAE,wBAAwB,CAAC,SAAS,EAAE,WAAW,EA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"}