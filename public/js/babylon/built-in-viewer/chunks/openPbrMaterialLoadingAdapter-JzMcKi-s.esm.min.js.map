{"version":3,"file":"openPbrMaterialLoadingAdapter-JzMcKi-s.esm.min.js","sources":["../../../../../dev/loaders/dist/glTF/2.0/openPbrMaterialLoadingAdapter.js"],"sourcesContent":["/**\n * Material Loading Adapter for OpenPBR materials that provides a unified OpenPBR-like interface.\n */\nexport class OpenPBRMaterialLoadingAdapter {\n    /**\n     * Creates a new instance of the OpenPBRMaterialLoadingAdapter.\n     * @param material - The OpenPBR material to adapt.\n     */\n    constructor(material) {\n        this._material = material;\n    }\n    /**\n     * Gets the underlying material\n     */\n    get material() {\n        return this._material;\n    }\n    /**\n     * Whether the material should be treated as unlit\n     */\n    get isUnlit() {\n        return this._material.unlit;\n    }\n    /**\n     * Sets whether the material should be treated as unlit\n     */\n    set isUnlit(value) {\n        this._material.unlit = value;\n    }\n    // ========================================\n    // CULLING PROPERTIES\n    // ========================================\n    /**\n     * Sets whether back face culling is enabled.\n     * @param value True to enable back face culling\n     */\n    set backFaceCulling(value) {\n        this._material.backFaceCulling = value;\n    }\n    /**\n     * Gets whether back face culling is enabled.\n     * @returns True if back face culling is enabled\n     */\n    get backFaceCulling() {\n        return this._material.backFaceCulling;\n    }\n    /**\n     * Sets whether two-sided lighting is enabled.\n     * @param value True to enable two-sided lighting\n     */\n    set twoSidedLighting(value) {\n        this._material.twoSidedLighting = value;\n    }\n    /**\n     * Gets whether two-sided lighting is enabled.\n     * @returns True if two-sided lighting is enabled\n     */\n    get twoSidedLighting() {\n        return this._material.twoSidedLighting;\n    }\n    // ========================================\n    // ALPHA PROPERTIES\n    // ========================================\n    /**\n     * Sets the alpha cutoff value for alpha testing.\n     * Note: OpenPBR doesn't have a direct equivalent, so this is a no-op.\n     * @param value The alpha cutoff threshold (ignored for OpenPBR)\n     */\n    set alphaCutOff(value) {\n        // OpenPBR doesn't have a direct equivalent, but could be implemented if needed\n    }\n    /**\n     * Gets the alpha cutoff value.\n     * @returns Default value of 0.5 (OpenPBR doesn't support this directly)\n     */\n    get alphaCutOff() {\n        return 0.5; // Default value\n    }\n    /**\n     * Sets whether to use alpha from the base color texture.\n     * Note: OpenPBR handles this differently through the baseColorTexture alpha channel.\n     * @param value True to use alpha from base color texture (handled automatically in OpenPBR)\n     */\n    set useAlphaFromBaseColorTexture(value) {\n        this._material._useAlphaFromBaseColorTexture = value;\n    }\n    /**\n     * Gets whether alpha is used from the base color texture.\n     * @returns Always false for OpenPBR as it's handled automatically\n     */\n    get useAlphaFromBaseColorTexture() {\n        return false;\n    }\n    /**\n     * Gets whether the transparency is treated as alpha coverage.\n     */\n    get transparencyAsAlphaCoverage() {\n        // OpenPBR doesn't support treating transparency as alpha coverage.\n        return false;\n    }\n    /**\n     * Sets/Gets whether the transparency is treated as alpha coverage\n     */\n    set transparencyAsAlphaCoverage(value) {\n        // OpenPBR doesn't support treating transparency as alpha coverage.\n    }\n    // ========================================\n    // BASE PARAMETERS\n    // ========================================\n    /**\n     * Sets the base color of the OpenPBR material.\n     * @param value The base color as a Color3\n     */\n    set baseColor(value) {\n        this._material.baseColor = value;\n    }\n    /**\n     * Gets the base color of the OpenPBR material.\n     * @returns The base color as a Color3\n     */\n    get baseColor() {\n        return this._material.baseColor;\n    }\n    /**\n     * Sets the base color texture of the OpenPBR material.\n     * @param value The base color texture or null\n     */\n    set baseColorTexture(value) {\n        this._material.baseColorTexture = value;\n    }\n    /**\n     * Gets the base color texture of the OpenPBR material.\n     * @returns The base color texture or null\n     */\n    get baseColorTexture() {\n        return this._material.baseColorTexture;\n    }\n    /**\n     * Sets the base diffuse roughness of the OpenPBR material.\n     * @param value The diffuse roughness value (0-1)\n     */\n    set baseDiffuseRoughness(value) {\n        this._material.baseDiffuseRoughness = value;\n    }\n    /**\n     * Gets the base diffuse roughness of the OpenPBR material.\n     * @returns The diffuse roughness value (0-1)\n     */\n    get baseDiffuseRoughness() {\n        return this._material.baseDiffuseRoughness;\n    }\n    /**\n     * Sets the base diffuse roughness texture of the OpenPBR material.\n     * @param value The diffuse roughness texture or null\n     */\n    set baseDiffuseRoughnessTexture(value) {\n        this._material.baseDiffuseRoughnessTexture = value;\n    }\n    /**\n     * Gets the base diffuse roughness texture of the OpenPBR material.\n     * @returns The diffuse roughness texture or null\n     */\n    get baseDiffuseRoughnessTexture() {\n        return this._material.baseDiffuseRoughnessTexture;\n    }\n    /**\n     * Sets the base metalness value of the OpenPBR material.\n     * @param value The metalness value (0-1)\n     */\n    set baseMetalness(value) {\n        this._material.baseMetalness = value;\n    }\n    /**\n     * Gets the base metalness value of the OpenPBR material.\n     * @returns The metalness value (0-1)\n     */\n    get baseMetalness() {\n        return this._material.baseMetalness;\n    }\n    /**\n     * Sets the base metalness texture of the OpenPBR material.\n     * @param value The metalness texture or null\n     */\n    set baseMetalnessTexture(value) {\n        this._material.baseMetalnessTexture = value;\n    }\n    /**\n     * Gets the base metalness texture of the OpenPBR material.\n     * @returns The metalness texture or null\n     */\n    get baseMetalnessTexture() {\n        return this._material.baseMetalnessTexture;\n    }\n    /**\n     * Sets whether to use roughness from the metallic texture's green channel.\n     * @param value True to use green channel for roughness\n     */\n    set useRoughnessFromMetallicTextureGreen(value) {\n        this._material._useRoughnessFromMetallicTextureGreen = value;\n    }\n    /**\n     * Sets whether to use metalness from the metallic texture's blue channel.\n     * @param value True to use blue channel for metalness\n     */\n    set useMetallicFromMetallicTextureBlue(value) {\n        this._material._useMetallicFromMetallicTextureBlue = value;\n    }\n    // ========================================\n    // SPECULAR PARAMETERS\n    // ========================================\n    /**\n     * Configures specular properties for OpenPBR material.\n     * @param _enableEdgeColor Whether to enable edge color support (ignored for OpenPBR)\n     */\n    enableSpecularEdgeColor(_enableEdgeColor = false) {\n        // OpenPBR already supports edge color natively, no configuration needed\n    }\n    /**\n     * Sets the specular weight of the OpenPBR material.\n     * @param value The specular weight value (0-1)\n     */\n    set specularWeight(value) {\n        this._material.specularWeight = value;\n    }\n    /**\n     * Gets the specular weight of the OpenPBR material.\n     * @returns The specular weight value (0-1)\n     */\n    get specularWeight() {\n        return this._material.specularWeight;\n    }\n    /**\n     * Sets the specular weight texture of the OpenPBR material.\n     * If the same texture is used for specular color, optimizes by using alpha channel for weight.\n     * @param value The specular weight texture or null\n     */\n    set specularWeightTexture(value) {\n        if (this._material.specularColorTexture === value) {\n            this._material.specularWeightTexture = null;\n            this._material._useSpecularWeightFromSpecularColorTexture = true;\n            this._material._useSpecularWeightFromAlpha = true;\n        }\n        else {\n            this._material.specularWeightTexture = value;\n        }\n    }\n    /**\n     * Gets the specular weight texture of the OpenPBR material.\n     * @returns The specular weight texture or null\n     */\n    get specularWeightTexture() {\n        return this._material.specularWeightTexture;\n    }\n    /**\n     * Sets the specular color of the OpenPBR material.\n     * @param value The specular color as a Color3\n     */\n    set specularColor(value) {\n        this._material.specularColor = value;\n    }\n    /**\n     * Gets the specular color of the OpenPBR material.\n     * @returns The specular color as a Color3\n     */\n    get specularColor() {\n        return this._material.specularColor;\n    }\n    /**\n     * Sets the specular color texture of the OpenPBR material.\n     * If the same texture is used for specular weight, optimizes by using alpha channel for weight.\n     * @param value The specular color texture or null\n     */\n    set specularColorTexture(value) {\n        this._material.specularColorTexture = value;\n        if (this._material.specularWeightTexture === this._material.specularColorTexture) {\n            this._material.specularWeightTexture = null;\n            this._material._useSpecularWeightFromSpecularColorTexture = true;\n            this._material._useSpecularWeightFromAlpha = true;\n        }\n    }\n    /**\n     * Gets the specular color texture of the OpenPBR material.\n     * @returns The specular color texture or null\n     */\n    get specularColorTexture() {\n        return this._material.specularColorTexture;\n    }\n    /**\n     * Sets the specular roughness of the OpenPBR material.\n     * @param value The roughness value (0-1)\n     */\n    set specularRoughness(value) {\n        this._material.specularRoughness = value;\n    }\n    /**\n     * Gets the specular roughness of the OpenPBR material.\n     * @returns The roughness value (0-1)\n     */\n    get specularRoughness() {\n        return this._material.specularRoughness;\n    }\n    /**\n     * Sets the specular roughness texture of the OpenPBR material.\n     * @param value The roughness texture or null\n     */\n    set specularRoughnessTexture(value) {\n        this._material.specularRoughnessTexture = value;\n    }\n    /**\n     * Gets the specular roughness texture of the OpenPBR material.\n     * @returns The roughness texture or null\n     */\n    get specularRoughnessTexture() {\n        return this._material.specularRoughnessTexture;\n    }\n    /**\n     * Sets the specular index of refraction (IOR) of the OpenPBR material.\n     * @param value The IOR value\n     */\n    set specularIor(value) {\n        this._material.specularIor = value;\n    }\n    /**\n     * Gets the specular index of refraction (IOR) of the OpenPBR material.\n     * @returns The IOR value\n     */\n    get specularIor() {\n        return this._material.specularIor;\n    }\n    // ========================================\n    // EMISSION PARAMETERS\n    // ========================================\n    /**\n     * Sets the emission color of the OpenPBR material.\n     * @param value The emission color as a Color3\n     */\n    set emissionColor(value) {\n        this._material.emissionColor = value;\n    }\n    /**\n     * Gets the emission color of the OpenPBR material.\n     * @returns The emission color as a Color3\n     */\n    get emissionColor() {\n        return this._material.emissionColor;\n    }\n    /**\n     * Sets the emission luminance of the OpenPBR material.\n     * @param value The emission luminance value\n     */\n    set emissionLuminance(value) {\n        this._material.emissionLuminance = value;\n    }\n    /**\n     * Gets the emission luminance of the OpenPBR material.\n     * @returns The emission luminance value\n     */\n    get emissionLuminance() {\n        return this._material.emissionLuminance;\n    }\n    /**\n     * Sets the emission color texture of the OpenPBR material.\n     * @param value The emission texture or null\n     */\n    set emissionColorTexture(value) {\n        this._material.emissionColorTexture = value;\n    }\n    /**\n     * Gets the emission color texture of the OpenPBR material.\n     * @returns The emission texture or null\n     */\n    get emissionColorTexture() {\n        return this._material.emissionColorTexture;\n    }\n    // ========================================\n    // AMBIENT OCCLUSION\n    // ========================================\n    /**\n     * Sets the ambient occlusion texture of the OpenPBR material.\n     * @param value The ambient occlusion texture or null\n     */\n    set ambientOcclusionTexture(value) {\n        this._material.ambientOcclusionTexture = value;\n    }\n    /**\n     * Gets the ambient occlusion texture of the OpenPBR material.\n     * @returns The ambient occlusion texture or null\n     */\n    get ambientOcclusionTexture() {\n        return this._material.ambientOcclusionTexture;\n    }\n    /**\n     * Sets the ambient occlusion texture strength by modifying the texture's level.\n     * @param value The strength value (typically 0-1)\n     */\n    set ambientOcclusionTextureStrength(value) {\n        const texture = this._material.ambientOcclusionTexture;\n        if (texture) {\n            texture.level = value;\n        }\n    }\n    /**\n     * Gets the ambient occlusion texture strength from the texture's level property.\n     * @returns The strength value, defaults to 1.0 if no texture or level is set\n     */\n    get ambientOcclusionTextureStrength() {\n        const texture = this._material.ambientOcclusionTexture;\n        return texture?.level ?? 1.0;\n    }\n    // ========================================\n    // COAT PARAMETERS\n    // ========================================\n    /**\n     * Configures coat parameters for OpenPBR material.\n     * OpenPBR coat is already built-in, so no configuration is needed.\n     */\n    configureCoat() {\n        // OpenPBR coat is already built-in, no configuration needed\n    }\n    /**\n     * Sets the coat weight of the OpenPBR material.\n     * @param value The coat weight value (0-1)\n     */\n    set coatWeight(value) {\n        this._material.coatWeight = value;\n    }\n    /**\n     * Gets the coat weight of the OpenPBR material.\n     * @returns The coat weight value (0-1)\n     */\n    get coatWeight() {\n        return this._material.coatWeight;\n    }\n    /**\n     * Sets the coat weight texture of the OpenPBR material.\n     * @param value The coat weight texture or null\n     */\n    set coatWeightTexture(value) {\n        this._material.coatWeightTexture = value;\n    }\n    /**\n     * Gets the coat weight texture of the OpenPBR material.\n     * @returns The coat weight texture or null\n     */\n    get coatWeightTexture() {\n        return this._material.coatWeightTexture;\n    }\n    /**\n     * Sets the coat color of the OpenPBR material.\n     * @param value The coat color as a Color3\n     */\n    set coatColor(value) {\n        this._material.coatColor = value;\n    }\n    /**\n     * Sets the coat color texture of the OpenPBR material.\n     * @param value The coat color texture or null\n     */\n    set coatColorTexture(value) {\n        this._material.coatColorTexture = value;\n    }\n    /**\n     * Sets the coat roughness of the OpenPBR material.\n     * @param value The coat roughness value (0-1)\n     */\n    set coatRoughness(value) {\n        this._material.coatRoughness = value;\n    }\n    /**\n     * Gets the coat roughness of the OpenPBR material.\n     * @returns The coat roughness value (0-1)\n     */\n    get coatRoughness() {\n        return this._material.coatRoughness;\n    }\n    /**\n     * Sets the coat roughness texture of the OpenPBR material.\n     * @param value The coat roughness texture or null\n     */\n    set coatRoughnessTexture(value) {\n        this._material.coatRoughnessTexture = value;\n    }\n    /**\n     * Gets the coat roughness texture of the OpenPBR material.\n     * @returns The coat roughness texture or null\n     */\n    get coatRoughnessTexture() {\n        return this._material.coatRoughnessTexture;\n    }\n    /**\n     * Sets the coat index of refraction (IOR) of the OpenPBR material.\n     */\n    set coatIor(value) {\n        this._material.coatIor = value;\n    }\n    /**\n     * Sets the coat darkening value of the OpenPBR material.\n     * @param value The coat darkening value\n     */\n    set coatDarkening(value) {\n        this._material.coatDarkening = value;\n    }\n    /**\n     * Sets the coat darkening texture (OpenPBR: coatDarkeningTexture, no PBR equivalent)\n     */\n    set coatDarkeningTexture(value) {\n        this._material.coatDarkeningTexture = value;\n    }\n    /**\n     * Sets the coat roughness anisotropy.\n     * TODO: Implementation pending OpenPBR coat anisotropy feature availability.\n     * @param value The coat anisotropy intensity value\n     */\n    set coatRoughnessAnisotropy(value) {\n        this._material.coatRoughnessAnisotropy = value;\n    }\n    /**\n     * Gets the coat roughness anisotropy.\n     * TODO: Implementation pending OpenPBR coat anisotropy feature availability.\n     * @returns Currently returns 0 as coat anisotropy is not yet available\n     */\n    get coatRoughnessAnisotropy() {\n        return this._material.coatRoughnessAnisotropy;\n    }\n    /**\n     * Sets the coat tangent angle for anisotropy.\n     * TODO: Implementation pending OpenPBR coat anisotropy feature availability.\n     * @param value The coat anisotropy rotation angle in radians\n     */\n    set geometryCoatTangentAngle(value) {\n        this._material.geometryCoatTangentAngle = value;\n    }\n    /**\n     * Sets the coat tangent texture for anisotropy.\n     * TODO: Implementation pending OpenPBR coat anisotropy feature availability.\n     * @param value The coat anisotropy texture or null\n     */\n    set geometryCoatTangentTexture(value) {\n        this._material.geometryCoatTangentTexture = value;\n        if (value) {\n            this._material._useCoatRoughnessAnisotropyFromTangentTexture = true;\n        }\n    }\n    /**\n     * Gets the coat tangent texture for anisotropy.\n     * TODO: Implementation pending OpenPBR coat anisotropy feature availability.\n     * @returns Currently returns null as coat anisotropy is not yet available\n     */\n    get geometryCoatTangentTexture() {\n        return this._material.geometryCoatTangentTexture;\n    }\n    // ========================================\n    // TRANSMISSION LAYER\n    // ========================================\n    /**\n     * Sets the transmission weight.\n     * TODO: Implementation pending OpenPBR transmission feature availability.\n     * @param value The transmission weight value (0-1)\n     */\n    set transmissionWeight(value) {\n        // TODO: Implement when OpenPBR transmission is available\n        // this._material.transmissionWeight = value;\n    }\n    /**\n     * Sets the transmission weight texture.\n     * TODO: Implementation pending OpenPBR transmission feature availability.\n     * @param value The transmission weight texture or null\n     */\n    set transmissionWeightTexture(value) {\n        // TODO: Implement when OpenPBR transmission is available\n        // this._material.transmissionWeightTexture = value;\n    }\n    /**\n     * Gets the transmission weight.\n     * TODO: Implementation pending OpenPBR transmission feature availability.\n     * @returns Currently returns 0 as transmission is not yet available\n     */\n    get transmissionWeight() {\n        // TODO: Implement when OpenPBR transmission is available\n        // return this._material.transmissionWeight;\n        return 0;\n    }\n    /**\n     * Gets the transmission dispersion Abbe number.\n     * @param value The Abbe number value\n     */\n    set transmissionDispersionAbbeNumber(value) {\n        // TODO: Implement when OpenPBR transmission dispersion is available\n    }\n    /**\n     * Configures transmission for OpenPBR material.\n     * TODO: Implementation pending OpenPBR transmission feature availability.\n     */\n    configureTransmission() {\n        // OpenPBR transmission will be configured differently when available\n    }\n    // ========================================\n    // VOLUME PROPERTIES (Subsurface Scattering)\n    // ========================================\n    /**\n     * Sets the attenuation distance for volume scattering.\n     * TODO: Implementation pending OpenPBR volume feature availability.\n     * @param value The attenuation distance value\n     */\n    set transmissionDepth(value) {\n        // TODO: Implement when OpenPBR volume properties are available\n        // this._material.attenuationDistance = value;\n    }\n    /**\n     * Sets the attenuation color for volume scattering.\n     * TODO: Implementation pending OpenPBR volume feature availability.\n     * @param value The attenuation color as a Color3\n     */\n    set transmissionColor(value) {\n        // TODO: Implement when OpenPBR volume properties are available\n        // this._material.attenuationColor = value;\n    }\n    /**\n     * Sets the thickness texture for volume scattering.\n     * TODO: Implementation pending OpenPBR volume feature availability.\n     * @param value The thickness texture or null\n     */\n    set volumeThicknessTexture(value) {\n        // TODO: Implement when OpenPBR volume properties are available\n        // this._material.thicknessTexture = value;\n    }\n    /**\n     * Sets the thickness factor for volume scattering.\n     * TODO: Implementation pending OpenPBR volume feature availability.\n     * @param value The thickness value\n     */\n    set volumeThickness(value) {\n        // TODO: Implement when OpenPBR volume properties are available\n        // this._material.thickness = value;\n    }\n    // ========================================\n    // SUBSURFACE PROPERTIES (Subsurface Scattering)\n    // ========================================\n    /**\n     * Configures subsurface properties for PBR material\n     */\n    configureSubsurface() {\n        // TODO\n    }\n    /**\n     * Sets the subsurface weight\n     */\n    set subsurfaceWeight(value) {\n        // TODO\n    }\n    get subsurfaceWeight() {\n        // TODO\n        return 0;\n    }\n    /**\n     * Sets the subsurface weight texture\n     */\n    set subsurfaceWeightTexture(value) {\n        // TODO\n    }\n    /**\n     * Sets the subsurface color.\n     * @param value The subsurface tint color as a Color3\n     */\n    set subsurfaceColor(value) {\n        // TODO\n    }\n    /**\n     * Sets the subsurface color texture.\n     * @param value The subsurface tint texture or null\n     */\n    set subsurfaceColorTexture(value) {\n        // TODO\n    }\n    // ========================================\n    // FUZZ LAYER (Sheen)\n    // ========================================\n    /**\n     * Configures fuzz for OpenPBR.\n     * Enables fuzz and sets up proper configuration.\n     */\n    configureFuzz() {\n        // Currently no setup to do for OpenPBR\n    }\n    /**\n     * Sets the fuzz weight.\n     * TODO: Implementation pending OpenPBR fuzz feature availability.\n     * @param value The fuzz weight value\n     */\n    set fuzzWeight(value) {\n        // TODO: Implement when OpenPBR fuzz is available\n        // this._material.fuzzWeight = value;\n    }\n    /**\n     * Sets the fuzz color.\n     * TODO: Implementation pending OpenPBR fuzz feature availability.\n     * @param value The fuzz color as a Color3\n     */\n    set fuzzColor(value) {\n        // TODO: Implement when OpenPBR fuzz is available\n        // this._material.fuzzColor = value;\n    }\n    /**\n     * Sets the fuzz color texture.\n     * TODO: Implementation pending OpenPBR fuzz feature availability.\n     * @param value The fuzz color texture or null\n     */\n    set fuzzColorTexture(value) {\n        // TODO: Implement when OpenPBR fuzz is available\n        // this._material.fuzzColorTexture = value;\n    }\n    /**\n     * Sets the fuzz roughness.\n     * TODO: Implementation pending OpenPBR fuzz feature availability.\n     * @param value The fuzz roughness value (0-1)\n     */\n    set fuzzRoughness(value) {\n        // TODO: Implement when OpenPBR fuzz is available\n        // this._material.fuzzRoughness = value;\n    }\n    /**\n     * Sets the fuzz roughness texture.\n     * TODO: Implementation pending OpenPBR fuzz feature availability.\n     * @param value The fuzz roughness texture or null\n     */\n    set fuzzRoughnessTexture(value) {\n        // TODO: Implement when OpenPBR fuzz is available\n        // this._material.fuzzRoughnessTexture = value;\n    }\n    // ========================================\n    // ANISOTROPY\n    // ========================================\n    /**\n     * Sets the specular roughness anisotropy of the OpenPBR material.\n     * @param value The anisotropy intensity value\n     */\n    set specularRoughnessAnisotropy(value) {\n        this._material.specularRoughnessAnisotropy = value;\n    }\n    /**\n     * Gets the specular roughness anisotropy of the OpenPBR material.\n     * @returns The anisotropy intensity value\n     */\n    get specularRoughnessAnisotropy() {\n        return this._material.specularRoughnessAnisotropy;\n    }\n    /**\n     * Sets the anisotropy rotation angle.\n     * @param value The anisotropy rotation angle in radians\n     */\n    set geometryTangentAngle(value) {\n        this._material.geometryTangentAngle = value;\n    }\n    /**\n     * Sets the geometry tangent texture for anisotropy.\n     * Automatically enables using anisotropy from the tangent texture.\n     * @param value The anisotropy texture or null\n     */\n    set geometryTangentTexture(value) {\n        this._material.geometryTangentTexture = value;\n        this._material._useSpecularRoughnessAnisotropyFromTangentTexture = true;\n    }\n    /**\n     * Gets the geometry tangent texture for anisotropy.\n     * @returns The anisotropy texture or null\n     */\n    get geometryTangentTexture() {\n        return this._material.geometryTangentTexture;\n    }\n    /**\n     * Configures glTF-style anisotropy for the OpenPBR material.\n     * @param useGltfStyle Whether to use glTF-style anisotropy\n     */\n    configureGltfStyleAnisotropy(useGltfStyle = true) {\n        this._material._useGltfStyleAnisotropy = useGltfStyle;\n    }\n    // ========================================\n    // THIN FILM IRIDESCENCE\n    // ========================================\n    /**\n     * Sets the thin film weight.\n     * @param value The thin film weight value\n     */\n    set thinFilmWeight(value) {\n        this._material.thinFilmWeight = value;\n    }\n    /**\n     * Sets the thin film IOR.\n     * @param value The thin film IOR value\n     */\n    set thinFilmIor(value) {\n        this._material.thinFilmIor = value;\n    }\n    /**\n     * Sets the thin film thickness minimum.\n     * @param value The minimum thickness value in nanometers\n     */\n    set thinFilmThicknessMinimum(value) {\n        this._material.thinFilmThicknessMin = value / 1000.0; // Convert to micrometers for OpenPBR\n    }\n    /**\n     * Sets the thin film thickness maximum.\n     * @param value The maximum thickness value in nanometers\n     */\n    set thinFilmThicknessMaximum(value) {\n        this._material.thinFilmThickness = value / 1000.0; // Convert to micrometers for OpenPBR\n    }\n    /**\n     * Sets the thin film weight texture.\n     * @param value The thin film weight texture or null\n     */\n    set thinFilmWeightTexture(value) {\n        this._material.thinFilmWeightTexture = value;\n    }\n    /**\n     * Sets the thin film thickness texture.\n     * @param value The thin film thickness texture or null\n     */\n    set thinFilmThicknessTexture(value) {\n        this._material.thinFilmThicknessTexture = value;\n        this._material._useThinFilmThicknessFromTextureGreen = true;\n    }\n    // ========================================\n    // UNLIT MATERIALS\n    // ========================================\n    /**\n     * Sets whether the OpenPBR material is unlit.\n     * @param value True to make the material unlit\n     */\n    set unlit(value) {\n        this._material.unlit = value;\n    }\n    // ========================================\n    // GEOMETRY PARAMETERS\n    // ========================================\n    /**\n     * Sets the geometry opacity of the OpenPBR material.\n     * @param value The opacity value (0-1)\n     */\n    set geometryOpacity(value) {\n        this._material.geometryOpacity = value;\n    }\n    /**\n     * Gets the geometry opacity of the OpenPBR material.\n     * @returns The opacity value (0-1)\n     */\n    get geometryOpacity() {\n        return this._material.geometryOpacity;\n    }\n    /**\n     * Sets the geometry normal texture of the OpenPBR material.\n     * @param value The normal texture or null\n     */\n    set geometryNormalTexture(value) {\n        this._material.geometryNormalTexture = value;\n    }\n    /**\n     * Gets the geometry normal texture of the OpenPBR material.\n     * @returns The normal texture or null\n     */\n    get geometryNormalTexture() {\n        return this._material.geometryNormalTexture;\n    }\n    /**\n     * Sets the normal map inversions for the OpenPBR material.\n     * Note: OpenPBR may handle normal map inversions differently or may not need them.\n     * @param invertX Whether to invert the normal map on the X axis (may be ignored)\n     * @param invertY Whether to invert the normal map on the Y axis (may be ignored)\n     */\n    setNormalMapInversions(invertX, invertY) {\n        // OpenPBR handles normal map inversions differently or may not need them\n    }\n    /**\n     * Sets the geometry coat normal texture of the OpenPBR material.\n     * @param value The coat normal texture or null\n     */\n    set geometryCoatNormalTexture(value) {\n        this._material.geometryCoatNormalTexture = value;\n    }\n    /**\n     * Gets the geometry coat normal texture of the OpenPBR material.\n     * @returns The coat normal texture or null\n     */\n    get geometryCoatNormalTexture() {\n        return this._material.geometryCoatNormalTexture;\n    }\n    /**\n     * Sets the geometry coat normal texture scale.\n     * @param value The scale value for the coat normal texture\n     */\n    set geometryCoatNormalTextureScale(value) {\n        if (this._material.geometryCoatNormalTexture) {\n            this._material.geometryCoatNormalTexture.level = value;\n        }\n    }\n}\n//# sourceMappingURL=openPbrMaterialLoadingAdapter.js.map"],"names":["OpenPBRMaterialLoadingAdapter","constructor","material","this","_material","isUnlit","unlit","value","backFaceCulling","twoSidedLighting","alphaCutOff","useAlphaFromBaseColorTexture","_useAlphaFromBaseColorTexture","transparencyAsAlphaCoverage","baseColor","baseColorTexture","baseDiffuseRoughness","baseDiffuseRoughnessTexture","baseMetalness","baseMetalnessTexture","useRoughnessFromMetallicTextureGreen","_useRoughnessFromMetallicTextureGreen","useMetallicFromMetallicTextureBlue","_useMetallicFromMetallicTextureBlue","enableSpecularEdgeColor","_enableEdgeColor","specularWeight","specularWeightTexture","specularColorTexture","_useSpecularWeightFromSpecularColorTexture","_useSpecularWeightFromAlpha","specularColor","specularRoughness","specularRoughnessTexture","specularIor","emissionColor","emissionLuminance","emissionColorTexture","ambientOcclusionTexture","ambientOcclusionTextureStrength","texture","level","configureCoat","coatWeight","coatWeightTexture","coatColor","coatColorTexture","coatRoughness","coatRoughnessTexture","coatIor","coatDarkening","coatDarkeningTexture","coatRoughnessAnisotropy","geometryCoatTangentAngle","geometryCoatTangentTexture","_useCoatRoughnessAnisotropyFromTangentTexture","transmissionWeight","transmissionWeightTexture","transmissionDispersionAbbeNumber","configureTransmission","transmissionDepth","transmissionColor","volumeThicknessTexture","volumeThickness","configureSubsurface","subsurfaceWeight","subsurfaceWeightTexture","subsurfaceColor","subsurfaceColorTexture","configureFuzz","fuzzWeight","fuzzColor","fuzzColorTexture","fuzzRoughness","fuzzRoughnessTexture","specularRoughnessAnisotropy","geometryTangentAngle","geometryTangentTexture","_useSpecularRoughnessAnisotropyFromTangentTexture","configureGltfStyleAnisotropy","useGltfStyle","_useGltfStyleAnisotropy","thinFilmWeight","thinFilmIor","thinFilmThicknessMinimum","thinFilmThicknessMin","thinFilmThicknessMaximum","thinFilmThickness","thinFilmWeightTexture","thinFilmThicknessTexture","_useThinFilmThicknessFromTextureGreen","geometryOpacity","geometryNormalTexture","setNormalMapInversions","invertX","invertY","geometryCoatNormalTexture","geometryCoatNormalTextureScale"],"mappings":"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"}