import{F as n}from"./index-BeBPThKX.esm.min.js";import"./helperFunctions-Dzpt41T7.esm.min.js";import"./hdrFilteringFunctions-Cy8n7Cx1.esm.min.js";import"./pbrBRDFFunctions-ffOW2qvY.esm.min.js";const e="hdrFilteringPixelShader",r="#include<helperFunctions>\n#include<importanceSampling>\n#include<pbrBRDFFunctions>\n#include<hdrFilteringFunctions>\nuniform alphaG: f32;var inputTextureSampler: sampler;var inputTexture: texture_cube<f32>;uniform vFilteringInfo: vec2f;uniform hdrScale: f32;varying direction: vec3f;@fragment\nfn main(input: FragmentInputs)->FragmentOutputs {var color: vec3f=radiance(uniforms.alphaG,inputTexture,inputTextureSampler,input.direction,uniforms.vFilteringInfo);fragmentOutputs.color= vec4f(color*uniforms.hdrScale,1.0);}";n.ShadersStoreWGSL[e]||(n.ShadersStoreWGSL[e]=r);const i={name:e,shader:r};export{i as hdrFilteringPixelShaderWGSL};
//# sourceMappingURL=hdrFiltering.fragment-46hB5TDV.esm.min.js.map
