{"version":3,"file":"KHR_materials_sheen-DJYo9L7J.esm.min.js","sources":["../../../../../dev/loaders/dist/glTF/2.0/Extensions/KHR_materials_sheen.js"],"sourcesContent":["import { GLTFLoader } from \"../glTFLoader\";\nimport { Color3 } from \"core/Maths/math.color\";\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\nconst NAME = \"KHR_materials_sheen\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_sheen/README.md)\n * [Playground Sample](https://www.babylonjs-playground.com/frame.html#BNIZX6#4)\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_materials_sheen {\n    /**\n     * @internal\n     */\n    constructor(loader) {\n        /**\n         * The name of this extension.\n         */\n        this.name = NAME;\n        /**\n         * Defines a number that determines the order the extensions are applied.\n         */\n        this.order = 190;\n        this._loader = loader;\n        this.enabled = this._loader.isExtensionUsed(NAME);\n    }\n    /** @internal */\n    dispose() {\n        this._loader = null;\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line no-restricted-syntax\n    loadMaterialPropertiesAsync(context, material, babylonMaterial) {\n        return GLTFLoader.LoadExtensionAsync(context, material, this.name, async (extensionContext, extension) => {\n            const promises = new Array();\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n            promises.push(this._loadSheenPropertiesAsync(extensionContext, extension, babylonMaterial));\n            // eslint-disable-next-line github/no-then\n            return await Promise.all(promises).then(() => { });\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\n    _loadSheenPropertiesAsync(context, properties, babylonMaterial) {\n        const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\n        const promises = new Array();\n        adapter.configureFuzz();\n        // Set non-texture properties immediately\n        const sheenColor = properties.sheenColorFactor !== undefined ? Color3.FromArray(properties.sheenColorFactor) : Color3.Black();\n        const sheenRoughness = properties.sheenRoughnessFactor !== undefined ? properties.sheenRoughnessFactor : 0.0;\n        adapter.fuzzWeight = 1; // KHR_materials_sheen assumes intensity of 1\n        adapter.fuzzColor = sheenColor;\n        adapter.fuzzRoughness = sheenRoughness;\n        // Load textures\n        if (properties.sheenColorTexture) {\n            promises.push(this._loader.loadTextureInfoAsync(`${context}/sheenColorTexture`, properties.sheenColorTexture, (texture) => {\n                texture.name = `${babylonMaterial.name} (Sheen Color)`;\n                adapter.fuzzColorTexture = texture;\n            }));\n        }\n        if (properties.sheenRoughnessTexture) {\n            properties.sheenRoughnessTexture.nonColorData = true;\n            promises.push(this._loader.loadTextureInfoAsync(`${context}/sheenRoughnessTexture`, properties.sheenRoughnessTexture, (texture) => {\n                texture.name = `${babylonMaterial.name} (Sheen Roughness)`;\n                adapter.fuzzRoughnessTexture = texture;\n            }));\n        }\n        // eslint-disable-next-line github/no-then\n        return Promise.all(promises).then(() => { });\n    }\n}\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_sheen(loader));\n//# sourceMappingURL=KHR_materials_sheen.js.map"],"names":["NAME","KHR_materials_sheen","constructor","loader","this","name","order","_loader","enabled","isExtensionUsed","dispose","loadMaterialPropertiesAsync","context","material","babylonMaterial","GLTFLoader","LoadExtensionAsync","async","extensionContext","extension","promises","Array","push","_loadSheenPropertiesAsync","Promise","all","then","properties","adapter","_getOrCreateMaterialAdapter","configureFuzz","sheenColor","undefined","sheenColorFactor","Color3","FromArray","Black","sheenRoughness","sheenRoughnessFactor","fuzzWeight","fuzzColor","fuzzRoughness","sheenColorTexture","loadTextureInfoAsync","texture","fuzzColorTexture","sheenRoughnessTexture","nonColorData","fuzzRoughnessTexture","unregisterGLTFExtension","registerGLTFExtension"],"mappings":"gVAGA,MAAMA,EAAO,sBAMN,MAAMC,EAIT,WAAAC,CAAYC,GAIRC,KAAKC,KAAOL,EAIZI,KAAKE,MAAQ,IACbF,KAAKG,QAAUJ,EACfC,KAAKI,QAAUJ,KAAKG,QAAQE,gBAAgBT,EACpD,CAEI,OAAAU,GACIN,KAAKG,QAAU,IACvB,CAKI,2BAAAI,CAA4BC,EAASC,EAAUC,GAC3C,OAAOC,EAAWC,mBAAmBJ,EAASC,EAAUT,KAAKC,MAAMY,MAAOC,EAAkBC,KACxF,MAAMC,EAAW,IAAIC,MAIrB,OAHAD,EAASE,KAAKlB,KAAKG,QAAQI,4BAA4BC,EAASC,EAAUC,IAC1EM,EAASE,KAAKlB,KAAKmB,0BAA0BL,EAAkBC,EAAWL,UAE7DU,QAAQC,IAAIL,GAAUM,MAAK,WAEpD,CAEI,yBAAAH,CAA0BX,EAASe,EAAYb,GAC3C,MAAMc,EAAUxB,KAAKG,QAAQsB,4BAA4Bf,GACnDM,EAAW,IAAIC,MACrBO,EAAQE,gBAER,MAAMC,OAA6CC,IAAhCL,EAAWM,iBAAiCC,EAAOC,UAAUR,EAAWM,kBAAoBC,EAAOE,QAChHC,OAAqDL,IAApCL,EAAWW,qBAAqCX,EAAWW,qBAAuB,EAmBzG,OAlBAV,EAAQW,WAAa,EACrBX,EAAQY,UAAYT,EACpBH,EAAQa,cAAgBJ,EAEpBV,EAAWe,mBACXtB,EAASE,KAAKlB,KAAKG,QAAQoC,qBAAqB,GAAG/B,sBAA6Be,EAAWe,mBAAoBE,IAC3GA,EAAQvC,KAAO,GAAGS,EAAgBT,qBAClCuB,EAAQiB,iBAAmBD,MAG/BjB,EAAWmB,wBACXnB,EAAWmB,sBAAsBC,cAAe,EAChD3B,EAASE,KAAKlB,KAAKG,QAAQoC,qBAAqB,GAAG/B,0BAAiCe,EAAWmB,uBAAwBF,IACnHA,EAAQvC,KAAO,GAAGS,EAAgBT,yBAClCuB,EAAQoB,qBAAuBJ,OAIhCpB,QAAQC,IAAIL,GAAUM,MAAK,QAC1C,EAEAuB,EAAwBjD,GACxBkD,EAAsBlD,GAAM,GAAOG,GAAW,IAAIF,EAAoBE"}