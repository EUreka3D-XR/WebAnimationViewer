{"version":3,"file":"webAudioBaseSubGraph-CGzVLJa3.esm.min.js","sources":["../../../../../dev/core/dist/AudioV2/abstractAudio/subNodes/abstractAudioSubNode.js","../../../../../dev/core/dist/AudioV2/abstractAudio/subNodes/volumeAudioSubNode.js","../../../../../dev/core/dist/AudioV2/abstractAudio/subProperties/abstractAudioAnalyzer.js","../../../../../dev/core/dist/AudioV2/abstractAudio/subNodes/audioAnalyzerSubNode.js","../../../../../dev/core/dist/AudioV2/abstractAudio/subProperties/audioAnalyzer.js","../../../../../dev/core/dist/AudioV2/abstractAudio/abstractAudioOutNode.js","../../../../../dev/core/dist/AudioV2/abstractAudio/subNodes/abstractAudioSubGraph.js","../../../../../dev/core/dist/AudioV2/webAudio/subNodes/volumeWebAudioSubNode.js","../../../../../dev/core/dist/AudioV2/webAudio/subNodes/webAudioAnalyzerSubNode.js","../../../../../dev/core/dist/AudioV2/webAudio/subNodes/webAudioBaseSubGraph.js"],"sourcesContent":["import { AbstractNamedAudioNode } from \"../abstractAudioNode\";\n/** @internal */\nexport class _AbstractAudioSubNode extends AbstractNamedAudioNode {\n    /** @internal */\n    constructor(name, engine) {\n        super(name, engine, 3 /* AudioNodeType.HAS_INPUTS_AND_OUTPUTS */);\n    }\n    /** @internal */\n    connect(node) {\n        if (!this._connect(node)) {\n            throw new Error(\"Connect failed\");\n        }\n    }\n    /** @internal */\n    disconnect(node) {\n        if (!this._disconnect(node)) {\n            throw new Error(\"Disconnect failed\");\n        }\n    }\n    /** @internal */\n    disconnectAll() {\n        if (!this._downstreamNodes) {\n            throw new Error(\"Disconnect failed\");\n        }\n        const it = this._downstreamNodes.values();\n        for (let next = it.next(); !next.done; next = it.next()) {\n            if (!this._disconnect(next.value)) {\n                throw new Error(\"Disconnect failed\");\n            }\n        }\n    }\n}\n//# sourceMappingURL=abstractAudioSubNode.js.map","import { _AbstractAudioSubNode } from \"../subNodes/abstractAudioSubNode\";\n/** @internal */\nexport const _VolumeAudioDefaults = {\n    volume: 1,\n};\n/** @internal */\nexport class _VolumeAudioSubNode extends _AbstractAudioSubNode {\n    constructor(engine) {\n        super(\"Volume\" /* AudioSubNode.VOLUME */, engine);\n    }\n    /** @internal */\n    setOptions(options) {\n        this.volume = options.volume ?? _VolumeAudioDefaults.volume;\n    }\n}\n/** @internal */\nexport function _GetVolumeAudioSubNode(subGraph) {\n    return subGraph.getSubNode(\"Volume\" /* AudioSubNode.VOLUME */);\n}\n/** @internal */\nexport function _GetVolumeAudioProperty(subGraph, property) {\n    return _GetVolumeAudioSubNode(subGraph)?.[property] ?? _VolumeAudioDefaults[property];\n}\n//# sourceMappingURL=volumeAudioSubNode.js.map","export const _AudioAnalyzerDefaults = {\n    fftSize: 2048,\n    minDecibels: -100,\n    maxDecibels: -30,\n    smoothing: 0.8,\n};\n/**\n * @param options The audio analyzer options to check.\n * @returns `true` if audio analyzer options are defined, otherwise `false`.\n */\nexport function _HasAudioAnalyzerOptions(options) {\n    return (options.analyzerEnabled ||\n        options.analyzerFFTSize !== undefined ||\n        options.analyzerMinDecibels !== undefined ||\n        options.analyzerMaxDecibels !== undefined ||\n        options.analyzerSmoothing !== undefined);\n}\n/**\n * An AudioAnalyzer converts time-domain audio data into the frequency-domain.\n */\nexport class AbstractAudioAnalyzer {\n    /**\n     * The number of data values that will be returned when calling getByteFrequencyData() or getFloatFrequencyData(). This is always half the `fftSize`.\n     */\n    get frequencyBinCount() {\n        return this.fftSize / 2;\n    }\n}\n//# sourceMappingURL=abstractAudioAnalyzer.js.map","import { _AudioAnalyzerDefaults } from \"../subProperties/abstractAudioAnalyzer\";\nimport { _AbstractAudioSubNode } from \"./abstractAudioSubNode\";\n/** @internal */\nexport class _AudioAnalyzerSubNode extends _AbstractAudioSubNode {\n    constructor(engine) {\n        super(\"Analyzer\" /* AudioSubNode.ANALYZER */, engine);\n    }\n    /** @internal */\n    setOptions(options) {\n        this.fftSize = options.analyzerFFTSize ?? _AudioAnalyzerDefaults.fftSize;\n        this.minDecibels = options.analyzerMinDecibels ?? _AudioAnalyzerDefaults.minDecibels;\n        this.maxDecibels = options.analyzerMaxDecibels ?? _AudioAnalyzerDefaults.maxDecibels;\n        this.smoothing = options.analyzerSmoothing ?? _AudioAnalyzerDefaults.smoothing;\n    }\n}\n/** @internal */\nexport function _GetAudioAnalyzerSubNode(subGraph) {\n    return subGraph.getSubNode(\"Analyzer\" /* AudioSubNode.ANALYZER */);\n}\n/** @internal */\nexport function _SetAudioAnalyzerProperty(subGraph, property, value) {\n    subGraph.callOnSubNode(\"Analyzer\" /* AudioSubNode.ANALYZER */, (node) => {\n        node[property] = value;\n    });\n}\n//# sourceMappingURL=audioAnalyzerSubNode.js.map","import { Logger } from \"../../../Misc/logger\";\nimport { _AudioAnalyzerDefaults, AbstractAudioAnalyzer } from \"../../abstractAudio/subProperties/abstractAudioAnalyzer\";\nimport { _GetAudioAnalyzerSubNode, _SetAudioAnalyzerProperty } from \"../subNodes/audioAnalyzerSubNode\";\nlet EmptyByteFrequencyData = null;\nlet EmptyFloatFrequencyData = null;\n/** @internal */\nexport function _GetEmptyByteFrequencyData() {\n    if (!EmptyByteFrequencyData) {\n        EmptyByteFrequencyData = new Uint8Array();\n    }\n    return EmptyByteFrequencyData;\n}\n/** @internal */\nexport function _GetEmptyFloatFrequencyData() {\n    if (!EmptyFloatFrequencyData) {\n        EmptyFloatFrequencyData = new Float32Array();\n    }\n    return EmptyFloatFrequencyData;\n}\n/** @internal */\nexport class _AudioAnalyzer extends AbstractAudioAnalyzer {\n    /** @internal */\n    constructor(subGraph) {\n        super();\n        this._fftSize = _AudioAnalyzerDefaults.fftSize;\n        this._maxDecibels = _AudioAnalyzerDefaults.maxDecibels;\n        this._minDecibels = _AudioAnalyzerDefaults.minDecibels;\n        this._smoothing = _AudioAnalyzerDefaults.smoothing;\n        this._subGraph = subGraph;\n    }\n    /** @internal */\n    get fftSize() {\n        return this._fftSize;\n    }\n    set fftSize(value) {\n        this._fftSize = value;\n        _SetAudioAnalyzerProperty(this._subGraph, \"fftSize\", value);\n    }\n    /** @internal */\n    get isEnabled() {\n        return _GetAudioAnalyzerSubNode(this._subGraph) !== null;\n    }\n    /** @internal */\n    get minDecibels() {\n        return this._minDecibels;\n    }\n    set minDecibels(value) {\n        this._minDecibels = value;\n        _SetAudioAnalyzerProperty(this._subGraph, \"minDecibels\", value);\n    }\n    /** @internal */\n    get maxDecibels() {\n        return this._maxDecibels;\n    }\n    set maxDecibels(value) {\n        this._maxDecibels = value;\n        _SetAudioAnalyzerProperty(this._subGraph, \"maxDecibels\", value);\n    }\n    /** @internal */\n    get smoothing() {\n        return this._smoothing;\n    }\n    set smoothing(value) {\n        this._smoothing = value;\n        _SetAudioAnalyzerProperty(this._subGraph, \"smoothing\", value);\n    }\n    /** @internal */\n    dispose() {\n        const subNode = _GetAudioAnalyzerSubNode(this._subGraph);\n        if (subNode) {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this._subGraph.removeSubNodeAsync(subNode);\n            subNode.dispose();\n        }\n    }\n    /** @internal */\n    async enableAsync() {\n        const subNode = _GetAudioAnalyzerSubNode(this._subGraph);\n        if (!subNode) {\n            await this._subGraph.createAndAddSubNodeAsync(\"Analyzer\" /* AudioSubNode.ANALYZER */);\n        }\n    }\n    /** @internal */\n    getByteFrequencyData() {\n        const subNode = _GetAudioAnalyzerSubNode(this._subGraph);\n        if (!subNode) {\n            Logger.Warn(\"AudioAnalyzer not enabled\");\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.enableAsync();\n            return _GetEmptyByteFrequencyData();\n        }\n        return subNode.getByteFrequencyData();\n    }\n    /** @internal */\n    getFloatFrequencyData() {\n        const subNode = _GetAudioAnalyzerSubNode(this._subGraph);\n        if (!subNode) {\n            Logger.Warn(\"AudioAnalyzer not enabled\");\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.enableAsync();\n            return _GetEmptyFloatFrequencyData();\n        }\n        return subNode.getFloatFrequencyData();\n    }\n}\n//# sourceMappingURL=audioAnalyzer.js.map","import { AbstractNamedAudioNode } from \"./abstractAudioNode\";\nimport { _GetVolumeAudioProperty, _GetVolumeAudioSubNode } from \"./subNodes/volumeAudioSubNode\";\nimport { _AudioAnalyzer } from \"./subProperties/audioAnalyzer\";\n/**\n * Abstract class representing and audio output node with an analyzer and volume control.\n */\nexport class AbstractAudioOutNode extends AbstractNamedAudioNode {\n    constructor(name, engine, nodeType) {\n        super(name, engine, nodeType);\n        this._analyzer = null;\n    }\n    /**\n     * The analyzer features of the bus.\n     */\n    get analyzer() {\n        return this._analyzer ?? (this._analyzer = new _AudioAnalyzer(this._subGraph));\n    }\n    /**\n     * The audio output volume.\n     */\n    get volume() {\n        return _GetVolumeAudioProperty(this._subGraph, \"volume\");\n    }\n    set volume(value) {\n        // The volume subnode is created on initialization and should always exist.\n        const node = _GetVolumeAudioSubNode(this._subGraph);\n        if (!node) {\n            throw new Error(\"No volume subnode\");\n        }\n        node.volume = value;\n    }\n    /**\n     * Releases associated resources.\n     */\n    dispose() {\n        super.dispose();\n        this._analyzer?.dispose();\n        this._analyzer = null;\n        this._subGraph.dispose();\n    }\n    /**\n     * Sets the audio output volume with optional ramping.\n     * If the duration is 0 then the volume is set immediately, otherwise it is ramped to the new value over the given duration using the given shape.\n     * If a ramp is already in progress then the volume is not set and an error is thrown.\n     * @param value The value to set the volume to.\n     * @param options The options to use for ramping the volume change.\n     */\n    setVolume(value, options = null) {\n        const node = _GetVolumeAudioSubNode(this._subGraph);\n        if (!node) {\n            throw new Error(\"No volume subnode\");\n        }\n        node.setVolume(value, options);\n    }\n}\n//# sourceMappingURL=abstractAudioOutNode.js.map","/**\n * Adds common sub graph functionality to an audio node.\n *\n * Audio nodes such as static sounds, streaming sounds, and buses can use audio sub graphs to process audio internally\n * before sending it to connected downstream audio nodes. This is useful for applying effects, spatial audio, and other\n * audio processing tasks common to multiple audio node classes.\n *\n * A key feature of audio sub graphs is their audio sub nodes are created asynchronously on demand so the minimum set\n * of sub nodes are used at all times to save memory and CPU resources. The tradeoff is a small delay when first\n * setting a property backed by a sub node. This delay is avoided by using the appropriate options to initialize the\n * sub node on creation, e.g. `spatialEnabled` and `stereoEnabled`, or by setting any creation option backed by the\n * sub node, e.g. `spatialPosition` and `stereoPan`.\n *\n * @internal\n */\nexport class _AbstractAudioSubGraph {\n    constructor() {\n        this._createSubNodePromises = {};\n        this._isDisposed = false;\n        this._subNodes = {};\n        this._onSubNodeDisposed = (node) => {\n            const subNode = node;\n            delete this._subNodes[subNode.name];\n            this._onSubNodesChanged();\n        };\n    }\n    /**\n     * Executes the given callback with the named sub node, creating the sub node if needed.\n     *\n     * @param name The name of the sub node\n     * @param callback The function to call with the named sub node\n     *\n     * @internal\n     */\n    callOnSubNode(name, callback) {\n        const node = this.getSubNode(name);\n        if (node) {\n            callback(node);\n            return;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises, github/no-then\n        this._createSubNodePromisesResolvedAsync().then(() => {\n            const node = this.getSubNode(name);\n            if (node) {\n                callback(node);\n                return;\n            }\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises, github/no-then\n            this.createAndAddSubNodeAsync(name).then((node) => {\n                callback(node);\n            });\n        });\n    }\n    /**\n     * Creates the named subnode and adds it to the sub graph.\n     *\n     * @param name The name of the sub node.\n     * @returns A promise that resolves to the created sub node.\n     *\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\n    createAndAddSubNodeAsync(name) {\n        // eslint-disable-next-line github/no-then\n        this._createSubNodePromises[name] ||= this._createSubNode(name).then((node) => {\n            this._addSubNode(node);\n            return node;\n        });\n        return this._createSubNodePromises[name];\n    }\n    /**\n     * Releases associated resources.\n     *\n     * @internal\n     */\n    dispose() {\n        this._isDisposed = true;\n        const subNodes = Object.values(this._subNodes);\n        for (const subNode of subNodes) {\n            subNode.dispose();\n        }\n        this._subNodes = {};\n        this._createSubNodePromises = {};\n    }\n    /**\n     * Gets a previously created sub node.\n     *\n     * @param name - The name of the sub node\n     * @returns The named sub node, or `null` if it has not been created, yet\n     *\n     * @internal\n     * */\n    getSubNode(name) {\n        return this._subNodes[name] ?? null;\n    }\n    /**\n     * Removes a sub node from the sub graph.\n     *\n     * @param subNode - The sub node to remove\n     * @returns A promise that resolves when the sub node is removed\n     *\n     * @internal\n     */\n    async removeSubNodeAsync(subNode) {\n        await this._createSubNodePromisesResolvedAsync();\n        const name = subNode.name;\n        if (this._subNodes[name]) {\n            delete this._subNodes[name];\n        }\n        delete this._createSubNodePromises[name];\n        this._onSubNodesChanged();\n    }\n    async _createSubNodePromisesResolvedAsync() {\n        return await Promise.all(Object.values(this._createSubNodePromises));\n    }\n    _addSubNode(node) {\n        if (this._isDisposed) {\n            node.dispose();\n            return;\n        }\n        this._subNodes[node.name] = node;\n        node.onDisposeObservable.addOnce(this._onSubNodeDisposed);\n        this._onSubNodesChanged();\n    }\n}\n//# sourceMappingURL=abstractAudioSubGraph.js.map","import { _VolumeAudioSubNode } from \"../../abstractAudio/subNodes/volumeAudioSubNode\";\nimport { _WebAudioParameterComponent } from \"../components/webAudioParameterComponent\";\n/** @internal */\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function _CreateVolumeAudioSubNodeAsync(engine) {\n    return new _VolumeWebAudioSubNode(engine);\n}\n/** @internal */\nexport class _VolumeWebAudioSubNode extends _VolumeAudioSubNode {\n    /** @internal */\n    constructor(engine) {\n        super(engine);\n        const gainNode = (this.node = new GainNode(engine._audioContext));\n        this._volume = new _WebAudioParameterComponent(engine, gainNode.gain);\n    }\n    /** @internal */\n    dispose() {\n        super.dispose();\n        this._volume.dispose();\n    }\n    /** @internal */\n    get volume() {\n        return this._volume.value;\n    }\n    /** @internal */\n    set volume(value) {\n        this.setVolume(value);\n    }\n    /** @internal */\n    get _inNode() {\n        return this.node;\n    }\n    /** @internal */\n    get _outNode() {\n        return this.node;\n    }\n    /** @internal */\n    setVolume(value, options = null) {\n        this._volume.setTargetValue(value, options);\n    }\n    _connect(node) {\n        const connected = super._connect(node);\n        if (!connected) {\n            return false;\n        }\n        // If the wrapped node is not available now, it will be connected later by the subgraph.\n        if (node._inNode) {\n            this.node.connect(node._inNode);\n        }\n        return true;\n    }\n    _disconnect(node) {\n        const disconnected = super._disconnect(node);\n        if (!disconnected) {\n            return false;\n        }\n        if (node._inNode) {\n            this.node.disconnect(node._inNode);\n        }\n        return true;\n    }\n    /** @internal */\n    getClassName() {\n        return \"_VolumeWebAudioSubNode\";\n    }\n}\n//# sourceMappingURL=volumeWebAudioSubNode.js.map","import { _AudioAnalyzerSubNode } from \"../../abstractAudio/subNodes/audioAnalyzerSubNode\";\nimport { _GetEmptyByteFrequencyData, _GetEmptyFloatFrequencyData } from \"../../abstractAudio/subProperties/audioAnalyzer\";\n/** @internal */\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function _CreateAudioAnalyzerSubNodeAsync(engine) {\n    return new _WebAudioAnalyzerSubNode(engine);\n}\n/** @internal */\nexport class _WebAudioAnalyzerSubNode extends _AudioAnalyzerSubNode {\n    /** @internal */\n    constructor(engine) {\n        super(engine);\n        this._byteFrequencyData = null;\n        this._floatFrequencyData = null;\n        this._analyzerNode = new AnalyserNode(engine._audioContext);\n    }\n    /** @internal */\n    get fftSize() {\n        return this._analyzerNode.fftSize;\n    }\n    set fftSize(value) {\n        if (value === this._analyzerNode.fftSize) {\n            return;\n        }\n        this._analyzerNode.fftSize = value;\n        this._clearArrays();\n    }\n    /** @internal */\n    get _inNode() {\n        return this._analyzerNode;\n    }\n    /** @internal */\n    get minDecibels() {\n        return this._analyzerNode.minDecibels;\n    }\n    set minDecibels(value) {\n        this._analyzerNode.minDecibels = value;\n    }\n    /** @internal */\n    get maxDecibels() {\n        return this._analyzerNode.maxDecibels;\n    }\n    set maxDecibels(value) {\n        this._analyzerNode.maxDecibels = value;\n    }\n    /** @internal */\n    get smoothing() {\n        return this._analyzerNode.smoothingTimeConstant;\n    }\n    set smoothing(value) {\n        this._analyzerNode.smoothingTimeConstant = value;\n    }\n    /** @internal */\n    dispose() {\n        super.dispose();\n        this._clearArrays();\n        this._byteFrequencyData = null;\n        this._floatFrequencyData = null;\n        this._analyzerNode.disconnect();\n    }\n    /** @internal */\n    getClassName() {\n        return \"_WebAudioAnalyzerSubNode\";\n    }\n    /** @internal */\n    getByteFrequencyData() {\n        if (!this._byteFrequencyData || this._byteFrequencyData.length === 0) {\n            this._byteFrequencyData = new Uint8Array(this._analyzerNode.frequencyBinCount);\n        }\n        this._analyzerNode.getByteFrequencyData(this._byteFrequencyData);\n        return this._byteFrequencyData;\n    }\n    /** @internal */\n    getFloatFrequencyData() {\n        if (!this._floatFrequencyData || this._floatFrequencyData.length === 0) {\n            this._floatFrequencyData = new Float32Array(this._analyzerNode.frequencyBinCount);\n        }\n        this._analyzerNode.getFloatFrequencyData(this._floatFrequencyData);\n        return this._floatFrequencyData;\n    }\n    _clearArrays() {\n        this._byteFrequencyData?.set(_GetEmptyByteFrequencyData());\n        this._floatFrequencyData?.set(_GetEmptyFloatFrequencyData());\n    }\n}\n//# sourceMappingURL=webAudioAnalyzerSubNode.js.map","import { _AbstractAudioSubGraph } from \"../../abstractAudio/subNodes/abstractAudioSubGraph\";\nimport { _GetAudioAnalyzerSubNode } from \"../../abstractAudio/subNodes/audioAnalyzerSubNode\";\nimport { _GetVolumeAudioSubNode } from \"../../abstractAudio/subNodes/volumeAudioSubNode\";\nimport { _HasAudioAnalyzerOptions } from \"../../abstractAudio/subProperties/abstractAudioAnalyzer\";\nimport { _CreateVolumeAudioSubNodeAsync } from \"./volumeWebAudioSubNode\";\nimport { _CreateAudioAnalyzerSubNodeAsync } from \"./webAudioAnalyzerSubNode\";\n/** @internal */\nexport class _WebAudioBaseSubGraph extends _AbstractAudioSubGraph {\n    /** @internal */\n    constructor(owner) {\n        super();\n        this._outputNode = null;\n        this._owner = owner;\n    }\n    /** @internal */\n    async initAsync(options) {\n        const hasAnalyzerOptions = _HasAudioAnalyzerOptions(options);\n        if (hasAnalyzerOptions) {\n            await this.createAndAddSubNodeAsync(\"Analyzer\" /* AudioSubNode.ANALYZER */);\n        }\n        await this.createAndAddSubNodeAsync(\"Volume\" /* AudioSubNode.VOLUME */);\n        await this._createSubNodePromisesResolvedAsync();\n        if (hasAnalyzerOptions) {\n            const analyzerNode = _GetAudioAnalyzerSubNode(this);\n            if (!analyzerNode) {\n                throw new Error(\"No analyzer subnode.\");\n            }\n            analyzerNode.setOptions(options);\n        }\n        const volumeNode = _GetVolumeAudioSubNode(this);\n        if (!volumeNode) {\n            throw new Error(\"No volume subnode.\");\n        }\n        volumeNode.setOptions(options);\n        if (volumeNode.getClassName() !== \"_VolumeWebAudioSubNode\") {\n            throw new Error(\"Not a WebAudio subnode.\");\n        }\n        this._outputNode = volumeNode.node;\n        // Connect the new wrapped WebAudio node to the wrapped downstream WebAudio nodes.\n        // The wrapper nodes are unaware of this change.\n        if (this._outputNode && this._downstreamNodes) {\n            const it = this._downstreamNodes.values();\n            for (let next = it.next(); !next.done; next = it.next()) {\n                const inNode = next.value._inNode;\n                if (inNode) {\n                    this._outputNode.connect(inNode);\n                }\n            }\n        }\n    }\n    /** @internal */\n    get _inNode() {\n        return this._outputNode;\n    }\n    /** @internal */\n    get _outNode() {\n        return this._outputNode;\n    }\n    // Function is async, but throws synchronously. Avoiding breaking changes.\n    // eslint-disable-next-line @typescript-eslint/promise-function-async\n    _createSubNode(name) {\n        switch (name) {\n            case \"Analyzer\" /* AudioSubNode.ANALYZER */:\n                return _CreateAudioAnalyzerSubNodeAsync(this._owner.engine);\n            case \"Volume\" /* AudioSubNode.VOLUME */:\n                return _CreateVolumeAudioSubNodeAsync(this._owner.engine);\n            default:\n                throw new Error(`Unknown subnode name: ${name}`);\n        }\n    }\n    _onSubNodesChanged() {\n        const analyzerNode = _GetAudioAnalyzerSubNode(this);\n        const volumeNode = _GetVolumeAudioSubNode(this);\n        if (analyzerNode && volumeNode) {\n            volumeNode.connect(analyzerNode);\n        }\n    }\n}\n//# sourceMappingURL=webAudioBaseSubGraph.js.map"],"names":["_AbstractAudioSubNode","AbstractNamedAudioNode","constructor","name","engine","super","connect","node","this","_connect","Error","disconnect","_disconnect","disconnectAll","_downstreamNodes","it","values","next","done","value","_VolumeAudioDefaults","volume","_VolumeAudioSubNode","setOptions","options","_GetVolumeAudioSubNode","subGraph","getSubNode","_AudioAnalyzerDefaults","AbstractAudioAnalyzer","frequencyBinCount","fftSize","_AudioAnalyzerSubNode","analyzerFFTSize","minDecibels","analyzerMinDecibels","maxDecibels","analyzerMaxDecibels","smoothing","analyzerSmoothing","_GetAudioAnalyzerSubNode","_SetAudioAnalyzerProperty","property","callOnSubNode","EmptyByteFrequencyData","EmptyFloatFrequencyData","_GetEmptyByteFrequencyData","Uint8Array","_GetEmptyFloatFrequencyData","Float32Array","_AudioAnalyzer","_fftSize","_maxDecibels","_minDecibels","_smoothing","_subGraph","isEnabled","dispose","subNode","removeSubNodeAsync","enableAsync","createAndAddSubNodeAsync","getByteFrequencyData","Logger","Warn","getFloatFrequencyData","AbstractAudioOutNode","nodeType","_analyzer","analyzer","setVolume","_AbstractAudioSubGraph","_createSubNodePromises","_isDisposed","_subNodes","_onSubNodeDisposed","_onSubNodesChanged","callback","_createSubNodePromisesResolvedAsync","then","_createSubNode","_addSubNode","subNodes","Object","Promise","all","onDisposeObservable","addOnce","_VolumeWebAudioSubNode","gainNode","GainNode","_audioContext","_volume","_WebAudioParameterComponent","gain","_inNode","_outNode","setTargetValue","getClassName","_WebAudioAnalyzerSubNode","_byteFrequencyData","_floatFrequencyData","_analyzerNode","AnalyserNode","_clearArrays","smoothingTimeConstant","length","set","_WebAudioBaseSubGraph","owner","_outputNode","_owner","initAsync","hasAnalyzerOptions","analyzerEnabled","undefined","_HasAudioAnalyzerOptions","analyzerNode","volumeNode","inNode","async","_CreateAudioAnalyzerSubNodeAsync","_CreateVolumeAudioSubNodeAsync"],"mappings":"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"}