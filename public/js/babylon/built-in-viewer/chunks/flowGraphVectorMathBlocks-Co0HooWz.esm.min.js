import{F as t,e as o}from"./KHR_interactivity-Cf9lpS9v.esm.min.js";import{j as e,l as r,f as s,h as a,m as n,g as c,n as l,R as i}from"./declarationMapper-Cv7ZVLOv.esm.min.js";import{Q as u,c4 as h,V as p,x as m,e as w}from"./index-BeBPThKX.esm.min.js";import{F as x}from"./flowGraphBinaryOperationBlock-BAqsGSGe.esm.min.js";import{F as d}from"./flowGraphUnaryOperationBlock-DunGiGYZ.esm.min.js";import"./objectModelMapping-C_2yKgOV.esm.min.js";import"./flowGraphCachedOperationBlock-DWaAAhI5.esm.min.js";function g(t,o){const e=new u;return function(t,o,e){const r=p.Cross(t,o),s=Math.acos(h(function(t,o){return t.x*o.x+t.y*o.y+t.z*o.z}(t,o),-1,1));u.RotationAxisToRef(r,s,e)}(t,o,e),e}const V="cachedOperationAxis",F="cachedOperationAngle",B="cachedExecutionId";class f extends d{constructor(t){super(i,s,(t=>this._polymorphicLength(t)),"FlowGraphLengthBlock",t)}_polymorphicLength(t){switch(o(t)){case"Vector2":case"Vector3":case"Vector4":case"Quaternion":return t.length();default:throw new Error(`Cannot compute length of value ${t}`)}}}w("FlowGraphLengthBlock",f);class k extends d{constructor(t){super(i,i,(t=>this._polymorphicNormalize(t)),"FlowGraphNormalizeBlock",t)}_polymorphicNormalize(t){let e;switch(o(t)){case"Vector2":case"Vector3":case"Vector4":case"Quaternion":if(e=t.normalizeToNew(),this.config?.nanOnZeroLength){0===t.length()&&e.setAll(NaN)}return e;default:throw new Error(`Cannot normalize value ${t}`)}}}w("FlowGraphNormalizeBlock",k);class G extends x{constructor(t){super(i,i,s,((t,o)=>this._polymorphicDot(t,o)),"FlowGraphDotBlock",t)}_polymorphicDot(t,e){switch(o(t)){case"Vector2":case"Vector3":case"Vector4":case"Quaternion":return t.dot(e);default:throw new Error(`Cannot get dot product of ${t} and ${e}`)}}}w("FlowGraphDotBlock",G);class y extends x{constructor(t){super(e,e,e,((t,o)=>p.Cross(t,o)),"FlowGraphCrossBlock",t)}}w("FlowGraphCrossBlock",y);class A extends x{constructor(t){super(l,s,l,((t,o)=>t.rotate(o)),"FlowGraphRotate2DBlock",t)}}w("FlowGraphRotate2DBlock",A);class D extends x{constructor(t){super(e,r,e,((t,o)=>t.applyRotationQuaternion(o)),"FlowGraphRotate3DBlock",t)}}function C(t,e){switch(o(t)){case"Vector2":case"Vector3":return e.transformVector(t);case"Vector4":return new m(t.x*e.m[0]+t.y*e.m[1]+t.z*e.m[2]+t.w*e.m[3],t.x*e.m[4]+t.y*e.m[5]+t.z*e.m[6]+t.w*e.m[7],t.x*e.m[8]+t.y*e.m[9]+t.z*e.m[10]+t.w*e.m[11],t.x*e.m[12]+t.y*e.m[13]+t.z*e.m[14]+t.w*e.m[15]);default:throw new Error(`Cannot transform value ${t}`)}}w("FlowGraphRotate3DBlock",D);class _ extends x{constructor(t){const o=t?.vectorType||"Vector3",e="Vector2"===o?"Matrix2D":"Vector3"===o?"Matrix3D":"Matrix";super(c(o),c(e),c(o),C,"FlowGraphTransformVectorBlock",t)}}w("FlowGraphTransformVectorBlock",_);class j extends x{constructor(t){super(e,n,e,((t,o)=>p.TransformCoordinates(t,o)),"FlowGraphTransformCoordinatesBlock",t)}}w("FlowGraphTransformCoordinatesBlock",j);class z extends d{constructor(t){super(r,r,(t=>t.conjugate()),"FlowGraphConjugateBlock",t)}}w("FlowGraphConjugateBlock",z);class E extends x{constructor(t){super(r,r,s,((t,o)=>{return e=t,r=o,2*Math.acos(h(u.Dot(e,r)));var e,r}),"FlowGraphAngleBetweenBlock",t)}}w("FlowGraphAngleBetweenBlock",E);class O extends x{constructor(t){super(e,s,r,((t,o)=>u.RotationAxis(t,o)),"FlowGraphQuaternionFromAxisAngleBlock",t)}}w("FlowGraphQuaternionFromAxisAngleBlock",O);class Q extends t{constructor(t){super(t),this.a=this.registerDataInput("a",r),this.axis=this.registerDataOutput("axis",e),this.angle=this.registerDataOutput("angle",s),this.isValid=this.registerDataOutput("isValid",a)}_updateOutputs(t){const o=t._getExecutionVariable(this,B,-1),e=t._getExecutionVariable(this,V,null),r=t._getExecutionVariable(this,F,null);if(null!=e&&null!=r&&o===t.executionId)this.axis.setValue(e,t),this.angle.setValue(r,t);else try{const{axis:o,angle:e}=this.a.getValue(t).toAxisAngle();t._setExecutionVariable(this,V,o),t._setExecutionVariable(this,F,e),t._setExecutionVariable(this,B,t.executionId),this.axis.setValue(o,t),this.angle.setValue(e,t),this.isValid.setValue(!0,t)}catch(o){this.isValid.setValue(!1,t)}}getClassName(){return"FlowGraphAxisAngleFromQuaternionBlock"}}w("FlowGraphAxisAngleFromQuaternionBlock",Q);class R extends x{constructor(t){super(e,e,r,((t,o)=>g(t,o)),"FlowGraphQuaternionFromDirectionsBlock",t)}}export{E as FlowGraphAngleBetweenBlock,Q as FlowGraphAxisAngleFromQuaternionBlock,z as FlowGraphConjugateBlock,y as FlowGraphCrossBlock,G as FlowGraphDotBlock,f as FlowGraphLengthBlock,k as FlowGraphNormalizeBlock,O as FlowGraphQuaternionFromAxisAngleBlock,R as FlowGraphQuaternionFromDirectionsBlock,A as FlowGraphRotate2DBlock,D as FlowGraphRotate3DBlock,_ as FlowGraphTransformBlock,j as FlowGraphTransformCoordinatesBlock};
//# sourceMappingURL=flowGraphVectorMathBlocks-Co0HooWz.esm.min.js.map
