{"version":3,"file":"MSFT_sRGBFactors-DOPS2vY-.esm.min.js","sources":["../../../../../dev/loaders/dist/glTF/2.0/Extensions/MSFT_sRGBFactors.js"],"sourcesContent":["import { GLTFLoader } from \"../glTFLoader\";\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\nconst NAME = \"MSFT_sRGBFactors\";\n/** @internal */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class MSFT_sRGBFactors {\n    /** @internal */\n    constructor(loader) {\n        /** @internal */\n        this.name = NAME;\n        this._loader = loader;\n        this.enabled = this._loader.isExtensionUsed(NAME);\n    }\n    /** @internal */\n    dispose() {\n        this._loader = null;\n    }\n    /** @internal*/\n    // eslint-disable-next-line no-restricted-syntax\n    loadMaterialPropertiesAsync(context, material, babylonMaterial) {\n        return GLTFLoader.LoadExtraAsync(context, material, this.name, async (extraContext, extra) => {\n            if (extra) {\n                const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\n                const promise = this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial);\n                const useExactSrgbConversions = babylonMaterial.getScene().getEngine().useExactSrgbConversions;\n                if (!adapter.baseColorTexture) {\n                    adapter.baseColor.toLinearSpaceToRef(adapter.baseColor, useExactSrgbConversions);\n                }\n                if (!adapter.specularColorTexture) {\n                    adapter.specularColor.toLinearSpaceToRef(adapter.specularColor, useExactSrgbConversions);\n                }\n                return await promise;\n            }\n        });\n    }\n}\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, true, (loader) => new MSFT_sRGBFactors(loader));\n//# sourceMappingURL=MSFT_sRGBFactors.js.map"],"names":["NAME","MSFT_sRGBFactors","constructor","loader","this","name","_loader","enabled","isExtensionUsed","dispose","loadMaterialPropertiesAsync","context","material","babylonMaterial","GLTFLoader","LoadExtraAsync","async","extraContext","extra","adapter","_getOrCreateMaterialAdapter","promise","useExactSrgbConversions","getScene","getEngine","baseColorTexture","baseColor","toLinearSpaceToRef","specularColorTexture","specularColor","unregisterGLTFExtension","registerGLTFExtension"],"mappings":"wUAEA,MAAMA,EAAO,mBAGN,MAAMC,EAET,WAAAC,CAAYC,GAERC,KAAKC,KAAOL,EACZI,KAAKE,QAAUH,EACfC,KAAKG,QAAUH,KAAKE,QAAQE,gBAAgBR,EACpD,CAEI,OAAAS,GACIL,KAAKE,QAAU,IACvB,CAGI,2BAAAI,CAA4BC,EAASC,EAAUC,GAC3C,OAAOC,EAAWC,eAAeJ,EAASC,EAAUR,KAAKC,MAAMW,MAAOC,EAAcC,KAChF,GAAIA,EAAO,CACP,MAAMC,EAAUf,KAAKE,QAAQc,4BAA4BP,GACnDQ,EAAUjB,KAAKE,QAAQI,4BAA4BC,EAASC,EAAUC,GACtES,EAA0BT,EAAgBU,WAAWC,YAAYF,wBAOvE,OANKH,EAAQM,kBACTN,EAAQO,UAAUC,mBAAmBR,EAAQO,UAAWJ,GAEvDH,EAAQS,sBACTT,EAAQU,cAAcF,mBAAmBR,EAAQU,cAAeP,SAEvDD,CAC7B,IAEA,EAEAS,EAAwB9B,GACxB+B,EAAsB/B,GAAM,GAAOG,GAAW,IAAIF,EAAiBE"}