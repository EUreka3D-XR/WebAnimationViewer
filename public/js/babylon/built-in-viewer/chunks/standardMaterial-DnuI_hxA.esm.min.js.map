{"version":3,"file":"standardMaterial-DnuI_hxA.esm.min.js","sources":["../../../../../dev/core/dist/Materials/standardMaterial.js"],"sourcesContent":["import { __decorate } from \"tslib\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { serialize, serializeAsColor3, expandToProperty, serializeAsFresnelParameters, serializeAsTexture } from \"../Misc/decorators\";\nimport { SmartArray } from \"../Misc/smartArray\";\nimport { Scene } from \"../scene\";\nimport { Color3 } from \"../Maths/math.color\";\nimport { VertexBuffer } from \"../Buffers/buffer\";\nimport { PrePassConfiguration } from \"./prePassConfiguration\";\nimport { ImageProcessingDefinesMixin } from \"./imageProcessingConfiguration.defines\";\nimport { ImageProcessingConfiguration } from \"./imageProcessingConfiguration\";\nimport { Material } from \"../Materials/material\";\nimport { MaterialDefines } from \"../Materials/materialDefines\";\nimport { PushMaterial } from \"./pushMaterial\";\nimport { RegisterClass } from \"../Misc/typeStore\";\nimport { MaterialFlags } from \"./materialFlags\";\nimport { Constants } from \"../Engines/constants\";\nimport { EffectFallbacks } from \"./effectFallbacks\";\nimport { DetailMapConfiguration } from \"./material.detailMapConfiguration\";\nimport { AddClipPlaneUniforms, BindClipPlane } from \"./clipPlaneMaterialHelper\";\nimport { BindBonesParameters, BindFogParameters, BindLights, BindLogDepth, BindMorphTargetParameters, BindTextureMatrix, BindIBLParameters, HandleFallbacksForShadows, PrepareAttributesForBakedVertexAnimation, PrepareAttributesForBones, PrepareAttributesForInstances, PrepareAttributesForMorphTargets, PrepareDefinesForAttributes, PrepareDefinesForFrameBoundValues, PrepareDefinesForLights, PrepareDefinesForIBL, PrepareDefinesForMergedUV, PrepareDefinesForMisc, PrepareDefinesForMultiview, PrepareDefinesForOIT, PrepareDefinesForPrePass, PrepareUniformsAndSamplersForIBL, PrepareUniformsAndSamplersList, PrepareUniformLayoutForIBL, } from \"./materialHelper.functions\";\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\nimport { MaterialHelperGeometryRendering } from \"./materialHelper.geometryrendering\";\nimport { UVDefinesMixin } from \"./uv.defines\";\nimport { ImageProcessingMixin } from \"./imageProcessing\";\nconst onCreatedEffectParameters = { effect: null, subMesh: null };\nclass StandardMaterialDefinesBase extends UVDefinesMixin(MaterialDefines) {\n}\n/** @internal */\nexport class StandardMaterialDefines extends ImageProcessingDefinesMixin(StandardMaterialDefinesBase) {\n    /**\n     * Initializes the Standard Material defines.\n     * @param externalProperties The external properties\n     */\n    constructor(externalProperties) {\n        super(externalProperties);\n        this.DIFFUSE = false;\n        this.DIFFUSEDIRECTUV = 0;\n        this.BAKED_VERTEX_ANIMATION_TEXTURE = false;\n        this.AMBIENT = false;\n        this.AMBIENTDIRECTUV = 0;\n        this.OPACITY = false;\n        this.OPACITYDIRECTUV = 0;\n        this.OPACITYRGB = false;\n        this.REFLECTION = false;\n        this.EMISSIVE = false;\n        this.EMISSIVEDIRECTUV = 0;\n        this.SPECULAR = false;\n        this.SPECULARDIRECTUV = 0;\n        this.BUMP = false;\n        this.BUMPDIRECTUV = 0;\n        this.PARALLAX = false;\n        this.PARALLAX_RHS = false;\n        this.PARALLAXOCCLUSION = false;\n        this.SPECULAROVERALPHA = false;\n        this.CLIPPLANE = false;\n        this.CLIPPLANE2 = false;\n        this.CLIPPLANE3 = false;\n        this.CLIPPLANE4 = false;\n        this.CLIPPLANE5 = false;\n        this.CLIPPLANE6 = false;\n        this.ALPHATEST = false;\n        this.DEPTHPREPASS = false;\n        this.ALPHAFROMDIFFUSE = false;\n        this.POINTSIZE = false;\n        this.FOG = false;\n        this.SPECULARTERM = false;\n        this.DIFFUSEFRESNEL = false;\n        this.OPACITYFRESNEL = false;\n        this.REFLECTIONFRESNEL = false;\n        this.REFRACTIONFRESNEL = false;\n        this.EMISSIVEFRESNEL = false;\n        this.FRESNEL = false;\n        this.NORMAL = false;\n        this.TANGENT = false;\n        this.VERTEXCOLOR = false;\n        this.VERTEXALPHA = false;\n        this.NUM_BONE_INFLUENCERS = 0;\n        this.BonesPerMesh = 0;\n        this.BONETEXTURE = false;\n        this.BONES_VELOCITY_ENABLED = false;\n        this.INSTANCES = false;\n        this.THIN_INSTANCES = false;\n        this.INSTANCESCOLOR = false;\n        this.GLOSSINESS = false;\n        this.ROUGHNESS = false;\n        this.EMISSIVEASILLUMINATION = false;\n        this.LINKEMISSIVEWITHDIFFUSE = false;\n        this.REFLECTIONFRESNELFROMSPECULAR = false;\n        this.LIGHTMAP = false;\n        this.LIGHTMAPDIRECTUV = 0;\n        this.OBJECTSPACE_NORMALMAP = false;\n        this.USELIGHTMAPASSHADOWMAP = false;\n        this.REFLECTIONMAP_3D = false;\n        this.REFLECTIONMAP_SPHERICAL = false;\n        this.REFLECTIONMAP_PLANAR = false;\n        this.REFLECTIONMAP_CUBIC = false;\n        this.USE_LOCAL_REFLECTIONMAP_CUBIC = false;\n        this.USE_LOCAL_REFRACTIONMAP_CUBIC = false;\n        this.REFLECTIONMAP_PROJECTION = false;\n        this.REFLECTIONMAP_SKYBOX = false;\n        this.REFLECTIONMAP_EXPLICIT = false;\n        this.REFLECTIONMAP_EQUIRECTANGULAR = false;\n        this.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\n        this.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\n        this.REFLECTIONMAP_OPPOSITEZ = false;\n        this.INVERTCUBICMAP = false;\n        this.LOGARITHMICDEPTH = false;\n        this.REFRACTION = false;\n        this.REFRACTIONMAP_3D = false;\n        this.REFLECTIONOVERALPHA = false;\n        this.TWOSIDEDLIGHTING = false;\n        this.SHADOWFLOAT = false;\n        this.MORPHTARGETS = false;\n        this.MORPHTARGETS_POSITION = false;\n        this.MORPHTARGETS_NORMAL = false;\n        this.MORPHTARGETS_TANGENT = false;\n        this.MORPHTARGETS_UV = false;\n        this.MORPHTARGETS_UV2 = false;\n        this.MORPHTARGETS_COLOR = false;\n        this.MORPHTARGETTEXTURE_HASPOSITIONS = false;\n        this.MORPHTARGETTEXTURE_HASNORMALS = false;\n        this.MORPHTARGETTEXTURE_HASTANGENTS = false;\n        this.MORPHTARGETTEXTURE_HASUVS = false;\n        this.MORPHTARGETTEXTURE_HASUV2S = false;\n        this.MORPHTARGETTEXTURE_HASCOLORS = false;\n        this.NUM_MORPH_INFLUENCERS = 0;\n        this.MORPHTARGETS_TEXTURE = false;\n        this.NONUNIFORMSCALING = false; // https://playground.babylonjs.com#V6DWIH\n        this.PREMULTIPLYALPHA = false; // https://playground.babylonjs.com#LNVJJ7\n        this.ALPHATEST_AFTERALLALPHACOMPUTATIONS = false;\n        this.ALPHABLEND = true;\n        this.PREPASS = false;\n        this.PREPASS_COLOR = false;\n        this.PREPASS_COLOR_INDEX = -1;\n        this.PREPASS_IRRADIANCE = false;\n        this.PREPASS_IRRADIANCE_INDEX = -1;\n        this.PREPASS_ALBEDO = false;\n        this.PREPASS_ALBEDO_INDEX = -1;\n        this.PREPASS_ALBEDO_SQRT = false;\n        this.PREPASS_ALBEDO_SQRT_INDEX = -1;\n        this.PREPASS_DEPTH = false;\n        this.PREPASS_DEPTH_INDEX = -1;\n        this.PREPASS_SCREENSPACE_DEPTH = false;\n        this.PREPASS_SCREENSPACE_DEPTH_INDEX = -1;\n        this.PREPASS_NORMALIZED_VIEW_DEPTH = false;\n        this.PREPASS_NORMALIZED_VIEW_DEPTH_INDEX = -1;\n        this.PREPASS_NORMAL = false;\n        this.PREPASS_NORMAL_INDEX = -1;\n        this.PREPASS_NORMAL_WORLDSPACE = false;\n        this.PREPASS_WORLD_NORMAL = false;\n        this.PREPASS_WORLD_NORMAL_INDEX = -1;\n        this.PREPASS_POSITION = false;\n        this.PREPASS_POSITION_INDEX = -1;\n        this.PREPASS_LOCAL_POSITION = false;\n        this.PREPASS_LOCAL_POSITION_INDEX = -1;\n        this.PREPASS_VELOCITY = false;\n        this.PREPASS_VELOCITY_INDEX = -1;\n        this.PREPASS_VELOCITY_LINEAR = false;\n        this.PREPASS_VELOCITY_LINEAR_INDEX = -1;\n        this.PREPASS_REFLECTIVITY = false;\n        this.PREPASS_REFLECTIVITY_INDEX = -1;\n        this.SCENE_MRT_COUNT = 0;\n        this.RGBDLIGHTMAP = false;\n        this.RGBDREFLECTION = false;\n        this.RGBDREFRACTION = false;\n        this.MULTIVIEW = false;\n        this.ORDER_INDEPENDENT_TRANSPARENCY = false;\n        this.ORDER_INDEPENDENT_TRANSPARENCY_16BITS = false;\n        this.CAMERA_ORTHOGRAPHIC = false;\n        this.CAMERA_PERSPECTIVE = false;\n        this.AREALIGHTSUPPORTED = true;\n        this.USE_VERTEX_PULLING = false;\n        this.CLUSTLIGHT_SLICES = 0;\n        this.CLUSTLIGHT_BATCH = 0;\n        /**\n         * If the reflection texture on this material is in linear color space\n         * @internal\n         */\n        this.IS_REFLECTION_LINEAR = false;\n        /**\n         * If the refraction texture on this material is in linear color space\n         * @internal\n         */\n        this.IS_REFRACTION_LINEAR = false;\n        this.DECAL_AFTER_DETAIL = false;\n        this.rebuild();\n    }\n}\nclass StandardMaterialBase extends ImageProcessingMixin(PushMaterial) {\n}\n/**\n * This is the default material used in Babylon. It is the best trade off between quality\n * and performances.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction\n */\nexport class StandardMaterial extends StandardMaterialBase {\n    /**\n     * Can this material render to prepass\n     */\n    get isPrePassCapable() {\n        return !this.disableDepthWrite;\n    }\n    /**\n     * Can this material render to several textures at once\n     */\n    get canRenderToMRT() {\n        return true;\n    }\n    /**\n     * Instantiates a new standard material.\n     * This is the default material used in Babylon. It is the best trade off between quality\n     * and performances.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction\n     * @param name Define the name of the material in the scene\n     * @param scene Define the scene the material belong to\n     * @param forceGLSL Use the GLSL code generation for the shader (even on WebGPU). Default is false\n     */\n    constructor(name, scene, forceGLSL = false) {\n        super(name, scene, undefined, forceGLSL || StandardMaterial.ForceGLSL);\n        this._diffuseTexture = null;\n        this._ambientTexture = null;\n        this._opacityTexture = null;\n        this._reflectionTexture = null;\n        this._emissiveTexture = null;\n        this._specularTexture = null;\n        this._bumpTexture = null;\n        this._lightmapTexture = null;\n        this._refractionTexture = null;\n        /**\n         * The color of the material lit by the environmental background lighting.\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction#ambient-color-example\n         */\n        this.ambientColor = new Color3(0, 0, 0);\n        /**\n         * The basic color of the material as viewed under a light.\n         */\n        this.diffuseColor = new Color3(1, 1, 1);\n        /**\n         * Define how the color and intensity of the highlight given by the light in the material.\n         */\n        this.specularColor = new Color3(1, 1, 1);\n        /**\n         * Define the color of the material as if self lit.\n         * This will be mixed in the final result even in the absence of light.\n         */\n        this.emissiveColor = new Color3(0, 0, 0);\n        /**\n         * Defines how sharp are the highlights in the material.\n         * The bigger the value the sharper giving a more glossy feeling to the result.\n         * Reversely, the smaller the value the blurrier giving a more rough feeling to the result.\n         */\n        this.specularPower = 64;\n        this._useAlphaFromDiffuseTexture = false;\n        this._useEmissiveAsIllumination = false;\n        this._linkEmissiveWithDiffuse = false;\n        this._useSpecularOverAlpha = false;\n        this._useReflectionOverAlpha = false;\n        this._disableLighting = false;\n        this._useObjectSpaceNormalMap = false;\n        this._useParallax = false;\n        this._useParallaxOcclusion = false;\n        /**\n         * Apply a scaling factor that determine which \"depth\" the height map should reprensent. A value between 0.05 and 0.1 is reasonnable in Parallax, you can reach 0.2 using Parallax Occlusion.\n         */\n        this.parallaxScaleBias = 0.05;\n        this._roughness = 0;\n        /**\n         * In case of refraction, define the value of the index of refraction.\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions\n         */\n        this.indexOfRefraction = 0.98;\n        /**\n         * Invert the refraction texture alongside the y axis.\n         * It can be useful with procedural textures or probe for instance.\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions\n         */\n        this.invertRefractionY = true;\n        /**\n         * Defines the alpha limits in alpha test mode.\n         */\n        this.alphaCutOff = 0.4;\n        this._useLightmapAsShadowmap = false;\n        this._useReflectionFresnelFromSpecular = false;\n        this._useGlossinessFromSpecularMapAlpha = false;\n        this._maxSimultaneousLights = 4;\n        this._invertNormalMapX = false;\n        this._invertNormalMapY = false;\n        this._twoSidedLighting = false;\n        this._applyDecalMapAfterDetailMap = false;\n        this._shadersLoaded = false;\n        this._renderTargets = new SmartArray(16);\n        this._globalAmbientColor = new Color3(0, 0, 0);\n        this._cacheHasRenderTargetTextures = false;\n        this.detailMap = new DetailMapConfiguration(this);\n        // Setup the default processing configuration to the scene.\n        this._attachImageProcessingConfiguration(null);\n        this.prePassConfiguration = new PrePassConfiguration();\n        this.getRenderTargetTextures = () => {\n            this._renderTargets.reset();\n            if (StandardMaterial.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\n                this._renderTargets.push(this._reflectionTexture);\n            }\n            if (StandardMaterial.RefractionTextureEnabled && this._refractionTexture && this._refractionTexture.isRenderTarget) {\n                this._renderTargets.push(this._refractionTexture);\n            }\n            this._eventInfo.renderTargets = this._renderTargets;\n            this._callbackPluginEventFillRenderTargetTextures(this._eventInfo);\n            return this._renderTargets;\n        };\n    }\n    /**\n     * Gets a boolean indicating that current material needs to register RTT\n     */\n    get hasRenderTargetTextures() {\n        if (StandardMaterial.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\n            return true;\n        }\n        if (StandardMaterial.RefractionTextureEnabled && this._refractionTexture && this._refractionTexture.isRenderTarget) {\n            return true;\n        }\n        return this._cacheHasRenderTargetTextures;\n    }\n    /**\n     * Gets the current class name of the material e.g. \"StandardMaterial\"\n     * Mainly use in serialization.\n     * @returns the class name\n     */\n    getClassName() {\n        return \"StandardMaterial\";\n    }\n    /**\n     * Specifies if the material will require alpha blending\n     * @returns a boolean specifying if alpha blending is needed\n     */\n    needAlphaBlending() {\n        if (this._hasTransparencyMode) {\n            return this._transparencyModeIsBlend;\n        }\n        if (this._disableAlphaBlending) {\n            return false;\n        }\n        return (this.alpha < 1.0 ||\n            this._opacityTexture != null ||\n            this._shouldUseAlphaFromDiffuseTexture() ||\n            (this._opacityFresnelParameters && this._opacityFresnelParameters.isEnabled));\n    }\n    /**\n     * Specifies if this material should be rendered in alpha test mode\n     * @returns a boolean specifying if an alpha test is needed.\n     */\n    needAlphaTesting() {\n        if (this._hasTransparencyMode) {\n            return this._transparencyModeIsTest;\n        }\n        return this._hasAlphaChannel() && (this._transparencyMode == null || this._transparencyMode === Material.MATERIAL_ALPHATEST);\n    }\n    /**\n     * @returns whether or not the alpha value of the diffuse texture should be used for alpha blending.\n     */\n    _shouldUseAlphaFromDiffuseTexture() {\n        return this._diffuseTexture != null && this._diffuseTexture.hasAlpha && this._useAlphaFromDiffuseTexture && this._transparencyMode !== Material.MATERIAL_OPAQUE;\n    }\n    /**\n     * @returns whether or not there is a usable alpha channel for transparency.\n     */\n    _hasAlphaChannel() {\n        return (this._diffuseTexture != null && this._diffuseTexture.hasAlpha) || this._opacityTexture != null;\n    }\n    /**\n     * Get the texture used for alpha test purpose.\n     * @returns the diffuse texture in case of the standard material.\n     */\n    getAlphaTestTexture() {\n        return this._diffuseTexture;\n    }\n    /**\n     * Get if the submesh is ready to be used and all its information available.\n     * Child classes can use it to update shaders\n     * @param mesh defines the mesh to check\n     * @param subMesh defines which submesh to check\n     * @param useInstances specifies that instances should be used\n     * @returns a boolean indicating that the submesh is ready or not\n     */\n    isReadyForSubMesh(mesh, subMesh, useInstances = false) {\n        if (!this._uniformBufferLayoutBuilt) {\n            this.buildUniformLayout();\n        }\n        const drawWrapper = subMesh._drawWrapper;\n        if (drawWrapper.effect && this.isFrozen) {\n            if (drawWrapper._wasPreviouslyReady && drawWrapper._wasPreviouslyUsingInstances === useInstances) {\n                return true;\n            }\n        }\n        if (!subMesh.materialDefines) {\n            this._callbackPluginEventGeneric(4 /* MaterialPluginEvent.GetDefineNames */, this._eventInfo);\n            subMesh.materialDefines = new StandardMaterialDefines(this._eventInfo.defineNames);\n        }\n        const scene = this.getScene();\n        const defines = subMesh.materialDefines;\n        if (this._isReadyForSubMesh(subMesh)) {\n            return true;\n        }\n        const engine = scene.getEngine();\n        // Lights\n        defines._needNormals = PrepareDefinesForLights(scene, mesh, defines, true, this._maxSimultaneousLights, this._disableLighting);\n        // Multiview\n        PrepareDefinesForMultiview(scene, defines);\n        // PrePass\n        const oit = this.needAlphaBlendingForMesh(mesh) && this.getScene().useOrderIndependentTransparency;\n        PrepareDefinesForPrePass(scene, defines, this.canRenderToMRT && !oit);\n        // Order independant transparency\n        PrepareDefinesForOIT(scene, defines, oit);\n        MaterialHelperGeometryRendering.PrepareDefines(engine.currentRenderPassId, mesh, defines);\n        // Textures\n        if (defines._areTexturesDirty) {\n            this._eventInfo.hasRenderTargetTextures = false;\n            this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);\n            this._cacheHasRenderTargetTextures = this._eventInfo.hasRenderTargetTextures;\n            defines._needUVs = false;\n            for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\n                defines[\"MAINUV\" + i] = false;\n            }\n            if (scene.texturesEnabled) {\n                defines.DIFFUSEDIRECTUV = 0;\n                defines.BUMPDIRECTUV = 0;\n                defines.AMBIENTDIRECTUV = 0;\n                defines.OPACITYDIRECTUV = 0;\n                defines.EMISSIVEDIRECTUV = 0;\n                defines.SPECULARDIRECTUV = 0;\n                defines.LIGHTMAPDIRECTUV = 0;\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\n                    if (!this._diffuseTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        PrepareDefinesForMergedUV(this._diffuseTexture, defines, \"DIFFUSE\");\n                    }\n                }\n                else {\n                    defines.DIFFUSE = false;\n                }\n                if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\n                    if (!this._ambientTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        PrepareDefinesForMergedUV(this._ambientTexture, defines, \"AMBIENT\");\n                    }\n                }\n                else {\n                    defines.AMBIENT = false;\n                }\n                if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\n                    if (!this._opacityTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        PrepareDefinesForMergedUV(this._opacityTexture, defines, \"OPACITY\");\n                        defines.OPACITYRGB = this._opacityTexture.getAlphaFromRGB;\n                    }\n                }\n                else {\n                    defines.OPACITY = false;\n                }\n                if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\n                    defines.ROUGHNESS = this._roughness > 0;\n                    defines.REFLECTIONOVERALPHA = this._useReflectionOverAlpha;\n                }\n                else {\n                    defines.ROUGHNESS = false;\n                    defines.REFLECTIONOVERALPHA = false;\n                }\n                if (!PrepareDefinesForIBL(scene, this._reflectionTexture, defines)) {\n                    return false;\n                }\n                if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\n                    if (!this._emissiveTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        PrepareDefinesForMergedUV(this._emissiveTexture, defines, \"EMISSIVE\");\n                    }\n                }\n                else {\n                    defines.EMISSIVE = false;\n                }\n                if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\n                    if (!this._lightmapTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        PrepareDefinesForMergedUV(this._lightmapTexture, defines, \"LIGHTMAP\");\n                        defines.USELIGHTMAPASSHADOWMAP = this._useLightmapAsShadowmap;\n                        defines.RGBDLIGHTMAP = this._lightmapTexture.isRGBD;\n                    }\n                }\n                else {\n                    defines.LIGHTMAP = false;\n                }\n                if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\n                    if (!this._specularTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        PrepareDefinesForMergedUV(this._specularTexture, defines, \"SPECULAR\");\n                        defines.GLOSSINESS = this._useGlossinessFromSpecularMapAlpha;\n                    }\n                }\n                else {\n                    defines.SPECULAR = false;\n                }\n                if (scene.getEngine().getCaps().standardDerivatives && this._bumpTexture && StandardMaterial.BumpTextureEnabled) {\n                    // Bump texture can not be not blocking.\n                    if (!this._bumpTexture.isReady()) {\n                        return false;\n                    }\n                    else {\n                        PrepareDefinesForMergedUV(this._bumpTexture, defines, \"BUMP\");\n                        defines.PARALLAX = this._useParallax;\n                        defines.PARALLAX_RHS = scene.useRightHandedSystem;\n                        defines.PARALLAXOCCLUSION = this._useParallaxOcclusion;\n                    }\n                    defines.OBJECTSPACE_NORMALMAP = this._useObjectSpaceNormalMap;\n                }\n                else {\n                    defines.BUMP = false;\n                    defines.PARALLAX = false;\n                    defines.PARALLAX_RHS = false;\n                    defines.PARALLAXOCCLUSION = false;\n                }\n                if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\n                    if (!this._refractionTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        defines._needUVs = true;\n                        defines.REFRACTION = true;\n                        defines.REFRACTIONMAP_3D = this._refractionTexture.isCube;\n                        defines.RGBDREFRACTION = this._refractionTexture.isRGBD;\n                        defines.USE_LOCAL_REFRACTIONMAP_CUBIC = this._refractionTexture.boundingBoxSize ? true : false;\n                    }\n                }\n                else {\n                    defines.REFRACTION = false;\n                }\n                defines.TWOSIDEDLIGHTING = !this._backFaceCulling && this._twoSidedLighting;\n            }\n            else {\n                defines.DIFFUSE = false;\n                defines.AMBIENT = false;\n                defines.OPACITY = false;\n                defines.REFLECTION = false;\n                defines.EMISSIVE = false;\n                defines.LIGHTMAP = false;\n                defines.BUMP = false;\n                defines.REFRACTION = false;\n            }\n            defines.ALPHAFROMDIFFUSE = this._shouldUseAlphaFromDiffuseTexture();\n            defines.EMISSIVEASILLUMINATION = this._useEmissiveAsIllumination;\n            defines.LINKEMISSIVEWITHDIFFUSE = this._linkEmissiveWithDiffuse;\n            defines.SPECULAROVERALPHA = this._useSpecularOverAlpha;\n            defines.PREMULTIPLYALPHA = this.alphaMode === Constants.ALPHA_PREMULTIPLIED || this.alphaMode === Constants.ALPHA_PREMULTIPLIED_PORTERDUFF;\n            defines.ALPHATEST_AFTERALLALPHACOMPUTATIONS = this.transparencyMode !== null;\n            defines.ALPHABLEND = this.transparencyMode === null || this.needAlphaBlendingForMesh(mesh); // check on null for backward compatibility\n        }\n        this._eventInfo.isReadyForSubMesh = true;\n        this._eventInfo.defines = defines;\n        this._eventInfo.subMesh = subMesh;\n        this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);\n        if (!this._eventInfo.isReadyForSubMesh) {\n            return false;\n        }\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\n            if (!this._imageProcessingConfiguration.isReady()) {\n                return false;\n            }\n            this._imageProcessingConfiguration.prepareDefines(defines);\n            defines.IS_REFLECTION_LINEAR = this.reflectionTexture != null && !this.reflectionTexture.gammaSpace;\n            defines.IS_REFRACTION_LINEAR = this.refractionTexture != null && !this.refractionTexture.gammaSpace;\n        }\n        if (defines._areFresnelDirty) {\n            if (StandardMaterial.FresnelEnabled) {\n                // Fresnel\n                if (this._diffuseFresnelParameters ||\n                    this._opacityFresnelParameters ||\n                    this._emissiveFresnelParameters ||\n                    this._refractionFresnelParameters ||\n                    this._reflectionFresnelParameters) {\n                    defines.DIFFUSEFRESNEL = this._diffuseFresnelParameters && this._diffuseFresnelParameters.isEnabled;\n                    defines.OPACITYFRESNEL = this._opacityFresnelParameters && this._opacityFresnelParameters.isEnabled;\n                    defines.REFLECTIONFRESNEL = this._reflectionFresnelParameters && this._reflectionFresnelParameters.isEnabled;\n                    defines.REFLECTIONFRESNELFROMSPECULAR = this._useReflectionFresnelFromSpecular;\n                    defines.REFRACTIONFRESNEL = this._refractionFresnelParameters && this._refractionFresnelParameters.isEnabled;\n                    defines.EMISSIVEFRESNEL = this._emissiveFresnelParameters && this._emissiveFresnelParameters.isEnabled;\n                    defines._needNormals = true;\n                    defines.FRESNEL = true;\n                }\n            }\n            else {\n                defines.FRESNEL = false;\n            }\n        }\n        // Check if lights are ready\n        if (defines[\"AREALIGHTUSED\"] || defines[\"CLUSTLIGHT_BATCH\"]) {\n            for (let index = 0; index < mesh.lightSources.length; index++) {\n                if (!mesh.lightSources[index]._isReady()) {\n                    return false;\n                }\n            }\n        }\n        // Misc.\n        PrepareDefinesForMisc(mesh, scene, this._useLogarithmicDepth, this.pointsCloud, this.fogEnabled, this.needAlphaTestingForMesh(mesh), defines, this._applyDecalMapAfterDetailMap, this._useVertexPulling, subMesh.getRenderingMesh(), this._setVertexOutputInvariant);\n        // Values that need to be evaluated on every frame\n        PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances, null, subMesh.getRenderingMesh().hasThinInstances);\n        // External config\n        this._eventInfo.defines = defines;\n        this._eventInfo.mesh = mesh;\n        this._callbackPluginEventPrepareDefinesBeforeAttributes(this._eventInfo);\n        // Attribs\n        PrepareDefinesForAttributes(mesh, defines, true, true, true);\n        // External config\n        this._callbackPluginEventPrepareDefines(this._eventInfo);\n        // Get correct effect\n        let forceWasNotReadyPreviously = false;\n        if (defines.isDirty) {\n            const lightDisposed = defines._areLightsDisposed;\n            defines.markAsProcessed();\n            // Fallbacks\n            const fallbacks = new EffectFallbacks();\n            if (defines.REFLECTION) {\n                fallbacks.addFallback(0, \"REFLECTION\");\n            }\n            if (defines.SPECULAR) {\n                fallbacks.addFallback(0, \"SPECULAR\");\n            }\n            if (defines.BUMP) {\n                fallbacks.addFallback(0, \"BUMP\");\n            }\n            if (defines.PARALLAX) {\n                fallbacks.addFallback(1, \"PARALLAX\");\n            }\n            if (defines.PARALLAX_RHS) {\n                fallbacks.addFallback(1, \"PARALLAX_RHS\");\n            }\n            if (defines.PARALLAXOCCLUSION) {\n                fallbacks.addFallback(0, \"PARALLAXOCCLUSION\");\n            }\n            if (defines.SPECULAROVERALPHA) {\n                fallbacks.addFallback(0, \"SPECULAROVERALPHA\");\n            }\n            if (defines.FOG) {\n                fallbacks.addFallback(1, \"FOG\");\n            }\n            if (defines.POINTSIZE) {\n                fallbacks.addFallback(0, \"POINTSIZE\");\n            }\n            if (defines.LOGARITHMICDEPTH) {\n                fallbacks.addFallback(0, \"LOGARITHMICDEPTH\");\n            }\n            HandleFallbacksForShadows(defines, fallbacks, this._maxSimultaneousLights);\n            if (defines.SPECULARTERM) {\n                fallbacks.addFallback(0, \"SPECULARTERM\");\n            }\n            if (defines.DIFFUSEFRESNEL) {\n                fallbacks.addFallback(1, \"DIFFUSEFRESNEL\");\n            }\n            if (defines.OPACITYFRESNEL) {\n                fallbacks.addFallback(2, \"OPACITYFRESNEL\");\n            }\n            if (defines.REFLECTIONFRESNEL) {\n                fallbacks.addFallback(3, \"REFLECTIONFRESNEL\");\n            }\n            if (defines.EMISSIVEFRESNEL) {\n                fallbacks.addFallback(4, \"EMISSIVEFRESNEL\");\n            }\n            if (defines.FRESNEL) {\n                fallbacks.addFallback(4, \"FRESNEL\");\n            }\n            if (defines.MULTIVIEW) {\n                fallbacks.addFallback(0, \"MULTIVIEW\");\n            }\n            //Attributes\n            const attribs = [VertexBuffer.PositionKind];\n            if (defines.NORMAL) {\n                attribs.push(VertexBuffer.NormalKind);\n            }\n            if (defines.TANGENT) {\n                attribs.push(VertexBuffer.TangentKind);\n            }\n            for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\n                if (defines[\"UV\" + i]) {\n                    attribs.push(`uv${i === 1 ? \"\" : i}`);\n                }\n            }\n            if (defines.VERTEXCOLOR) {\n                attribs.push(VertexBuffer.ColorKind);\n            }\n            PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\n            PrepareAttributesForInstances(attribs, defines);\n            PrepareAttributesForMorphTargets(attribs, mesh, defines);\n            PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\n            let shaderName = \"default\";\n            const uniforms = [\n                \"world\",\n                \"view\",\n                \"viewProjection\",\n                \"vEyePosition\",\n                \"vLightsType\",\n                \"vAmbientColor\",\n                \"vDiffuseColor\",\n                \"vSpecularColor\",\n                \"vEmissiveColor\",\n                \"visibility\",\n                \"vFogInfos\",\n                \"vFogColor\",\n                \"pointSize\",\n                \"vDiffuseInfos\",\n                \"vAmbientInfos\",\n                \"vOpacityInfos\",\n                \"vEmissiveInfos\",\n                \"vSpecularInfos\",\n                \"vBumpInfos\",\n                \"vLightmapInfos\",\n                \"vRefractionInfos\",\n                \"mBones\",\n                \"diffuseMatrix\",\n                \"ambientMatrix\",\n                \"opacityMatrix\",\n                \"emissiveMatrix\",\n                \"specularMatrix\",\n                \"bumpMatrix\",\n                \"normalMatrix\",\n                \"lightmapMatrix\",\n                \"refractionMatrix\",\n                \"diffuseLeftColor\",\n                \"diffuseRightColor\",\n                \"opacityParts\",\n                \"reflectionLeftColor\",\n                \"reflectionRightColor\",\n                \"emissiveLeftColor\",\n                \"emissiveRightColor\",\n                \"refractionLeftColor\",\n                \"refractionRightColor\",\n                \"vRefractionPosition\",\n                \"vRefractionSize\",\n                \"logarithmicDepthConstant\",\n                \"vTangentSpaceParams\",\n                \"alphaCutOff\",\n                \"boneTextureWidth\",\n                \"morphTargetTextureInfo\",\n                \"morphTargetTextureIndices\",\n                \"cameraInfo\",\n            ];\n            const samplers = [\n                \"diffuseSampler\",\n                \"ambientSampler\",\n                \"opacitySampler\",\n                \"reflectionCubeSampler\",\n                \"reflection2DSampler\",\n                \"emissiveSampler\",\n                \"specularSampler\",\n                \"bumpSampler\",\n                \"lightmapSampler\",\n                \"refractionCubeSampler\",\n                \"refraction2DSampler\",\n                \"boneSampler\",\n                \"morphTargets\",\n                \"oitDepthSampler\",\n                \"oitFrontColorSampler\",\n                \"areaLightsLTC1Sampler\",\n                \"areaLightsLTC2Sampler\",\n            ];\n            PrepareUniformsAndSamplersForIBL(uniforms, samplers, false);\n            const uniformBuffers = [\"Material\", \"Scene\", \"Mesh\"];\n            const indexParameters = { maxSimultaneousLights: this._maxSimultaneousLights, maxSimultaneousMorphTargets: defines.NUM_MORPH_INFLUENCERS };\n            this._eventInfo.fallbacks = fallbacks;\n            this._eventInfo.fallbackRank = 0;\n            this._eventInfo.defines = defines;\n            this._eventInfo.uniforms = uniforms;\n            this._eventInfo.attributes = attribs;\n            this._eventInfo.samplers = samplers;\n            this._eventInfo.uniformBuffersNames = uniformBuffers;\n            this._eventInfo.customCode = undefined;\n            this._eventInfo.mesh = mesh;\n            this._eventInfo.indexParameters = indexParameters;\n            this._callbackPluginEventGeneric(128 /* MaterialPluginEvent.PrepareEffect */, this._eventInfo);\n            MaterialHelperGeometryRendering.AddUniformsAndSamplers(uniforms, samplers);\n            PrePassConfiguration.AddUniforms(uniforms);\n            PrePassConfiguration.AddSamplers(samplers);\n            if (ImageProcessingConfiguration) {\n                ImageProcessingConfiguration.PrepareUniforms(uniforms, defines);\n                ImageProcessingConfiguration.PrepareSamplers(samplers, defines);\n            }\n            PrepareUniformsAndSamplersList({\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: defines,\n                maxSimultaneousLights: this._maxSimultaneousLights,\n            });\n            AddClipPlaneUniforms(uniforms);\n            const csnrOptions = {};\n            if (this.customShaderNameResolve) {\n                shaderName = this.customShaderNameResolve(shaderName, uniforms, uniformBuffers, samplers, defines, attribs, csnrOptions);\n            }\n            const join = defines.toString();\n            const previousEffect = subMesh.effect;\n            let effect = scene.getEngine().createEffect(shaderName, {\n                attributes: attribs,\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: join,\n                fallbacks: fallbacks,\n                onCompiled: this.onCompiled,\n                onError: this.onError,\n                indexParameters,\n                processFinalCode: csnrOptions.processFinalCode,\n                processCodeAfterIncludes: this._eventInfo.customCode,\n                multiTarget: defines.PREPASS,\n                shaderLanguage: this._shaderLanguage,\n                extraInitializationsAsync: this._shadersLoaded\n                    ? undefined\n                    : async () => {\n                        if (this._shaderLanguage === 1 /* ShaderLanguage.WGSL */) {\n                            await Promise.all([import(\"../ShadersWGSL/default.vertex\"), import(\"../ShadersWGSL/default.fragment\")]);\n                        }\n                        else {\n                            await Promise.all([import(\"../Shaders/default.vertex\"), import(\"../Shaders/default.fragment\")]);\n                        }\n                        this._shadersLoaded = true;\n                    },\n            }, engine);\n            this._eventInfo.customCode = undefined;\n            if (effect) {\n                if (this._onEffectCreatedObservable) {\n                    onCreatedEffectParameters.effect = effect;\n                    onCreatedEffectParameters.subMesh = subMesh;\n                    this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\n                }\n                // Use previous effect while new one is compiling\n                if (this.allowShaderHotSwapping && previousEffect && !effect.isReady()) {\n                    effect = previousEffect;\n                    defines.markAsUnprocessed();\n                    forceWasNotReadyPreviously = this.isFrozen;\n                    if (lightDisposed) {\n                        // re register in case it takes more than one frame.\n                        defines._areLightsDisposed = true;\n                        return false;\n                    }\n                }\n                else {\n                    scene.resetCachedMaterial();\n                    subMesh.setEffect(effect, defines, this._materialContext);\n                }\n            }\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n        defines._renderId = scene.getRenderId();\n        drawWrapper._wasPreviouslyReady = forceWasNotReadyPreviously ? false : true;\n        drawWrapper._wasPreviouslyUsingInstances = useInstances;\n        this._checkScenePerformancePriority();\n        return true;\n    }\n    /**\n     * Builds the material UBO layouts.\n     * Used internally during the effect preparation.\n     */\n    buildUniformLayout() {\n        // Order is important !\n        const ubo = this._uniformBuffer;\n        ubo.addUniform(\"diffuseLeftColor\", 4);\n        ubo.addUniform(\"diffuseRightColor\", 4);\n        ubo.addUniform(\"opacityParts\", 4);\n        ubo.addUniform(\"reflectionLeftColor\", 4);\n        ubo.addUniform(\"reflectionRightColor\", 4);\n        ubo.addUniform(\"refractionLeftColor\", 4);\n        ubo.addUniform(\"refractionRightColor\", 4);\n        ubo.addUniform(\"emissiveLeftColor\", 4);\n        ubo.addUniform(\"emissiveRightColor\", 4);\n        ubo.addUniform(\"vDiffuseInfos\", 2);\n        ubo.addUniform(\"vAmbientInfos\", 2);\n        ubo.addUniform(\"vOpacityInfos\", 2);\n        ubo.addUniform(\"vEmissiveInfos\", 2);\n        ubo.addUniform(\"vLightmapInfos\", 2);\n        ubo.addUniform(\"vSpecularInfos\", 2);\n        ubo.addUniform(\"vBumpInfos\", 3);\n        ubo.addUniform(\"diffuseMatrix\", 16);\n        ubo.addUniform(\"ambientMatrix\", 16);\n        ubo.addUniform(\"opacityMatrix\", 16);\n        ubo.addUniform(\"emissiveMatrix\", 16);\n        ubo.addUniform(\"lightmapMatrix\", 16);\n        ubo.addUniform(\"specularMatrix\", 16);\n        ubo.addUniform(\"bumpMatrix\", 16);\n        ubo.addUniform(\"vTangentSpaceParams\", 2);\n        ubo.addUniform(\"pointSize\", 1);\n        ubo.addUniform(\"alphaCutOff\", 1);\n        ubo.addUniform(\"refractionMatrix\", 16);\n        ubo.addUniform(\"vRefractionInfos\", 4);\n        ubo.addUniform(\"vRefractionPosition\", 3);\n        ubo.addUniform(\"vRefractionSize\", 3);\n        ubo.addUniform(\"vSpecularColor\", 4);\n        ubo.addUniform(\"vEmissiveColor\", 3);\n        ubo.addUniform(\"vDiffuseColor\", 4);\n        ubo.addUniform(\"vAmbientColor\", 3);\n        ubo.addUniform(\"cameraInfo\", 4);\n        PrepareUniformLayoutForIBL(ubo, false, true);\n        super.buildUniformLayout();\n    }\n    /**\n     * Binds the submesh to this material by preparing the effect and shader to draw\n     * @param world defines the world transformation matrix\n     * @param mesh defines the mesh containing the submesh\n     * @param subMesh defines the submesh to bind the material to\n     */\n    bindForSubMesh(world, mesh, subMesh) {\n        const scene = this.getScene();\n        const defines = subMesh.materialDefines;\n        if (!defines) {\n            return;\n        }\n        const effect = subMesh.effect;\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n        // Matrices Mesh.\n        mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\n        mesh.transferToEffect(world);\n        // Binding unconditionally\n        this._uniformBuffer.bindToEffect(effect, \"Material\");\n        this.prePassConfiguration.bindForSubMesh(this._activeEffect, scene, mesh, world, this.isFrozen);\n        MaterialHelperGeometryRendering.Bind(scene.getEngine().currentRenderPassId, this._activeEffect, mesh, world, this);\n        const camera = scene.activeCamera;\n        if (camera) {\n            this._uniformBuffer.updateFloat4(\"cameraInfo\", camera.minZ, camera.maxZ, 0, 0);\n        }\n        else {\n            this._uniformBuffer.updateFloat4(\"cameraInfo\", 0, 0, 0, 0);\n        }\n        this._eventInfo.subMesh = subMesh;\n        this._callbackPluginEventHardBindForSubMesh(this._eventInfo);\n        // Normal Matrix\n        if (defines.OBJECTSPACE_NORMALMAP) {\n            world.toNormalMatrix(this._normalMatrix);\n            this.bindOnlyNormalMatrix(this._normalMatrix);\n        }\n        const mustRebind = this._mustRebind(scene, effect, subMesh, mesh.visibility);\n        // Bones\n        BindBonesParameters(mesh, effect);\n        const ubo = this._uniformBuffer;\n        if (mustRebind) {\n            this.bindViewProjection(effect);\n            if (!ubo.useUbo || !this.isFrozen || !ubo.isSync || subMesh._drawWrapper._forceRebindOnNextCall) {\n                if (StandardMaterial.FresnelEnabled && defines.FRESNEL) {\n                    // Fresnel\n                    if (this.diffuseFresnelParameters && this.diffuseFresnelParameters.isEnabled) {\n                        ubo.updateColor4(\"diffuseLeftColor\", this.diffuseFresnelParameters.leftColor, this.diffuseFresnelParameters.power);\n                        ubo.updateColor4(\"diffuseRightColor\", this.diffuseFresnelParameters.rightColor, this.diffuseFresnelParameters.bias);\n                    }\n                    if (this.opacityFresnelParameters && this.opacityFresnelParameters.isEnabled) {\n                        ubo.updateColor4(\"opacityParts\", new Color3(this.opacityFresnelParameters.leftColor.toLuminance(), this.opacityFresnelParameters.rightColor.toLuminance(), this.opacityFresnelParameters.bias), this.opacityFresnelParameters.power);\n                    }\n                    if (this.reflectionFresnelParameters && this.reflectionFresnelParameters.isEnabled) {\n                        ubo.updateColor4(\"reflectionLeftColor\", this.reflectionFresnelParameters.leftColor, this.reflectionFresnelParameters.power);\n                        ubo.updateColor4(\"reflectionRightColor\", this.reflectionFresnelParameters.rightColor, this.reflectionFresnelParameters.bias);\n                    }\n                    if (this.refractionFresnelParameters && this.refractionFresnelParameters.isEnabled) {\n                        ubo.updateColor4(\"refractionLeftColor\", this.refractionFresnelParameters.leftColor, this.refractionFresnelParameters.power);\n                        ubo.updateColor4(\"refractionRightColor\", this.refractionFresnelParameters.rightColor, this.refractionFresnelParameters.bias);\n                    }\n                    if (this.emissiveFresnelParameters && this.emissiveFresnelParameters.isEnabled) {\n                        ubo.updateColor4(\"emissiveLeftColor\", this.emissiveFresnelParameters.leftColor, this.emissiveFresnelParameters.power);\n                        ubo.updateColor4(\"emissiveRightColor\", this.emissiveFresnelParameters.rightColor, this.emissiveFresnelParameters.bias);\n                    }\n                }\n                // Textures\n                if (scene.texturesEnabled) {\n                    if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\n                        ubo.updateFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\n                        BindTextureMatrix(this._diffuseTexture, ubo, \"diffuse\");\n                    }\n                    if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\n                        ubo.updateFloat2(\"vAmbientInfos\", this._ambientTexture.coordinatesIndex, this._ambientTexture.level);\n                        BindTextureMatrix(this._ambientTexture, ubo, \"ambient\");\n                    }\n                    if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\n                        ubo.updateFloat2(\"vOpacityInfos\", this._opacityTexture.coordinatesIndex, this._opacityTexture.level);\n                        BindTextureMatrix(this._opacityTexture, ubo, \"opacity\");\n                    }\n                    if (this._hasAlphaChannel()) {\n                        ubo.updateFloat(\"alphaCutOff\", this.alphaCutOff);\n                    }\n                    BindIBLParameters(scene, defines, ubo, Color3.White(), this._reflectionTexture, false, false, true, false, false, false, this.roughness);\n                    if (!this._reflectionTexture || !StandardMaterial.ReflectionTextureEnabled) {\n                        ubo.updateFloat2(\"vReflectionInfos\", 0.0, this.roughness);\n                    }\n                    if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\n                        ubo.updateFloat2(\"vEmissiveInfos\", this._emissiveTexture.coordinatesIndex, this._emissiveTexture.level);\n                        BindTextureMatrix(this._emissiveTexture, ubo, \"emissive\");\n                    }\n                    if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\n                        ubo.updateFloat2(\"vLightmapInfos\", this._lightmapTexture.coordinatesIndex, this._lightmapTexture.level);\n                        BindTextureMatrix(this._lightmapTexture, ubo, \"lightmap\");\n                    }\n                    if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\n                        ubo.updateFloat2(\"vSpecularInfos\", this._specularTexture.coordinatesIndex, this._specularTexture.level);\n                        BindTextureMatrix(this._specularTexture, ubo, \"specular\");\n                    }\n                    if (this._bumpTexture && scene.getEngine().getCaps().standardDerivatives && StandardMaterial.BumpTextureEnabled) {\n                        ubo.updateFloat3(\"vBumpInfos\", this._bumpTexture.coordinatesIndex, 1.0 / this._bumpTexture.level, this.parallaxScaleBias);\n                        BindTextureMatrix(this._bumpTexture, ubo, \"bump\");\n                        if (scene._mirroredCameraPosition) {\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? 1.0 : -1.0, this._invertNormalMapY ? 1.0 : -1.0);\n                        }\n                        else {\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? -1.0 : 1.0, this._invertNormalMapY ? -1.0 : 1.0);\n                        }\n                    }\n                    if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\n                        let depth = 1.0;\n                        if (!this._refractionTexture.isCube) {\n                            ubo.updateMatrix(\"refractionMatrix\", this._refractionTexture.getReflectionTextureMatrix());\n                            if (this._refractionTexture.depth) {\n                                depth = this._refractionTexture.depth;\n                            }\n                        }\n                        ubo.updateFloat4(\"vRefractionInfos\", this._refractionTexture.level, this.indexOfRefraction, depth, this.invertRefractionY ? -1 : 1);\n                        if (this._refractionTexture.boundingBoxSize) {\n                            const cubeTexture = this._refractionTexture;\n                            ubo.updateVector3(\"vRefractionPosition\", cubeTexture.boundingBoxPosition);\n                            ubo.updateVector3(\"vRefractionSize\", cubeTexture.boundingBoxSize);\n                        }\n                    }\n                }\n                // Point size\n                if (this.pointsCloud) {\n                    ubo.updateFloat(\"pointSize\", this.pointSize);\n                }\n                ubo.updateColor4(\"vSpecularColor\", this.specularColor, this.specularPower);\n                ubo.updateColor3(\"vEmissiveColor\", StandardMaterial.EmissiveTextureEnabled ? this.emissiveColor : Color3.BlackReadOnly);\n                ubo.updateColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha);\n                scene.ambientColor.multiplyToRef(this.ambientColor, this._globalAmbientColor);\n                ubo.updateColor3(\"vAmbientColor\", this._globalAmbientColor);\n            }\n            // Textures\n            if (scene.texturesEnabled) {\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\n                    effect.setTexture(\"diffuseSampler\", this._diffuseTexture);\n                }\n                if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\n                    effect.setTexture(\"ambientSampler\", this._ambientTexture);\n                }\n                if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\n                    effect.setTexture(\"opacitySampler\", this._opacityTexture);\n                }\n                if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\n                    if (this._reflectionTexture.isCube) {\n                        effect.setTexture(\"reflectionCubeSampler\", this._reflectionTexture);\n                    }\n                    else {\n                        effect.setTexture(\"reflection2DSampler\", this._reflectionTexture);\n                    }\n                }\n                if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\n                    effect.setTexture(\"emissiveSampler\", this._emissiveTexture);\n                }\n                if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\n                    effect.setTexture(\"lightmapSampler\", this._lightmapTexture);\n                }\n                if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\n                    effect.setTexture(\"specularSampler\", this._specularTexture);\n                }\n                if (this._bumpTexture && scene.getEngine().getCaps().standardDerivatives && StandardMaterial.BumpTextureEnabled) {\n                    effect.setTexture(\"bumpSampler\", this._bumpTexture);\n                }\n                if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\n                    if (this._refractionTexture.isCube) {\n                        effect.setTexture(\"refractionCubeSampler\", this._refractionTexture);\n                    }\n                    else {\n                        effect.setTexture(\"refraction2DSampler\", this._refractionTexture);\n                    }\n                }\n            }\n            // OIT with depth peeling\n            if (this.getScene().useOrderIndependentTransparency && this.needAlphaBlendingForMesh(mesh)) {\n                this.getScene().depthPeelingRenderer.bind(effect);\n            }\n            this._eventInfo.subMesh = subMesh;\n            this._callbackPluginEventBindForSubMesh(this._eventInfo);\n            // Clip plane\n            BindClipPlane(effect, this, scene);\n            // Colors\n            this.bindEyePosition(effect);\n        }\n        else if (scene.getEngine()._features.needToAlwaysBindUniformBuffers) {\n            this._needToBindSceneUbo = true;\n        }\n        if (mustRebind || !this.isFrozen) {\n            // Lights\n            if (scene.lightsEnabled && !this._disableLighting) {\n                BindLights(scene, mesh, effect, defines, this._maxSimultaneousLights);\n            }\n            // View\n            if ((scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) ||\n                this._reflectionTexture ||\n                this._refractionTexture ||\n                mesh.receiveShadows ||\n                defines.PREPASS ||\n                defines[\"CLUSTLIGHT_BATCH\"]) {\n                this.bindView(effect);\n            }\n            // Fog\n            BindFogParameters(scene, mesh, effect);\n            // Morph targets\n            if (defines.NUM_MORPH_INFLUENCERS) {\n                BindMorphTargetParameters(mesh, effect);\n            }\n            if (defines.BAKED_VERTEX_ANIMATION_TEXTURE) {\n                mesh.bakedVertexAnimationManager?.bind(effect, defines.INSTANCES);\n            }\n            // Log. depth\n            if (this.useLogarithmicDepth) {\n                BindLogDepth(defines, effect, scene);\n            }\n            // image processing\n            if (this._imageProcessingConfiguration && !this._imageProcessingConfiguration.applyByPostProcess) {\n                this._imageProcessingConfiguration.bind(this._activeEffect);\n            }\n        }\n        this._afterBind(mesh, this._activeEffect, subMesh);\n        ubo.update();\n    }\n    /**\n     * Get the list of animatables in the material.\n     * @returns the list of animatables object used in the material\n     */\n    getAnimatables() {\n        const results = super.getAnimatables();\n        if (this._diffuseTexture && this._diffuseTexture.animations && this._diffuseTexture.animations.length > 0) {\n            results.push(this._diffuseTexture);\n        }\n        if (this._ambientTexture && this._ambientTexture.animations && this._ambientTexture.animations.length > 0) {\n            results.push(this._ambientTexture);\n        }\n        if (this._opacityTexture && this._opacityTexture.animations && this._opacityTexture.animations.length > 0) {\n            results.push(this._opacityTexture);\n        }\n        if (this._reflectionTexture && this._reflectionTexture.animations && this._reflectionTexture.animations.length > 0) {\n            results.push(this._reflectionTexture);\n        }\n        if (this._emissiveTexture && this._emissiveTexture.animations && this._emissiveTexture.animations.length > 0) {\n            results.push(this._emissiveTexture);\n        }\n        if (this._specularTexture && this._specularTexture.animations && this._specularTexture.animations.length > 0) {\n            results.push(this._specularTexture);\n        }\n        if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\n            results.push(this._bumpTexture);\n        }\n        if (this._lightmapTexture && this._lightmapTexture.animations && this._lightmapTexture.animations.length > 0) {\n            results.push(this._lightmapTexture);\n        }\n        if (this._refractionTexture && this._refractionTexture.animations && this._refractionTexture.animations.length > 0) {\n            results.push(this._refractionTexture);\n        }\n        return results;\n    }\n    /**\n     * Gets the active textures from the material\n     * @returns an array of textures\n     */\n    getActiveTextures() {\n        const activeTextures = super.getActiveTextures();\n        if (this._diffuseTexture) {\n            activeTextures.push(this._diffuseTexture);\n        }\n        if (this._ambientTexture) {\n            activeTextures.push(this._ambientTexture);\n        }\n        if (this._opacityTexture) {\n            activeTextures.push(this._opacityTexture);\n        }\n        if (this._reflectionTexture) {\n            activeTextures.push(this._reflectionTexture);\n        }\n        if (this._emissiveTexture) {\n            activeTextures.push(this._emissiveTexture);\n        }\n        if (this._specularTexture) {\n            activeTextures.push(this._specularTexture);\n        }\n        if (this._bumpTexture) {\n            activeTextures.push(this._bumpTexture);\n        }\n        if (this._lightmapTexture) {\n            activeTextures.push(this._lightmapTexture);\n        }\n        if (this._refractionTexture) {\n            activeTextures.push(this._refractionTexture);\n        }\n        return activeTextures;\n    }\n    /**\n     * Specifies if the material uses a texture\n     * @param texture defines the texture to check against the material\n     * @returns a boolean specifying if the material uses the texture\n     */\n    hasTexture(texture) {\n        if (super.hasTexture(texture)) {\n            return true;\n        }\n        if (this._diffuseTexture === texture) {\n            return true;\n        }\n        if (this._ambientTexture === texture) {\n            return true;\n        }\n        if (this._opacityTexture === texture) {\n            return true;\n        }\n        if (this._reflectionTexture === texture) {\n            return true;\n        }\n        if (this._emissiveTexture === texture) {\n            return true;\n        }\n        if (this._specularTexture === texture) {\n            return true;\n        }\n        if (this._bumpTexture === texture) {\n            return true;\n        }\n        if (this._lightmapTexture === texture) {\n            return true;\n        }\n        if (this._refractionTexture === texture) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Disposes the material\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\n     * @param forceDisposeTextures specifies if textures should be forcefully disposed\n     */\n    dispose(forceDisposeEffect, forceDisposeTextures) {\n        if (forceDisposeTextures) {\n            this._diffuseTexture?.dispose();\n            this._ambientTexture?.dispose();\n            this._opacityTexture?.dispose();\n            this._reflectionTexture?.dispose();\n            this._emissiveTexture?.dispose();\n            this._specularTexture?.dispose();\n            this._bumpTexture?.dispose();\n            this._lightmapTexture?.dispose();\n            this._refractionTexture?.dispose();\n        }\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n        }\n        super.dispose(forceDisposeEffect, forceDisposeTextures);\n    }\n    /**\n     * Makes a duplicate of the material, and gives it a new name\n     * @param name defines the new name for the duplicated material\n     * @param cloneTexturesOnlyOnce - if a texture is used in more than one channel (e.g diffuse and opacity), only clone it once and reuse it on the other channels. Default false.\n     * @param rootUrl defines the root URL to use to load textures\n     * @returns the cloned material\n     */\n    clone(name, cloneTexturesOnlyOnce = true, rootUrl = \"\") {\n        const result = SerializationHelper.Clone(() => new StandardMaterial(name, this.getScene()), this, { cloneTexturesOnlyOnce });\n        result.name = name;\n        result.id = name;\n        this.stencil.copyTo(result.stencil);\n        this._clonePlugins(result, rootUrl);\n        return result;\n    }\n    /**\n     * Creates a standard material from parsed material data\n     * @param source defines the JSON representation of the material\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\n     * @returns a new standard material\n     */\n    static Parse(source, scene, rootUrl) {\n        const material = SerializationHelper.Parse(() => new StandardMaterial(source.name, scene), source, scene, rootUrl);\n        if (source.stencil) {\n            material.stencil.parse(source.stencil, scene, rootUrl);\n        }\n        Material._ParsePlugins(source, material, scene, rootUrl);\n        return material;\n    }\n    // Flags used to enable or disable a type of texture for all Standard Materials\n    /**\n     * Are diffuse textures enabled in the application.\n     */\n    static get DiffuseTextureEnabled() {\n        return MaterialFlags.DiffuseTextureEnabled;\n    }\n    static set DiffuseTextureEnabled(value) {\n        MaterialFlags.DiffuseTextureEnabled = value;\n    }\n    /**\n     * Are detail textures enabled in the application.\n     */\n    static get DetailTextureEnabled() {\n        return MaterialFlags.DetailTextureEnabled;\n    }\n    static set DetailTextureEnabled(value) {\n        MaterialFlags.DetailTextureEnabled = value;\n    }\n    /**\n     * Are ambient textures enabled in the application.\n     */\n    static get AmbientTextureEnabled() {\n        return MaterialFlags.AmbientTextureEnabled;\n    }\n    static set AmbientTextureEnabled(value) {\n        MaterialFlags.AmbientTextureEnabled = value;\n    }\n    /**\n     * Are opacity textures enabled in the application.\n     */\n    static get OpacityTextureEnabled() {\n        return MaterialFlags.OpacityTextureEnabled;\n    }\n    static set OpacityTextureEnabled(value) {\n        MaterialFlags.OpacityTextureEnabled = value;\n    }\n    /**\n     * Are reflection textures enabled in the application.\n     */\n    static get ReflectionTextureEnabled() {\n        return MaterialFlags.ReflectionTextureEnabled;\n    }\n    static set ReflectionTextureEnabled(value) {\n        MaterialFlags.ReflectionTextureEnabled = value;\n    }\n    /**\n     * Are emissive textures enabled in the application.\n     */\n    static get EmissiveTextureEnabled() {\n        return MaterialFlags.EmissiveTextureEnabled;\n    }\n    static set EmissiveTextureEnabled(value) {\n        MaterialFlags.EmissiveTextureEnabled = value;\n    }\n    /**\n     * Are specular textures enabled in the application.\n     */\n    static get SpecularTextureEnabled() {\n        return MaterialFlags.SpecularTextureEnabled;\n    }\n    static set SpecularTextureEnabled(value) {\n        MaterialFlags.SpecularTextureEnabled = value;\n    }\n    /**\n     * Are bump textures enabled in the application.\n     */\n    static get BumpTextureEnabled() {\n        return MaterialFlags.BumpTextureEnabled;\n    }\n    static set BumpTextureEnabled(value) {\n        MaterialFlags.BumpTextureEnabled = value;\n    }\n    /**\n     * Are lightmap textures enabled in the application.\n     */\n    static get LightmapTextureEnabled() {\n        return MaterialFlags.LightmapTextureEnabled;\n    }\n    static set LightmapTextureEnabled(value) {\n        MaterialFlags.LightmapTextureEnabled = value;\n    }\n    /**\n     * Are refraction textures enabled in the application.\n     */\n    static get RefractionTextureEnabled() {\n        return MaterialFlags.RefractionTextureEnabled;\n    }\n    static set RefractionTextureEnabled(value) {\n        MaterialFlags.RefractionTextureEnabled = value;\n    }\n    /**\n     * Are color grading textures enabled in the application.\n     */\n    static get ColorGradingTextureEnabled() {\n        return MaterialFlags.ColorGradingTextureEnabled;\n    }\n    static set ColorGradingTextureEnabled(value) {\n        MaterialFlags.ColorGradingTextureEnabled = value;\n    }\n    /**\n     * Are fresnels enabled in the application.\n     */\n    static get FresnelEnabled() {\n        return MaterialFlags.FresnelEnabled;\n    }\n    static set FresnelEnabled(value) {\n        MaterialFlags.FresnelEnabled = value;\n    }\n}\n/**\n * Force all the standard materials to compile to glsl even on WebGPU engines.\n * False by default. This is mostly meant for backward compatibility.\n */\nStandardMaterial.ForceGLSL = false;\n__decorate([\n    serializeAsTexture(\"diffuseTexture\")\n], StandardMaterial.prototype, \"_diffuseTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\n], StandardMaterial.prototype, \"diffuseTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"ambientTexture\")\n], StandardMaterial.prototype, \"_ambientTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"ambientTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"opacityTexture\")\n], StandardMaterial.prototype, \"_opacityTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\n], StandardMaterial.prototype, \"opacityTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"reflectionTexture\")\n], StandardMaterial.prototype, \"_reflectionTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"reflectionTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"emissiveTexture\")\n], StandardMaterial.prototype, \"_emissiveTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"emissiveTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"specularTexture\")\n], StandardMaterial.prototype, \"_specularTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"specularTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"bumpTexture\")\n], StandardMaterial.prototype, \"_bumpTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"bumpTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"lightmapTexture\")\n], StandardMaterial.prototype, \"_lightmapTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"lightmapTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"refractionTexture\")\n], StandardMaterial.prototype, \"_refractionTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"refractionTexture\", void 0);\n__decorate([\n    serializeAsColor3(\"ambient\")\n], StandardMaterial.prototype, \"ambientColor\", void 0);\n__decorate([\n    serializeAsColor3(\"diffuse\")\n], StandardMaterial.prototype, \"diffuseColor\", void 0);\n__decorate([\n    serializeAsColor3(\"specular\")\n], StandardMaterial.prototype, \"specularColor\", void 0);\n__decorate([\n    serializeAsColor3(\"emissive\")\n], StandardMaterial.prototype, \"emissiveColor\", void 0);\n__decorate([\n    serialize()\n], StandardMaterial.prototype, \"specularPower\", void 0);\n__decorate([\n    serialize(\"useAlphaFromDiffuseTexture\")\n], StandardMaterial.prototype, \"_useAlphaFromDiffuseTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\n], StandardMaterial.prototype, \"useAlphaFromDiffuseTexture\", void 0);\n__decorate([\n    serialize(\"useEmissiveAsIllumination\")\n], StandardMaterial.prototype, \"_useEmissiveAsIllumination\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useEmissiveAsIllumination\", void 0);\n__decorate([\n    serialize(\"linkEmissiveWithDiffuse\")\n], StandardMaterial.prototype, \"_linkEmissiveWithDiffuse\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"linkEmissiveWithDiffuse\", void 0);\n__decorate([\n    serialize(\"useSpecularOverAlpha\")\n], StandardMaterial.prototype, \"_useSpecularOverAlpha\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useSpecularOverAlpha\", void 0);\n__decorate([\n    serialize(\"useReflectionOverAlpha\")\n], StandardMaterial.prototype, \"_useReflectionOverAlpha\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useReflectionOverAlpha\", void 0);\n__decorate([\n    serialize(\"disableLighting\")\n], StandardMaterial.prototype, \"_disableLighting\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n], StandardMaterial.prototype, \"disableLighting\", void 0);\n__decorate([\n    serialize(\"useObjectSpaceNormalMap\")\n], StandardMaterial.prototype, \"_useObjectSpaceNormalMap\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useObjectSpaceNormalMap\", void 0);\n__decorate([\n    serialize(\"useParallax\")\n], StandardMaterial.prototype, \"_useParallax\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useParallax\", void 0);\n__decorate([\n    serialize(\"useParallaxOcclusion\")\n], StandardMaterial.prototype, \"_useParallaxOcclusion\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useParallaxOcclusion\", void 0);\n__decorate([\n    serialize()\n], StandardMaterial.prototype, \"parallaxScaleBias\", void 0);\n__decorate([\n    serialize(\"roughness\")\n], StandardMaterial.prototype, \"_roughness\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"roughness\", void 0);\n__decorate([\n    serialize()\n], StandardMaterial.prototype, \"indexOfRefraction\", void 0);\n__decorate([\n    serialize()\n], StandardMaterial.prototype, \"invertRefractionY\", void 0);\n__decorate([\n    serialize()\n], StandardMaterial.prototype, \"alphaCutOff\", void 0);\n__decorate([\n    serialize(\"useLightmapAsShadowmap\")\n], StandardMaterial.prototype, \"_useLightmapAsShadowmap\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useLightmapAsShadowmap\", void 0);\n__decorate([\n    serializeAsFresnelParameters(\"diffuseFresnelParameters\")\n], StandardMaterial.prototype, \"_diffuseFresnelParameters\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\n], StandardMaterial.prototype, \"diffuseFresnelParameters\", void 0);\n__decorate([\n    serializeAsFresnelParameters(\"opacityFresnelParameters\")\n], StandardMaterial.prototype, \"_opacityFresnelParameters\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsFresnelAndMiscDirty\")\n], StandardMaterial.prototype, \"opacityFresnelParameters\", void 0);\n__decorate([\n    serializeAsFresnelParameters(\"reflectionFresnelParameters\")\n], StandardMaterial.prototype, \"_reflectionFresnelParameters\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\n], StandardMaterial.prototype, \"reflectionFresnelParameters\", void 0);\n__decorate([\n    serializeAsFresnelParameters(\"refractionFresnelParameters\")\n], StandardMaterial.prototype, \"_refractionFresnelParameters\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\n], StandardMaterial.prototype, \"refractionFresnelParameters\", void 0);\n__decorate([\n    serializeAsFresnelParameters(\"emissiveFresnelParameters\")\n], StandardMaterial.prototype, \"_emissiveFresnelParameters\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\n], StandardMaterial.prototype, \"emissiveFresnelParameters\", void 0);\n__decorate([\n    serialize(\"useReflectionFresnelFromSpecular\")\n], StandardMaterial.prototype, \"_useReflectionFresnelFromSpecular\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\n], StandardMaterial.prototype, \"useReflectionFresnelFromSpecular\", void 0);\n__decorate([\n    serialize(\"useGlossinessFromSpecularMapAlpha\")\n], StandardMaterial.prototype, \"_useGlossinessFromSpecularMapAlpha\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useGlossinessFromSpecularMapAlpha\", void 0);\n__decorate([\n    serialize(\"maxSimultaneousLights\")\n], StandardMaterial.prototype, \"_maxSimultaneousLights\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n], StandardMaterial.prototype, \"maxSimultaneousLights\", void 0);\n__decorate([\n    serialize(\"invertNormalMapX\")\n], StandardMaterial.prototype, \"_invertNormalMapX\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"invertNormalMapX\", void 0);\n__decorate([\n    serialize(\"invertNormalMapY\")\n], StandardMaterial.prototype, \"_invertNormalMapY\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"invertNormalMapY\", void 0);\n__decorate([\n    serialize(\"twoSidedLighting\")\n], StandardMaterial.prototype, \"_twoSidedLighting\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"twoSidedLighting\", void 0);\n__decorate([\n    serialize(\"applyDecalMapAfterDetailMap\")\n], StandardMaterial.prototype, \"_applyDecalMapAfterDetailMap\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\n], StandardMaterial.prototype, \"applyDecalMapAfterDetailMap\", void 0);\nRegisterClass(\"BABYLON.StandardMaterial\", StandardMaterial);\nScene.DefaultMaterialFactory = (scene) => {\n    return new StandardMaterial(\"default material\", scene);\n};\n//# sourceMappingURL=standardMaterial.js.map"],"names":["onCreatedEffectParameters","effect","subMesh","StandardMaterialDefinesBase","UVDefinesMixin","MaterialDefines","StandardMaterialDefines","ImageProcessingDefinesMixin","constructor","externalProperties","super","this","DIFFUSE","DIFFUSEDIRECTUV","BAKED_VERTEX_ANIMATION_TEXTURE","AMBIENT","AMBIENTDIRECTUV","OPACITY","OPACITYDIRECTUV","OPACITYRGB","REFLECTION","EMISSIVE","EMISSIVEDIRECTUV","SPECULAR","SPECULARDIRECTUV","BUMP","BUMPDIRECTUV","PARALLAX","PARALLAX_RHS","PARALLAXOCCLUSION","SPECULAROVERALPHA","CLIPPLANE","CLIPPLANE2","CLIPPLANE3","CLIPPLANE4","CLIPPLANE5","CLIPPLANE6","ALPHATEST","DEPTHPREPASS","ALPHAFROMDIFFUSE","POINTSIZE","FOG","SPECULARTERM","DIFFUSEFRESNEL","OPACITYFRESNEL","REFLECTIONFRESNEL","REFRACTIONFRESNEL","EMISSIVEFRESNEL","FRESNEL","NORMAL","TANGENT","VERTEXCOLOR","VERTEXALPHA","NUM_BONE_INFLUENCERS","BonesPerMesh","BONETEXTURE","BONES_VELOCITY_ENABLED","INSTANCES","THIN_INSTANCES","INSTANCESCOLOR","GLOSSINESS","ROUGHNESS","EMISSIVEASILLUMINATION","LINKEMISSIVEWITHDIFFUSE","REFLECTIONFRESNELFROMSPECULAR","LIGHTMAP","LIGHTMAPDIRECTUV","OBJECTSPACE_NORMALMAP","USELIGHTMAPASSHADOWMAP","REFLECTIONMAP_3D","REFLECTIONMAP_SPHERICAL","REFLECTIONMAP_PLANAR","REFLECTIONMAP_CUBIC","USE_LOCAL_REFLECTIONMAP_CUBIC","USE_LOCAL_REFRACTIONMAP_CUBIC","REFLECTIONMAP_PROJECTION","REFLECTIONMAP_SKYBOX","REFLECTIONMAP_EXPLICIT","REFLECTIONMAP_EQUIRECTANGULAR","REFLECTIONMAP_EQUIRECTANGULAR_FIXED","REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED","REFLECTIONMAP_OPPOSITEZ","INVERTCUBICMAP","LOGARITHMICDEPTH","REFRACTION","REFRACTIONMAP_3D","REFLECTIONOVERALPHA","TWOSIDEDLIGHTING","SHADOWFLOAT","MORPHTARGETS","MORPHTARGETS_POSITION","MORPHTARGETS_NORMAL","MORPHTARGETS_TANGENT","MORPHTARGETS_UV","MORPHTARGETS_UV2","MORPHTARGETS_COLOR","MORPHTARGETTEXTURE_HASPOSITIONS","MORPHTARGETTEXTURE_HASNORMALS","MORPHTARGETTEXTURE_HASTANGENTS","MORPHTARGETTEXTURE_HASUVS","MORPHTARGETTEXTURE_HASUV2S","MORPHTARGETTEXTURE_HASCOLORS","NUM_MORPH_INFLUENCERS","MORPHTARGETS_TEXTURE","NONUNIFORMSCALING","PREMULTIPLYALPHA","ALPHATEST_AFTERALLALPHACOMPUTATIONS","ALPHABLEND","PREPASS","PREPASS_COLOR","PREPASS_COLOR_INDEX","PREPASS_IRRADIANCE","PREPASS_IRRADIANCE_INDEX","PREPASS_ALBEDO","PREPASS_ALBEDO_INDEX","PREPASS_ALBEDO_SQRT","PREPASS_ALBEDO_SQRT_INDEX","PREPASS_DEPTH","PREPASS_DEPTH_INDEX","PREPASS_SCREENSPACE_DEPTH","PREPASS_SCREENSPACE_DEPTH_INDEX","PREPASS_NORMALIZED_VIEW_DEPTH","PREPASS_NORMALIZED_VIEW_DEPTH_INDEX","PREPASS_NORMAL","PREPASS_NORMAL_INDEX","PREPASS_NORMAL_WORLDSPACE","PREPASS_WORLD_NORMAL","PREPASS_WORLD_NORMAL_INDEX","PREPASS_POSITION","PREPASS_POSITION_INDEX","PREPASS_LOCAL_POSITION","PREPASS_LOCAL_POSITION_INDEX","PREPASS_VELOCITY","PREPASS_VELOCITY_INDEX","PREPASS_VELOCITY_LINEAR","PREPASS_VELOCITY_LINEAR_INDEX","PREPASS_REFLECTIVITY","PREPASS_REFLECTIVITY_INDEX","SCENE_MRT_COUNT","RGBDLIGHTMAP","RGBDREFLECTION","RGBDREFRACTION","MULTIVIEW","ORDER_INDEPENDENT_TRANSPARENCY","ORDER_INDEPENDENT_TRANSPARENCY_16BITS","CAMERA_ORTHOGRAPHIC","CAMERA_PERSPECTIVE","AREALIGHTSUPPORTED","USE_VERTEX_PULLING","CLUSTLIGHT_SLICES","CLUSTLIGHT_BATCH","IS_REFLECTION_LINEAR","IS_REFRACTION_LINEAR","DECAL_AFTER_DETAIL","rebuild","StandardMaterialBase","ImageProcessingMixin","PushMaterial","StandardMaterial","isPrePassCapable","disableDepthWrite","canRenderToMRT","name","scene","forceGLSL","undefined","ForceGLSL","_diffuseTexture","_ambientTexture","_opacityTexture","_reflectionTexture","_emissiveTexture","_specularTexture","_bumpTexture","_lightmapTexture","_refractionTexture","ambientColor","Color3","diffuseColor","specularColor","emissiveColor","specularPower","_useAlphaFromDiffuseTexture","_useEmissiveAsIllumination","_linkEmissiveWithDiffuse","_useSpecularOverAlpha","_useReflectionOverAlpha","_disableLighting","_useObjectSpaceNormalMap","_useParallax","_useParallaxOcclusion","parallaxScaleBias","_roughness","indexOfRefraction","invertRefractionY","alphaCutOff","_useLightmapAsShadowmap","_useReflectionFresnelFromSpecular","_useGlossinessFromSpecularMapAlpha","_maxSimultaneousLights","_invertNormalMapX","_invertNormalMapY","_twoSidedLighting","_applyDecalMapAfterDetailMap","_shadersLoaded","_renderTargets","SmartArray","_globalAmbientColor","_cacheHasRenderTargetTextures","detailMap","DetailMapConfiguration","_attachImageProcessingConfiguration","prePassConfiguration","PrePassConfiguration","getRenderTargetTextures","reset","ReflectionTextureEnabled","isRenderTarget","push","RefractionTextureEnabled","_eventInfo","renderTargets","_callbackPluginEventFillRenderTargetTextures","hasRenderTargetTextures","getClassName","needAlphaBlending","_hasTransparencyMode","_transparencyModeIsBlend","_disableAlphaBlending","alpha","_shouldUseAlphaFromDiffuseTexture","_opacityFresnelParameters","isEnabled","needAlphaTesting","_transparencyModeIsTest","_hasAlphaChannel","_transparencyMode","Material","MATERIAL_ALPHATEST","hasAlpha","MATERIAL_OPAQUE","getAlphaTestTexture","isReadyForSubMesh","mesh","useInstances","_uniformBufferLayoutBuilt","buildUniformLayout","drawWrapper","_drawWrapper","isFrozen","_wasPreviouslyReady","_wasPreviouslyUsingInstances","materialDefines","_callbackPluginEventGeneric","defineNames","getScene","defines","_isReadyForSubMesh","engine","getEngine","_needNormals","PrepareDefinesForLights","PrepareDefinesForMultiview","oit","needAlphaBlendingForMesh","useOrderIndependentTransparency","PrepareDefinesForPrePass","PrepareDefinesForOIT","MaterialHelperGeometryRendering","PrepareDefines","currentRenderPassId","_areTexturesDirty","_callbackPluginEventHasRenderTargetTextures","_needUVs","i","Constants","MAX_SUPPORTED_UV_SETS","texturesEnabled","DiffuseTextureEnabled","isReadyOrNotBlocking","PrepareDefinesForMergedUV","AmbientTextureEnabled","OpacityTextureEnabled","getAlphaFromRGB","PrepareDefinesForIBL","EmissiveTextureEnabled","LightmapTextureEnabled","isRGBD","SpecularTextureEnabled","getCaps","standardDerivatives","BumpTextureEnabled","isReady","useRightHandedSystem","isCube","boundingBoxSize","_backFaceCulling","alphaMode","ALPHA_PREMULTIPLIED","ALPHA_PREMULTIPLIED_PORTERDUFF","transparencyMode","_callbackPluginEventIsReadyForSubMesh","_areImageProcessingDirty","_imageProcessingConfiguration","prepareDefines","reflectionTexture","gammaSpace","refractionTexture","_areFresnelDirty","FresnelEnabled","_diffuseFresnelParameters","_emissiveFresnelParameters","_refractionFresnelParameters","_reflectionFresnelParameters","index","lightSources","length","_isReady","PrepareDefinesForMisc","_useLogarithmicDepth","pointsCloud","fogEnabled","needAlphaTestingForMesh","_useVertexPulling","getRenderingMesh","_setVertexOutputInvariant","PrepareDefinesForFrameBoundValues","hasThinInstances","_callbackPluginEventPrepareDefinesBeforeAttributes","PrepareDefinesForAttributes","_callbackPluginEventPrepareDefines","forceWasNotReadyPreviously","isDirty","lightDisposed","_areLightsDisposed","markAsProcessed","fallbacks","EffectFallbacks","addFallback","HandleFallbacksForShadows","attribs","VertexBuffer","PositionKind","NormalKind","TangentKind","ColorKind","PrepareAttributesForBones","PrepareAttributesForInstances","PrepareAttributesForMorphTargets","PrepareAttributesForBakedVertexAnimation","shaderName","uniforms","samplers","PrepareUniformsAndSamplersForIBL","uniformBuffers","indexParameters","maxSimultaneousLights","maxSimultaneousMorphTargets","fallbackRank","attributes","uniformBuffersNames","customCode","AddUniformsAndSamplers","AddUniforms","ImageProcessingConfiguration","PrepareUniforms","PrepareSamplers","PrepareUniformsAndSamplersList","uniformsNames","AddClipPlaneUniforms","csnrOptions","customShaderNameResolve","join","toString","previousEffect","createEffect","onCompiled","onError","processFinalCode","processCodeAfterIncludes","multiTarget","shaderLanguage","_shaderLanguage","extraInitializationsAsync","async","Promise","all","import","_onEffectCreatedObservable","notifyObservers","allowShaderHotSwapping","markAsUnprocessed","resetCachedMaterial","setEffect","_materialContext","_renderId","getRenderId","_checkScenePerformancePriority","ubo","_uniformBuffer","addUniform","PrepareUniformLayoutForIBL","bindForSubMesh","world","_activeEffect","getMeshUniformBuffer","bindToEffect","transferToEffect","Bind","camera","activeCamera","updateFloat4","minZ","maxZ","_callbackPluginEventHardBindForSubMesh","toNormalMatrix","_normalMatrix","bindOnlyNormalMatrix","mustRebind","_mustRebind","visibility","BindBonesParameters","bindViewProjection","useUbo","isSync","_forceRebindOnNextCall","diffuseFresnelParameters","updateColor4","leftColor","power","rightColor","bias","opacityFresnelParameters","toLuminance","reflectionFresnelParameters","refractionFresnelParameters","emissiveFresnelParameters","updateFloat2","coordinatesIndex","level","BindTextureMatrix","updateFloat","BindIBLParameters","White","roughness","updateFloat3","_mirroredCameraPosition","depth","updateMatrix","getReflectionTextureMatrix","cubeTexture","updateVector3","boundingBoxPosition","pointSize","updateColor3","BlackReadOnly","multiplyToRef","setTexture","depthPeelingRenderer","bind","_callbackPluginEventBindForSubMesh","BindClipPlane","bindEyePosition","_features","needToAlwaysBindUniformBuffers","_needToBindSceneUbo","lightsEnabled","BindLights","applyFog","fogMode","Scene","FOGMODE_NONE","receiveShadows","bindView","BindFogParameters","BindMorphTargetParameters","bakedVertexAnimationManager","useLogarithmicDepth","BindLogDepth","applyByPostProcess","_afterBind","update","getAnimatables","results","animations","getActiveTextures","activeTextures","hasTexture","texture","dispose","forceDisposeEffect","forceDisposeTextures","_imageProcessingObserver","onUpdateParameters","remove","clone","cloneTexturesOnlyOnce","rootUrl","result","SerializationHelper","Clone","id","stencil","copyTo","_clonePlugins","Parse","source","material","parse","_ParsePlugins","MaterialFlags","value","DetailTextureEnabled","ColorGradingTextureEnabled","__decorate","serializeAsTexture","prototype","expandToProperty","serializeAsColor3","serialize","serializeAsFresnelParameters","RegisterClass","DefaultMaterialFactory"],"mappings":"waAwBA,MAAMA,EAA4B,CAAEC,OAAQ,KAAMC,QAAS,MAC3D,MAAMC,UAAoCC,EAAeC,KAGlD,MAAMC,UAAgCC,EAA4BJ,IAKrE,WAAAK,CAAYC,GACRC,MAAMD,GACNE,KAAKC,SAAU,EACfD,KAAKE,gBAAkB,EACvBF,KAAKG,gCAAiC,EACtCH,KAAKI,SAAU,EACfJ,KAAKK,gBAAkB,EACvBL,KAAKM,SAAU,EACfN,KAAKO,gBAAkB,EACvBP,KAAKQ,YAAa,EAClBR,KAAKS,YAAa,EAClBT,KAAKU,UAAW,EAChBV,KAAKW,iBAAmB,EACxBX,KAAKY,UAAW,EAChBZ,KAAKa,iBAAmB,EACxBb,KAAKc,MAAO,EACZd,KAAKe,aAAe,EACpBf,KAAKgB,UAAW,EAChBhB,KAAKiB,cAAe,EACpBjB,KAAKkB,mBAAoB,EACzBlB,KAAKmB,mBAAoB,EACzBnB,KAAKoB,WAAY,EACjBpB,KAAKqB,YAAa,EAClBrB,KAAKsB,YAAa,EAClBtB,KAAKuB,YAAa,EAClBvB,KAAKwB,YAAa,EAClBxB,KAAKyB,YAAa,EAClBzB,KAAK0B,WAAY,EACjB1B,KAAK2B,cAAe,EACpB3B,KAAK4B,kBAAmB,EACxB5B,KAAK6B,WAAY,EACjB7B,KAAK8B,KAAM,EACX9B,KAAK+B,cAAe,EACpB/B,KAAKgC,gBAAiB,EACtBhC,KAAKiC,gBAAiB,EACtBjC,KAAKkC,mBAAoB,EACzBlC,KAAKmC,mBAAoB,EACzBnC,KAAKoC,iBAAkB,EACvBpC,KAAKqC,SAAU,EACfrC,KAAKsC,QAAS,EACdtC,KAAKuC,SAAU,EACfvC,KAAKwC,aAAc,EACnBxC,KAAKyC,aAAc,EACnBzC,KAAK0C,qBAAuB,EAC5B1C,KAAK2C,aAAe,EACpB3C,KAAK4C,aAAc,EACnB5C,KAAK6C,wBAAyB,EAC9B7C,KAAK8C,WAAY,EACjB9C,KAAK+C,gBAAiB,EACtB/C,KAAKgD,gBAAiB,EACtBhD,KAAKiD,YAAa,EAClBjD,KAAKkD,WAAY,EACjBlD,KAAKmD,wBAAyB,EAC9BnD,KAAKoD,yBAA0B,EAC/BpD,KAAKqD,+BAAgC,EACrCrD,KAAKsD,UAAW,EAChBtD,KAAKuD,iBAAmB,EACxBvD,KAAKwD,uBAAwB,EAC7BxD,KAAKyD,wBAAyB,EAC9BzD,KAAK0D,kBAAmB,EACxB1D,KAAK2D,yBAA0B,EAC/B3D,KAAK4D,sBAAuB,EAC5B5D,KAAK6D,qBAAsB,EAC3B7D,KAAK8D,+BAAgC,EACrC9D,KAAK+D,+BAAgC,EACrC/D,KAAKgE,0BAA2B,EAChChE,KAAKiE,sBAAuB,EAC5BjE,KAAKkE,wBAAyB,EAC9BlE,KAAKmE,+BAAgC,EACrCnE,KAAKoE,qCAAsC,EAC3CpE,KAAKqE,6CAA8C,EACnDrE,KAAKsE,yBAA0B,EAC/BtE,KAAKuE,gBAAiB,EACtBvE,KAAKwE,kBAAmB,EACxBxE,KAAKyE,YAAa,EAClBzE,KAAK0E,kBAAmB,EACxB1E,KAAK2E,qBAAsB,EAC3B3E,KAAK4E,kBAAmB,EACxB5E,KAAK6E,aAAc,EACnB7E,KAAK8E,cAAe,EACpB9E,KAAK+E,uBAAwB,EAC7B/E,KAAKgF,qBAAsB,EAC3BhF,KAAKiF,sBAAuB,EAC5BjF,KAAKkF,iBAAkB,EACvBlF,KAAKmF,kBAAmB,EACxBnF,KAAKoF,oBAAqB,EAC1BpF,KAAKqF,iCAAkC,EACvCrF,KAAKsF,+BAAgC,EACrCtF,KAAKuF,gCAAiC,EACtCvF,KAAKwF,2BAA4B,EACjCxF,KAAKyF,4BAA6B,EAClCzF,KAAK0F,8BAA+B,EACpC1F,KAAK2F,sBAAwB,EAC7B3F,KAAK4F,sBAAuB,EAC5B5F,KAAK6F,mBAAoB,EACzB7F,KAAK8F,kBAAmB,EACxB9F,KAAK+F,qCAAsC,EAC3C/F,KAAKgG,YAAa,EAClBhG,KAAKiG,SAAU,EACfjG,KAAKkG,eAAgB,EACrBlG,KAAKmG,qBAAwB,EAC7BnG,KAAKoG,oBAAqB,EAC1BpG,KAAKqG,0BAA6B,EAClCrG,KAAKsG,gBAAiB,EACtBtG,KAAKuG,sBAAyB,EAC9BvG,KAAKwG,qBAAsB,EAC3BxG,KAAKyG,2BAA8B,EACnCzG,KAAK0G,eAAgB,EACrB1G,KAAK2G,qBAAwB,EAC7B3G,KAAK4G,2BAA4B,EACjC5G,KAAK6G,iCAAoC,EACzC7G,KAAK8G,+BAAgC,EACrC9G,KAAK+G,qCAAwC,EAC7C/G,KAAKgH,gBAAiB,EACtBhH,KAAKiH,sBAAyB,EAC9BjH,KAAKkH,2BAA4B,EACjClH,KAAKmH,sBAAuB,EAC5BnH,KAAKoH,4BAA+B,EACpCpH,KAAKqH,kBAAmB,EACxBrH,KAAKsH,wBAA2B,EAChCtH,KAAKuH,wBAAyB,EAC9BvH,KAAKwH,8BAAiC,EACtCxH,KAAKyH,kBAAmB,EACxBzH,KAAK0H,wBAA2B,EAChC1H,KAAK2H,yBAA0B,EAC/B3H,KAAK4H,+BAAkC,EACvC5H,KAAK6H,sBAAuB,EAC5B7H,KAAK8H,4BAA+B,EACpC9H,KAAK+H,gBAAkB,EACvB/H,KAAKgI,cAAe,EACpBhI,KAAKiI,gBAAiB,EACtBjI,KAAKkI,gBAAiB,EACtBlI,KAAKmI,WAAY,EACjBnI,KAAKoI,gCAAiC,EACtCpI,KAAKqI,uCAAwC,EAC7CrI,KAAKsI,qBAAsB,EAC3BtI,KAAKuI,oBAAqB,EAC1BvI,KAAKwI,oBAAqB,EAC1BxI,KAAKyI,oBAAqB,EAC1BzI,KAAK0I,kBAAoB,EACzB1I,KAAK2I,iBAAmB,EAKxB3I,KAAK4I,sBAAuB,EAK5B5I,KAAK6I,sBAAuB,EAC5B7I,KAAK8I,oBAAqB,EAC1B9I,KAAK+I,SACb,EAEA,MAAMC,WAA6BC,EAAqBC,KAOjD,MAAMC,WAAyBH,GAIlC,oBAAII,GACA,OAAQpJ,KAAKqJ,iBACrB,CAII,kBAAIC,GACA,OAAO,CACf,CAUI,WAAAzJ,CAAY0J,EAAMC,EAAOC,GAAY,GACjC1J,MAAMwJ,EAAMC,OAAOE,EAAWD,GAAaN,GAAiBQ,WAC5D3J,KAAK4J,gBAAkB,KACvB5J,KAAK6J,gBAAkB,KACvB7J,KAAK8J,gBAAkB,KACvB9J,KAAK+J,mBAAqB,KAC1B/J,KAAKgK,iBAAmB,KACxBhK,KAAKiK,iBAAmB,KACxBjK,KAAKkK,aAAe,KACpBlK,KAAKmK,iBAAmB,KACxBnK,KAAKoK,mBAAqB,KAK1BpK,KAAKqK,aAAe,IAAIC,EAAO,EAAG,EAAG,GAIrCtK,KAAKuK,aAAe,IAAID,EAAO,EAAG,EAAG,GAIrCtK,KAAKwK,cAAgB,IAAIF,EAAO,EAAG,EAAG,GAKtCtK,KAAKyK,cAAgB,IAAIH,EAAO,EAAG,EAAG,GAMtCtK,KAAK0K,cAAgB,GACrB1K,KAAK2K,6BAA8B,EACnC3K,KAAK4K,4BAA6B,EAClC5K,KAAK6K,0BAA2B,EAChC7K,KAAK8K,uBAAwB,EAC7B9K,KAAK+K,yBAA0B,EAC/B/K,KAAKgL,kBAAmB,EACxBhL,KAAKiL,0BAA2B,EAChCjL,KAAKkL,cAAe,EACpBlL,KAAKmL,uBAAwB,EAI7BnL,KAAKoL,kBAAoB,IACzBpL,KAAKqL,WAAa,EAKlBrL,KAAKsL,kBAAoB,IAMzBtL,KAAKuL,mBAAoB,EAIzBvL,KAAKwL,YAAc,GACnBxL,KAAKyL,yBAA0B,EAC/BzL,KAAK0L,mCAAoC,EACzC1L,KAAK2L,oCAAqC,EAC1C3L,KAAK4L,uBAAyB,EAC9B5L,KAAK6L,mBAAoB,EACzB7L,KAAK8L,mBAAoB,EACzB9L,KAAK+L,mBAAoB,EACzB/L,KAAKgM,8BAA+B,EACpChM,KAAKiM,gBAAiB,EACtBjM,KAAKkM,eAAiB,IAAIC,EAAW,IACrCnM,KAAKoM,oBAAsB,IAAI9B,EAAO,EAAG,EAAG,GAC5CtK,KAAKqM,+BAAgC,EACrCrM,KAAKsM,UAAY,IAAIC,EAAuBvM,MAE5CA,KAAKwM,oCAAoC,MACzCxM,KAAKyM,qBAAuB,IAAIC,EAChC1M,KAAK2M,wBAA0B,KAC3B3M,KAAKkM,eAAeU,QAChBzD,GAAiB0D,0BAA4B7M,KAAK+J,oBAAsB/J,KAAK+J,mBAAmB+C,gBAChG9M,KAAKkM,eAAea,KAAK/M,KAAK+J,oBAE9BZ,GAAiB6D,0BAA4BhN,KAAKoK,oBAAsBpK,KAAKoK,mBAAmB0C,gBAChG9M,KAAKkM,eAAea,KAAK/M,KAAKoK,oBAElCpK,KAAKiN,WAAWC,cAAgBlN,KAAKkM,eACrClM,KAAKmN,6CAA6CnN,KAAKiN,YAChDjN,KAAKkM,eAExB,CAII,2BAAIkB,GACA,SAAIjE,GAAiB0D,0BAA4B7M,KAAK+J,oBAAsB/J,KAAK+J,mBAAmB+C,qBAGhG3D,GAAiB6D,0BAA4BhN,KAAKoK,oBAAsBpK,KAAKoK,mBAAmB0C,iBAG7F9M,KAAKqM,8BACpB,CAMI,YAAAgB,GACI,MAAO,kBACf,CAKI,iBAAAC,GACI,OAAItN,KAAKuN,qBACEvN,KAAKwN,0BAEZxN,KAAKyN,wBAGDzN,KAAK0N,MAAQ,GACO,MAAxB1N,KAAK8J,iBACL9J,KAAK2N,qCACJ3N,KAAK4N,2BAA6B5N,KAAK4N,0BAA0BC,UAC9E,CAKI,gBAAAC,GACI,OAAI9N,KAAKuN,qBACEvN,KAAK+N,wBAET/N,KAAKgO,qBAAiD,MAA1BhO,KAAKiO,mBAA6BjO,KAAKiO,oBAAsBC,EAASC,mBACjH,CAII,iCAAAR,GACI,OAA+B,MAAxB3N,KAAK4J,iBAA2B5J,KAAK4J,gBAAgBwE,UAAYpO,KAAK2K,6BAA+B3K,KAAKiO,oBAAsBC,EAASG,eACxJ,CAII,gBAAAL,GACI,OAAgC,MAAxBhO,KAAK4J,iBAA2B5J,KAAK4J,gBAAgBwE,UAAqC,MAAxBpO,KAAK8J,eACvF,CAKI,mBAAAwE,GACI,OAAOtO,KAAK4J,eACpB,CASI,iBAAA2E,CAAkBC,EAAMjP,EAASkP,GAAe,GACvCzO,KAAK0O,2BACN1O,KAAK2O,qBAET,MAAMC,EAAcrP,EAAQsP,aAC5B,GAAID,EAAYtP,QAAUU,KAAK8O,UACvBF,EAAYG,qBAAuBH,EAAYI,+BAAiCP,EAChF,OAAO,EAGVlP,EAAQ0P,kBACTjP,KAAKkP,4BAA4B,EAA4ClP,KAAKiN,YAClF1N,EAAQ0P,gBAAkB,IAAItP,EAAwBK,KAAKiN,WAAWkC,cAE1E,MAAM3F,EAAQxJ,KAAKoP,WACbC,EAAU9P,EAAQ0P,gBACxB,GAAIjP,KAAKsP,mBAAmB/P,GACxB,OAAO,EAEX,MAAMgQ,EAAS/F,EAAMgG,YAErBH,EAAQI,aAAeC,EAAwBlG,EAAOgF,EAAMa,GAAS,EAAMrP,KAAK4L,uBAAwB5L,KAAKgL,kBAE7G2E,EAA2BnG,EAAO6F,GAElC,MAAMO,EAAM5P,KAAK6P,yBAAyBrB,IAASxO,KAAKoP,WAAWU,gCAMnE,GALAC,EAAyBvG,EAAO6F,EAASrP,KAAKsJ,iBAAmBsG,GAEjEI,EAAqBxG,EAAO6F,EAASO,GACrCK,EAAgCC,eAAeX,EAAOY,oBAAqB3B,EAAMa,GAE7EA,EAAQe,kBAAmB,CAC3BpQ,KAAKiN,WAAWG,yBAA0B,EAC1CpN,KAAKqQ,4CAA4CrQ,KAAKiN,YACtDjN,KAAKqM,8BAAgCrM,KAAKiN,WAAWG,wBACrDiC,EAAQiB,UAAW,EACnB,IAAK,IAAIC,EAAI,EAAGA,GAAKC,EAAUC,wBAAyBF,EACpDlB,EAAQ,SAAWkB,IAAK,EAE5B,GAAI/G,EAAMkH,gBAAiB,CAQvB,GAPArB,EAAQnP,gBAAkB,EAC1BmP,EAAQtO,aAAe,EACvBsO,EAAQhP,gBAAkB,EAC1BgP,EAAQ9O,gBAAkB,EAC1B8O,EAAQ1O,iBAAmB,EAC3B0O,EAAQxO,iBAAmB,EAC3BwO,EAAQ9L,iBAAmB,EACvBvD,KAAK4J,iBAAmBT,GAAiBwH,sBAAuB,CAChE,IAAK3Q,KAAK4J,gBAAgBgH,uBACtB,OAAO,EAGPC,EAA0B7Q,KAAK4J,gBAAiByF,EAAS,UAEjF,MAEoBA,EAAQpP,SAAU,EAEtB,GAAID,KAAK6J,iBAAmBV,GAAiB2H,sBAAuB,CAChE,IAAK9Q,KAAK6J,gBAAgB+G,uBACtB,OAAO,EAGPC,EAA0B7Q,KAAK6J,gBAAiBwF,EAAS,UAEjF,MAEoBA,EAAQjP,SAAU,EAEtB,GAAIJ,KAAK8J,iBAAmBX,GAAiB4H,sBAAuB,CAChE,IAAK/Q,KAAK8J,gBAAgB8G,uBACtB,OAAO,EAGPC,EAA0B7Q,KAAK8J,gBAAiBuF,EAAS,WACzDA,EAAQ7O,WAAaR,KAAK8J,gBAAgBkH,eAElE,MAEoB3B,EAAQ/O,SAAU,EAUtB,GARIN,KAAK+J,oBAAsBZ,GAAiB0D,0BAC5CwC,EAAQnM,UAAYlD,KAAKqL,WAAa,EACtCgE,EAAQ1K,oBAAsB3E,KAAK+K,0BAGnCsE,EAAQnM,WAAY,EACpBmM,EAAQ1K,qBAAsB,IAE7BsM,EAAqBzH,EAAOxJ,KAAK+J,mBAAoBsF,GACtD,OAAO,EAEX,GAAIrP,KAAKgK,kBAAoBb,GAAiB+H,uBAAwB,CAClE,IAAKlR,KAAKgK,iBAAiB4G,uBACvB,OAAO,EAGPC,EAA0B7Q,KAAKgK,iBAAkBqF,EAAS,WAElF,MAEoBA,EAAQ3O,UAAW,EAEvB,GAAIV,KAAKmK,kBAAoBhB,GAAiBgI,uBAAwB,CAClE,IAAKnR,KAAKmK,iBAAiByG,uBACvB,OAAO,EAGPC,EAA0B7Q,KAAKmK,iBAAkBkF,EAAS,YAC1DA,EAAQ5L,uBAAyBzD,KAAKyL,wBACtC4D,EAAQrH,aAAehI,KAAKmK,iBAAiBiH,MAErE,MAEoB/B,EAAQ/L,UAAW,EAEvB,GAAItD,KAAKiK,kBAAoBd,GAAiBkI,uBAAwB,CAClE,IAAKrR,KAAKiK,iBAAiB2G,uBACvB,OAAO,EAGPC,EAA0B7Q,KAAKiK,iBAAkBoF,EAAS,YAC1DA,EAAQpM,WAAajD,KAAK2L,kCAElD,MAEoB0D,EAAQzO,UAAW,EAEvB,GAAI4I,EAAMgG,YAAY8B,UAAUC,qBAAuBvR,KAAKkK,cAAgBf,GAAiBqI,mBAAoB,CAE7G,IAAKxR,KAAKkK,aAAauH,UACnB,OAAO,EAGPZ,EAA0B7Q,KAAKkK,aAAcmF,EAAS,QACtDA,EAAQrO,SAAWhB,KAAKkL,aACxBmE,EAAQpO,aAAeuI,EAAMkI,qBAC7BrC,EAAQnO,kBAAoBlB,KAAKmL,sBAErCkE,EAAQ7L,sBAAwBxD,KAAKiL,wBACzD,MAEoBoE,EAAQvO,MAAO,EACfuO,EAAQrO,UAAW,EACnBqO,EAAQpO,cAAe,EACvBoO,EAAQnO,mBAAoB,EAEhC,GAAIlB,KAAKoK,oBAAsBjB,GAAiB6D,yBAA0B,CACtE,IAAKhN,KAAKoK,mBAAmBwG,uBACzB,OAAO,EAGPvB,EAAQiB,UAAW,EACnBjB,EAAQ5K,YAAa,EACrB4K,EAAQ3K,iBAAmB1E,KAAKoK,mBAAmBuH,OACnDtC,EAAQnH,eAAiBlI,KAAKoK,mBAAmBgH,OACjD/B,EAAQtL,gCAAgC/D,KAAKoK,mBAAmBwH,eAExF,MAEoBvC,EAAQ5K,YAAa,EAEzB4K,EAAQzK,kBAAoB5E,KAAK6R,kBAAoB7R,KAAK+L,iBAC1E,MAEgBsD,EAAQpP,SAAU,EAClBoP,EAAQjP,SAAU,EAClBiP,EAAQ/O,SAAU,EAClB+O,EAAQ5O,YAAa,EACrB4O,EAAQ3O,UAAW,EACnB2O,EAAQ/L,UAAW,EACnB+L,EAAQvO,MAAO,EACfuO,EAAQ5K,YAAa,EAEzB4K,EAAQzN,iBAAmB5B,KAAK2N,oCAChC0B,EAAQlM,uBAAyBnD,KAAK4K,2BACtCyE,EAAQjM,wBAA0BpD,KAAK6K,yBACvCwE,EAAQlO,kBAAoBnB,KAAK8K,sBACjCuE,EAAQvJ,iBAAmB9F,KAAK8R,YAActB,EAAUuB,qBAAuB/R,KAAK8R,YAActB,EAAUwB,+BAC5G3C,EAAQtJ,oCAAgE,OAA1B/F,KAAKiS,iBACnD5C,EAAQrJ,WAAuC,OAA1BhG,KAAKiS,kBAA6BjS,KAAK6P,yBAAyBrB,EACjG,CAKQ,GAJAxO,KAAKiN,WAAWsB,mBAAoB,EACpCvO,KAAKiN,WAAWoC,QAAUA,EAC1BrP,KAAKiN,WAAW1N,QAAUA,EAC1BS,KAAKkS,sCAAsClS,KAAKiN,aAC3CjN,KAAKiN,WAAWsB,kBACjB,OAAO,EAEX,GAAIc,EAAQ8C,0BAA4BnS,KAAKoS,8BAA+B,CACxE,IAAKpS,KAAKoS,8BAA8BX,UACpC,OAAO,EAEXzR,KAAKoS,8BAA8BC,eAAehD,GAClDA,EAAQzG,qBAAiD,MAA1B5I,KAAKsS,oBAA8BtS,KAAKsS,kBAAkBC,WACzFlD,EAAQxG,qBAAiD,MAA1B7I,KAAKwS,oBAA8BxS,KAAKwS,kBAAkBD,UACrG,CAwBQ,GAvBIlD,EAAQoD,mBACJtJ,GAAiBuJ,gBAEb1S,KAAK2S,2BACL3S,KAAK4N,2BACL5N,KAAK4S,4BACL5S,KAAK6S,8BACL7S,KAAK8S,gCACLzD,EAAQrN,eAAiBhC,KAAK2S,2BAA6B3S,KAAK2S,0BAA0B9E,UAC1FwB,EAAQpN,eAAiBjC,KAAK4N,2BAA6B5N,KAAK4N,0BAA0BC,UAC1FwB,EAAQnN,kBAAoBlC,KAAK8S,8BAAgC9S,KAAK8S,6BAA6BjF,UACnGwB,EAAQhM,8BAAgCrD,KAAK0L,kCAC7C2D,EAAQlN,kBAAoBnC,KAAK6S,8BAAgC7S,KAAK6S,6BAA6BhF,UACnGwB,EAAQjN,gBAAkBpC,KAAK4S,4BAA8B5S,KAAK4S,2BAA2B/E,UAC7FwB,EAAQI,cAAe,EACvBJ,EAAQhN,SAAU,GAItBgN,EAAQhN,SAAU,GAItBgN,EAAuB,eAAKA,EAA0B,iBACtD,IAAK,IAAI0D,EAAQ,EAAGA,EAAQvE,EAAKwE,aAAaC,OAAQF,IAClD,IAAKvE,EAAKwE,aAAaD,GAAOG,WAC1B,OAAO,EAKnBC,EAAsB3E,EAAMhF,EAAOxJ,KAAKoT,qBAAsBpT,KAAKqT,YAAarT,KAAKsT,WAAYtT,KAAKuT,wBAAwB/E,GAAOa,EAASrP,KAAKgM,6BAA8BhM,KAAKwT,kBAAmBjU,EAAQkU,mBAAoBzT,KAAK0T,2BAE1OC,EAAkCnK,EAAO+F,EAAQvP,KAAMqP,EAASZ,EAAc,KAAMlP,EAAQkU,mBAAmBG,kBAE/G5T,KAAKiN,WAAWoC,QAAUA,EAC1BrP,KAAKiN,WAAWuB,KAAOA,EACvBxO,KAAK6T,mDAAmD7T,KAAKiN,YAE7D6G,EAA4BtF,EAAMa,GAAS,GAAM,GAAM,GAEvDrP,KAAK+T,mCAAmC/T,KAAKiN,YAE7C,IAAI+G,GAA6B,EACjC,GAAI3E,EAAQ4E,QAAS,CACjB,MAAMC,EAAgB7E,EAAQ8E,mBAC9B9E,EAAQ+E,kBAER,MAAMC,EAAY,IAAIC,EAClBjF,EAAQ5O,YACR4T,EAAUE,YAAY,EAAG,cAEzBlF,EAAQzO,UACRyT,EAAUE,YAAY,EAAG,YAEzBlF,EAAQvO,MACRuT,EAAUE,YAAY,EAAG,QAEzBlF,EAAQrO,UACRqT,EAAUE,YAAY,EAAG,YAEzBlF,EAAQpO,cACRoT,EAAUE,YAAY,EAAG,gBAEzBlF,EAAQnO,mBACRmT,EAAUE,YAAY,EAAG,qBAEzBlF,EAAQlO,mBACRkT,EAAUE,YAAY,EAAG,qBAEzBlF,EAAQvN,KACRuS,EAAUE,YAAY,EAAG,OAEzBlF,EAAQxN,WACRwS,EAAUE,YAAY,EAAG,aAEzBlF,EAAQ7K,kBACR6P,EAAUE,YAAY,EAAG,oBAE7BC,EAA0BnF,EAASgF,EAAWrU,KAAK4L,wBAC/CyD,EAAQtN,cACRsS,EAAUE,YAAY,EAAG,gBAEzBlF,EAAQrN,gBACRqS,EAAUE,YAAY,EAAG,kBAEzBlF,EAAQpN,gBACRoS,EAAUE,YAAY,EAAG,kBAEzBlF,EAAQnN,mBACRmS,EAAUE,YAAY,EAAG,qBAEzBlF,EAAQjN,iBACRiS,EAAUE,YAAY,EAAG,mBAEzBlF,EAAQhN,SACRgS,EAAUE,YAAY,EAAG,WAEzBlF,EAAQlH,WACRkM,EAAUE,YAAY,EAAG,aAG7B,MAAME,EAAU,CAACC,EAAaC,cAC1BtF,EAAQ/M,QACRmS,EAAQ1H,KAAK2H,EAAaE,YAE1BvF,EAAQ9M,SACRkS,EAAQ1H,KAAK2H,EAAaG,aAE9B,IAAK,IAAItE,EAAI,EAAGA,GAAKC,EAAUC,wBAAyBF,EAChDlB,EAAQ,KAAOkB,IACfkE,EAAQ1H,KAAK,KAAW,IAANwD,EAAU,GAAKA,KAGrClB,EAAQ7M,aACRiS,EAAQ1H,KAAK2H,EAAaI,WAE9BC,EAA0BN,EAASjG,EAAMa,EAASgF,GAClDW,EAA8BP,EAASpF,GACvC4F,EAAiCR,EAASjG,EAAMa,GAChD6F,EAAyCT,EAASjG,EAAMa,GACxD,IAAI8F,EAAa,UACjB,MAAMC,EAAW,CACb,QACA,OACA,iBACA,eACA,cACA,gBACA,gBACA,iBACA,iBACA,aACA,YACA,YACA,YACA,gBACA,gBACA,gBACA,iBACA,iBACA,aACA,iBACA,mBACA,SACA,gBACA,gBACA,gBACA,iBACA,iBACA,aACA,eACA,iBACA,mBACA,mBACA,oBACA,eACA,sBACA,uBACA,oBACA,qBACA,sBACA,uBACA,sBACA,kBACA,2BACA,sBACA,cACA,mBACA,yBACA,4BACA,cAEEC,EAAW,CACb,iBACA,iBACA,iBACA,wBACA,sBACA,kBACA,kBACA,cACA,kBACA,wBACA,sBACA,cACA,eACA,kBACA,uBACA,wBACA,yBAEJC,EAAiCF,EAAUC,GAAU,GACrD,MAAME,EAAiB,CAAC,WAAY,QAAS,QACvCC,EAAkB,CAAEC,sBAAuBzV,KAAK4L,uBAAwB8J,4BAA6BrG,EAAQ1J,uBACnH3F,KAAKiN,WAAWoH,UAAYA,EAC5BrU,KAAKiN,WAAW0I,aAAe,EAC/B3V,KAAKiN,WAAWoC,QAAUA,EAC1BrP,KAAKiN,WAAWmI,SAAWA,EAC3BpV,KAAKiN,WAAW2I,WAAanB,EAC7BzU,KAAKiN,WAAWoI,SAAWA,EAC3BrV,KAAKiN,WAAW4I,oBAAsBN,EACtCvV,KAAKiN,WAAW6I,gBAAapM,EAC7B1J,KAAKiN,WAAWuB,KAAOA,EACvBxO,KAAKiN,WAAWuI,gBAAkBA,EAClCxV,KAAKkP,4BAA4B,IAA6ClP,KAAKiN,YACnFgD,EAAgC8F,uBAAuBX,EAAUC,GACjE3I,EAAqBsJ,YAAYZ,GAE7Ba,IACAA,EAA6BC,gBAAgBd,EAAU/F,GACvD4G,EAA6BE,gBAAgBd,EAAUhG,IAE3D+G,EAA+B,CAC3BC,cAAejB,EACfS,oBAAqBN,EACrBF,SAAUA,EACVhG,QAASA,EACToG,sBAAuBzV,KAAK4L,yBAEhC0K,EAAqBlB,GACrB,MAAMmB,EAAc,CAAE,EAClBvW,KAAKwW,0BACLrB,EAAanV,KAAKwW,wBAAwBrB,EAAYC,EAAUG,EAAgBF,EAAUhG,EAASoF,EAAS8B,IAEhH,MAAME,EAAOpH,EAAQqH,WACfC,EAAiBpX,EAAQD,OAC/B,IAAIA,EAASkK,EAAMgG,YAAYoH,aAAazB,EAAY,CACpDS,WAAYnB,EACZ4B,cAAejB,EACfS,oBAAqBN,EACrBF,SAAUA,EACVhG,QAASoH,EACTpC,UAAWA,EACXwC,WAAY7W,KAAK6W,WACjBC,QAAS9W,KAAK8W,QACdtB,kBACAuB,iBAAkBR,EAAYQ,iBAC9BC,yBAA0BhX,KAAKiN,WAAW6I,WAC1CmB,YAAa5H,EAAQpJ,QACrBiR,eAAgBlX,KAAKmX,gBACrBC,0BAA2BpX,KAAKiM,oBAC1BvC,EACA2N,UAC+B,IAAzBrX,KAAKmX,sBACCG,QAAQC,IAAI,CAACC,OAAO,wCAAkCA,OAAO,kDAG7DF,QAAQC,IAAI,CAACC,OAAO,wCAA8BA,OAAO,4CAEnExX,KAAKiM,gBAAiB,IAE/BsD,GAEH,GADAvP,KAAKiN,WAAW6I,gBAAapM,EACzBpK,EAOA,GANIU,KAAKyX,6BACLpY,EAA0BC,OAASA,EACnCD,EAA0BE,QAAUA,EACpCS,KAAKyX,2BAA2BC,gBAAgBrY,IAGhDW,KAAK2X,wBAA0BhB,IAAmBrX,EAAOmS,WAIzD,GAHAnS,EAASqX,EACTtH,EAAQuI,oBACR5D,EAA6BhU,KAAK8O,SAC9BoF,EAGA,OADA7E,EAAQ8E,oBAAqB,GACtB,OAIX3K,EAAMqO,sBACNtY,EAAQuY,UAAUxY,EAAQ+P,EAASrP,KAAK+X,iBAG5D,CACQ,SAAKxY,EAAQD,SAAWC,EAAQD,OAAOmS,aAGvCpC,EAAQ2I,UAAYxO,EAAMyO,cAC1BrJ,EAAYG,qBAAsBiF,EAClCpF,EAAYI,6BAA+BP,EAC3CzO,KAAKkY,kCACE,EACf,CAKI,kBAAAvJ,GAEI,MAAMwJ,EAAMnY,KAAKoY,eACjBD,EAAIE,WAAW,mBAAoB,GACnCF,EAAIE,WAAW,oBAAqB,GACpCF,EAAIE,WAAW,eAAgB,GAC/BF,EAAIE,WAAW,sBAAuB,GACtCF,EAAIE,WAAW,uBAAwB,GACvCF,EAAIE,WAAW,sBAAuB,GACtCF,EAAIE,WAAW,uBAAwB,GACvCF,EAAIE,WAAW,oBAAqB,GACpCF,EAAIE,WAAW,qBAAsB,GACrCF,EAAIE,WAAW,gBAAiB,GAChCF,EAAIE,WAAW,gBAAiB,GAChCF,EAAIE,WAAW,gBAAiB,GAChCF,EAAIE,WAAW,iBAAkB,GACjCF,EAAIE,WAAW,iBAAkB,GACjCF,EAAIE,WAAW,iBAAkB,GACjCF,EAAIE,WAAW,aAAc,GAC7BF,EAAIE,WAAW,gBAAiB,IAChCF,EAAIE,WAAW,gBAAiB,IAChCF,EAAIE,WAAW,gBAAiB,IAChCF,EAAIE,WAAW,iBAAkB,IACjCF,EAAIE,WAAW,iBAAkB,IACjCF,EAAIE,WAAW,iBAAkB,IACjCF,EAAIE,WAAW,aAAc,IAC7BF,EAAIE,WAAW,sBAAuB,GACtCF,EAAIE,WAAW,YAAa,GAC5BF,EAAIE,WAAW,cAAe,GAC9BF,EAAIE,WAAW,mBAAoB,IACnCF,EAAIE,WAAW,mBAAoB,GACnCF,EAAIE,WAAW,sBAAuB,GACtCF,EAAIE,WAAW,kBAAmB,GAClCF,EAAIE,WAAW,iBAAkB,GACjCF,EAAIE,WAAW,iBAAkB,GACjCF,EAAIE,WAAW,gBAAiB,GAChCF,EAAIE,WAAW,gBAAiB,GAChCF,EAAIE,WAAW,aAAc,GAC7BC,EAA2BH,GAAK,GAAO,GACvCpY,MAAM4O,oBACd,CAOI,cAAA4J,CAAeC,EAAOhK,EAAMjP,GACxB,MAAMiK,EAAQxJ,KAAKoP,WACbC,EAAU9P,EAAQ0P,gBACxB,IAAKI,EACD,OAEJ,MAAM/P,EAASC,EAAQD,OACvB,IAAKA,EACD,OAEJU,KAAKyY,cAAgBnZ,EAErBkP,EAAKkK,uBAAuBC,aAAarZ,EAAQ,QACjDkP,EAAKoK,iBAAiBJ,GAEtBxY,KAAKoY,eAAeO,aAAarZ,EAAQ,YACzCU,KAAKyM,qBAAqB8L,eAAevY,KAAKyY,cAAejP,EAAOgF,EAAMgK,EAAOxY,KAAK8O,UACtFmB,EAAgC4I,KAAKrP,EAAMgG,YAAYW,oBAAqBnQ,KAAKyY,cAAejK,EAAMgK,EAAOxY,MAC7G,MAAM8Y,EAAStP,EAAMuP,aACjBD,EACA9Y,KAAKoY,eAAeY,aAAa,aAAcF,EAAOG,KAAMH,EAAOI,KAAM,EAAG,GAG5ElZ,KAAKoY,eAAeY,aAAa,aAAc,EAAG,EAAG,EAAG,GAE5DhZ,KAAKiN,WAAW1N,QAAUA,EAC1BS,KAAKmZ,uCAAuCnZ,KAAKiN,YAE7CoC,EAAQ7L,wBACRgV,EAAMY,eAAepZ,KAAKqZ,eAC1BrZ,KAAKsZ,qBAAqBtZ,KAAKqZ,gBAEnC,MAAME,EAAavZ,KAAKwZ,YAAYhQ,EAAOlK,EAAQC,EAASiP,EAAKiL,YAEjEC,EAAoBlL,EAAMlP,GAC1B,MAAM6Y,EAAMnY,KAAKoY,eACjB,GAAImB,EAAY,CAEZ,GADAvZ,KAAK2Z,mBAAmBra,IACnB6Y,EAAIyB,SAAW5Z,KAAK8O,WAAaqJ,EAAI0B,QAAUta,EAAQsP,aAAaiL,uBAAwB,CAwB7F,GAvBI3Q,GAAiBuJ,gBAAkBrD,EAAQhN,UAEvCrC,KAAK+Z,0BAA4B/Z,KAAK+Z,yBAAyBlM,YAC/DsK,EAAI6B,aAAa,mBAAoBha,KAAK+Z,yBAAyBE,UAAWja,KAAK+Z,yBAAyBG,OAC5G/B,EAAI6B,aAAa,oBAAqBha,KAAK+Z,yBAAyBI,WAAYna,KAAK+Z,yBAAyBK,OAE9Gpa,KAAKqa,0BAA4Bra,KAAKqa,yBAAyBxM,WAC/DsK,EAAI6B,aAAa,eAAgB,IAAI1P,EAAOtK,KAAKqa,yBAAyBJ,UAAUK,cAAeta,KAAKqa,yBAAyBF,WAAWG,cAAeta,KAAKqa,yBAAyBD,MAAOpa,KAAKqa,yBAAyBH,OAE9Nla,KAAKua,6BAA+Bva,KAAKua,4BAA4B1M,YACrEsK,EAAI6B,aAAa,sBAAuBha,KAAKua,4BAA4BN,UAAWja,KAAKua,4BAA4BL,OACrH/B,EAAI6B,aAAa,uBAAwBha,KAAKua,4BAA4BJ,WAAYna,KAAKua,4BAA4BH,OAEvHpa,KAAKwa,6BAA+Bxa,KAAKwa,4BAA4B3M,YACrEsK,EAAI6B,aAAa,sBAAuBha,KAAKwa,4BAA4BP,UAAWja,KAAKwa,4BAA4BN,OACrH/B,EAAI6B,aAAa,uBAAwBha,KAAKwa,4BAA4BL,WAAYna,KAAKwa,4BAA4BJ,OAEvHpa,KAAKya,2BAA6Bza,KAAKya,0BAA0B5M,YACjEsK,EAAI6B,aAAa,oBAAqBha,KAAKya,0BAA0BR,UAAWja,KAAKya,0BAA0BP,OAC/G/B,EAAI6B,aAAa,qBAAsBha,KAAKya,0BAA0BN,WAAYna,KAAKya,0BAA0BL,QAIrH5Q,EAAMkH,kBACF1Q,KAAK4J,iBAAmBT,GAAiBwH,wBACzCwH,EAAIuC,aAAa,gBAAiB1a,KAAK4J,gBAAgB+Q,iBAAkB3a,KAAK4J,gBAAgBgR,OAC9FC,EAAkB7a,KAAK4J,gBAAiBuO,EAAK,YAE7CnY,KAAK6J,iBAAmBV,GAAiB2H,wBACzCqH,EAAIuC,aAAa,gBAAiB1a,KAAK6J,gBAAgB8Q,iBAAkB3a,KAAK6J,gBAAgB+Q,OAC9FC,EAAkB7a,KAAK6J,gBAAiBsO,EAAK,YAE7CnY,KAAK8J,iBAAmBX,GAAiB4H,wBACzCoH,EAAIuC,aAAa,gBAAiB1a,KAAK8J,gBAAgB6Q,iBAAkB3a,KAAK8J,gBAAgB8Q,OAC9FC,EAAkB7a,KAAK8J,gBAAiBqO,EAAK,YAE7CnY,KAAKgO,oBACLmK,EAAI2C,YAAY,cAAe9a,KAAKwL,aAExCuP,EAAkBvR,EAAO6F,EAAS8I,EAAK7N,EAAO0Q,QAAShb,KAAK+J,oBAAoB,GAAO,GAAO,GAAM,GAAO,GAAO,EAAO/J,KAAKib,WACzHjb,KAAK+J,oBAAuBZ,GAAiB0D,0BAC9CsL,EAAIuC,aAAa,mBAAoB,EAAK1a,KAAKib,WAE/Cjb,KAAKgK,kBAAoBb,GAAiB+H,yBAC1CiH,EAAIuC,aAAa,iBAAkB1a,KAAKgK,iBAAiB2Q,iBAAkB3a,KAAKgK,iBAAiB4Q,OACjGC,EAAkB7a,KAAKgK,iBAAkBmO,EAAK,aAE9CnY,KAAKmK,kBAAoBhB,GAAiBgI,yBAC1CgH,EAAIuC,aAAa,iBAAkB1a,KAAKmK,iBAAiBwQ,iBAAkB3a,KAAKmK,iBAAiByQ,OACjGC,EAAkB7a,KAAKmK,iBAAkBgO,EAAK,aAE9CnY,KAAKiK,kBAAoBd,GAAiBkI,yBAC1C8G,EAAIuC,aAAa,iBAAkB1a,KAAKiK,iBAAiB0Q,iBAAkB3a,KAAKiK,iBAAiB2Q,OACjGC,EAAkB7a,KAAKiK,iBAAkBkO,EAAK,aAE9CnY,KAAKkK,cAAgBV,EAAMgG,YAAY8B,UAAUC,qBAAuBpI,GAAiBqI,qBACzF2G,EAAI+C,aAAa,aAAclb,KAAKkK,aAAayQ,iBAAkB,EAAM3a,KAAKkK,aAAa0Q,MAAO5a,KAAKoL,mBACvGyP,EAAkB7a,KAAKkK,aAAciO,EAAK,QACtC3O,EAAM2R,wBACNhD,EAAIuC,aAAa,sBAAuB1a,KAAK6L,kBAAoB,GAAM,EAAM7L,KAAK8L,kBAAoB,GAAM,GAG5GqM,EAAIuC,aAAa,sBAAuB1a,KAAK6L,qBAA2B,EAAK7L,KAAK8L,mBAAoB,EAAO,IAGjH9L,KAAKoK,oBAAsBjB,GAAiB6D,0BAA0B,CACtE,IAAIoO,EAAQ,EAQZ,GAPKpb,KAAKoK,mBAAmBuH,SACzBwG,EAAIkD,aAAa,mBAAoBrb,KAAKoK,mBAAmBkR,8BACzDtb,KAAKoK,mBAAmBgR,QACxBA,EAAQpb,KAAKoK,mBAAmBgR,QAGxCjD,EAAIa,aAAa,mBAAoBhZ,KAAKoK,mBAAmBwQ,MAAO5a,KAAKsL,kBAAmB8P,EAAOpb,KAAKuL,mBAAoB,EAAK,GAC7HvL,KAAKoK,mBAAmBwH,gBAAiB,CACzC,MAAM2J,EAAcvb,KAAKoK,mBACzB+N,EAAIqD,cAAc,sBAAuBD,EAAYE,qBACrDtD,EAAIqD,cAAc,kBAAmBD,EAAY3J,gBAC7E,CACA,CAGoB5R,KAAKqT,aACL8E,EAAI2C,YAAY,YAAa9a,KAAK0b,WAEtCvD,EAAI6B,aAAa,iBAAkBha,KAAKwK,cAAexK,KAAK0K,eAC5DyN,EAAIwD,aAAa,iBAAkBxS,GAAiB+H,uBAAyBlR,KAAKyK,cAAgBH,EAAOsR,eACzGzD,EAAI6B,aAAa,gBAAiBha,KAAKuK,aAAcvK,KAAK0N,OAC1DlE,EAAMa,aAAawR,cAAc7b,KAAKqK,aAAcrK,KAAKoM,qBACzD+L,EAAIwD,aAAa,gBAAiB3b,KAAKoM,oBACvD,CAEgB5C,EAAMkH,kBACF1Q,KAAK4J,iBAAmBT,GAAiBwH,uBACzCrR,EAAOwc,WAAW,iBAAkB9b,KAAK4J,iBAEzC5J,KAAK6J,iBAAmBV,GAAiB2H,uBACzCxR,EAAOwc,WAAW,iBAAkB9b,KAAK6J,iBAEzC7J,KAAK8J,iBAAmBX,GAAiB4H,uBACzCzR,EAAOwc,WAAW,iBAAkB9b,KAAK8J,iBAEzC9J,KAAK+J,oBAAsBZ,GAAiB0D,2BACxC7M,KAAK+J,mBAAmB4H,OACxBrS,EAAOwc,WAAW,wBAAyB9b,KAAK+J,oBAGhDzK,EAAOwc,WAAW,sBAAuB9b,KAAK+J,qBAGlD/J,KAAKgK,kBAAoBb,GAAiB+H,wBAC1C5R,EAAOwc,WAAW,kBAAmB9b,KAAKgK,kBAE1ChK,KAAKmK,kBAAoBhB,GAAiBgI,wBAC1C7R,EAAOwc,WAAW,kBAAmB9b,KAAKmK,kBAE1CnK,KAAKiK,kBAAoBd,GAAiBkI,wBAC1C/R,EAAOwc,WAAW,kBAAmB9b,KAAKiK,kBAE1CjK,KAAKkK,cAAgBV,EAAMgG,YAAY8B,UAAUC,qBAAuBpI,GAAiBqI,oBACzFlS,EAAOwc,WAAW,cAAe9b,KAAKkK,cAEtClK,KAAKoK,oBAAsBjB,GAAiB6D,2BACxChN,KAAKoK,mBAAmBuH,OACxBrS,EAAOwc,WAAW,wBAAyB9b,KAAKoK,oBAGhD9K,EAAOwc,WAAW,sBAAuB9b,KAAKoK,sBAKtDpK,KAAKoP,WAAWU,iCAAmC9P,KAAK6P,yBAAyBrB,IACjFxO,KAAKoP,WAAW2M,qBAAqBC,KAAK1c,GAE9CU,KAAKiN,WAAW1N,QAAUA,EAC1BS,KAAKic,mCAAmCjc,KAAKiN,YAE7CiP,EAAc5c,EAAQU,KAAMwJ,GAE5BxJ,KAAKmc,gBAAgB7c,EACjC,MACiBkK,EAAMgG,YAAY4M,UAAUC,iCACjCrc,KAAKsc,qBAAsB,IAE3B/C,GAAevZ,KAAK8O,WAEhBtF,EAAM+S,gBAAkBvc,KAAKgL,kBAC7BwR,EAAWhT,EAAOgF,EAAMlP,EAAQ+P,EAASrP,KAAK4L,yBAG7CpC,EAAM8J,YAAc9E,EAAKiO,UAAYjT,EAAMkT,UAAYC,EAAMC,cAC9D5c,KAAK+J,oBACL/J,KAAKoK,oBACLoE,EAAKqO,gBACLxN,EAAQpJ,SACRoJ,EAA0B,mBAC1BrP,KAAK8c,SAASxd,GAGlByd,EAAkBvT,EAAOgF,EAAMlP,GAE3B+P,EAAQ1J,uBACRqX,EAA0BxO,EAAMlP,GAEhC+P,EAAQlP,gCACRqO,EAAKyO,6BAA6BjB,KAAK1c,EAAQ+P,EAAQvM,WAGvD9C,KAAKkd,qBACLC,EAAa9N,EAAS/P,EAAQkK,GAG9BxJ,KAAKoS,gCAAkCpS,KAAKoS,8BAA8BgL,oBAC1Epd,KAAKoS,8BAA8B4J,KAAKhc,KAAKyY,gBAGrDzY,KAAKqd,WAAW7O,EAAMxO,KAAKyY,cAAelZ,GAC1C4Y,EAAImF,QACZ,CAKI,cAAAC,GACI,MAAMC,EAAUzd,MAAMwd,iBA4BtB,OA3BIvd,KAAK4J,iBAAmB5J,KAAK4J,gBAAgB6T,YAAczd,KAAK4J,gBAAgB6T,WAAWxK,OAAS,GACpGuK,EAAQzQ,KAAK/M,KAAK4J,iBAElB5J,KAAK6J,iBAAmB7J,KAAK6J,gBAAgB4T,YAAczd,KAAK6J,gBAAgB4T,WAAWxK,OAAS,GACpGuK,EAAQzQ,KAAK/M,KAAK6J,iBAElB7J,KAAK8J,iBAAmB9J,KAAK8J,gBAAgB2T,YAAczd,KAAK8J,gBAAgB2T,WAAWxK,OAAS,GACpGuK,EAAQzQ,KAAK/M,KAAK8J,iBAElB9J,KAAK+J,oBAAsB/J,KAAK+J,mBAAmB0T,YAAczd,KAAK+J,mBAAmB0T,WAAWxK,OAAS,GAC7GuK,EAAQzQ,KAAK/M,KAAK+J,oBAElB/J,KAAKgK,kBAAoBhK,KAAKgK,iBAAiByT,YAAczd,KAAKgK,iBAAiByT,WAAWxK,OAAS,GACvGuK,EAAQzQ,KAAK/M,KAAKgK,kBAElBhK,KAAKiK,kBAAoBjK,KAAKiK,iBAAiBwT,YAAczd,KAAKiK,iBAAiBwT,WAAWxK,OAAS,GACvGuK,EAAQzQ,KAAK/M,KAAKiK,kBAElBjK,KAAKkK,cAAgBlK,KAAKkK,aAAauT,YAAczd,KAAKkK,aAAauT,WAAWxK,OAAS,GAC3FuK,EAAQzQ,KAAK/M,KAAKkK,cAElBlK,KAAKmK,kBAAoBnK,KAAKmK,iBAAiBsT,YAAczd,KAAKmK,iBAAiBsT,WAAWxK,OAAS,GACvGuK,EAAQzQ,KAAK/M,KAAKmK,kBAElBnK,KAAKoK,oBAAsBpK,KAAKoK,mBAAmBqT,YAAczd,KAAKoK,mBAAmBqT,WAAWxK,OAAS,GAC7GuK,EAAQzQ,KAAK/M,KAAKoK,oBAEfoT,CACf,CAKI,iBAAAE,GACI,MAAMC,EAAiB5d,MAAM2d,oBA4B7B,OA3BI1d,KAAK4J,iBACL+T,EAAe5Q,KAAK/M,KAAK4J,iBAEzB5J,KAAK6J,iBACL8T,EAAe5Q,KAAK/M,KAAK6J,iBAEzB7J,KAAK8J,iBACL6T,EAAe5Q,KAAK/M,KAAK8J,iBAEzB9J,KAAK+J,oBACL4T,EAAe5Q,KAAK/M,KAAK+J,oBAEzB/J,KAAKgK,kBACL2T,EAAe5Q,KAAK/M,KAAKgK,kBAEzBhK,KAAKiK,kBACL0T,EAAe5Q,KAAK/M,KAAKiK,kBAEzBjK,KAAKkK,cACLyT,EAAe5Q,KAAK/M,KAAKkK,cAEzBlK,KAAKmK,kBACLwT,EAAe5Q,KAAK/M,KAAKmK,kBAEzBnK,KAAKoK,oBACLuT,EAAe5Q,KAAK/M,KAAKoK,oBAEtBuT,CACf,CAMI,UAAAC,CAAWC,GACP,QAAI9d,MAAM6d,WAAWC,KAGjB7d,KAAK4J,kBAAoBiU,IAGzB7d,KAAK6J,kBAAoBgU,IAGzB7d,KAAK8J,kBAAoB+T,IAGzB7d,KAAK+J,qBAAuB8T,IAG5B7d,KAAKgK,mBAAqB6T,IAG1B7d,KAAKiK,mBAAqB4T,IAG1B7d,KAAKkK,eAAiB2T,IAGtB7d,KAAKmK,mBAAqB0T,GAG1B7d,KAAKoK,qBAAuByT,SAIxC,CAMI,OAAAC,CAAQC,EAAoBC,GACpBA,IACAhe,KAAK4J,iBAAiBkU,UACtB9d,KAAK6J,iBAAiBiU,UACtB9d,KAAK8J,iBAAiBgU,UACtB9d,KAAK+J,oBAAoB+T,UACzB9d,KAAKgK,kBAAkB8T,UACvB9d,KAAKiK,kBAAkB6T,UACvB9d,KAAKkK,cAAc4T,UACnB9d,KAAKmK,kBAAkB2T,UACvB9d,KAAKoK,oBAAoB0T,WAEzB9d,KAAKoS,+BAAiCpS,KAAKie,0BAC3Cje,KAAKoS,8BAA8B8L,mBAAmBC,OAAOne,KAAKie,0BAEtEle,MAAM+d,QAAQC,EAAoBC,EAC1C,CAQI,KAAAI,CAAM7U,EAAM8U,GAAwB,EAAMC,EAAU,IAChD,MAAMC,EAASC,EAAoBC,OAAM,IAAM,IAAItV,GAAiBI,EAAMvJ,KAAKoP,aAAapP,KAAM,CAAEqe,0BAKpG,OAJAE,EAAOhV,KAAOA,EACdgV,EAAOG,GAAKnV,EACZvJ,KAAK2e,QAAQC,OAAOL,EAAOI,SAC3B3e,KAAK6e,cAAcN,EAAQD,GACpBC,CACf,CAQI,YAAOO,CAAMC,EAAQvV,EAAO8U,GACxB,MAAMU,EAAWR,EAAoBM,OAAM,IAAM,IAAI3V,GAAiB4V,EAAOxV,KAAMC,IAAQuV,EAAQvV,EAAO8U,GAK1G,OAJIS,EAAOJ,SACPK,EAASL,QAAQM,MAAMF,EAAOJ,QAASnV,EAAO8U,GAElDpQ,EAASgR,cAAcH,EAAQC,EAAUxV,EAAO8U,GACzCU,CACf,CAKI,gCAAWrO,GACP,OAAOwO,EAAcxO,qBAC7B,CACI,gCAAWA,CAAsByO,GAC7BD,EAAcxO,sBAAwByO,CAC9C,CAII,+BAAWC,GACP,OAAOF,EAAcE,oBAC7B,CACI,+BAAWA,CAAqBD,GAC5BD,EAAcE,qBAAuBD,CAC7C,CAII,gCAAWtO,GACP,OAAOqO,EAAcrO,qBAC7B,CACI,gCAAWA,CAAsBsO,GAC7BD,EAAcrO,sBAAwBsO,CAC9C,CAII,gCAAWrO,GACP,OAAOoO,EAAcpO,qBAC7B,CACI,gCAAWA,CAAsBqO,GAC7BD,EAAcpO,sBAAwBqO,CAC9C,CAII,mCAAWvS,GACP,OAAOsS,EAActS,wBAC7B,CACI,mCAAWA,CAAyBuS,GAChCD,EAActS,yBAA2BuS,CACjD,CAII,iCAAWlO,GACP,OAAOiO,EAAcjO,sBAC7B,CACI,iCAAWA,CAAuBkO,GAC9BD,EAAcjO,uBAAyBkO,CAC/C,CAII,iCAAW/N,GACP,OAAO8N,EAAc9N,sBAC7B,CACI,iCAAWA,CAAuB+N,GAC9BD,EAAc9N,uBAAyB+N,CAC/C,CAII,6BAAW5N,GACP,OAAO2N,EAAc3N,kBAC7B,CACI,6BAAWA,CAAmB4N,GAC1BD,EAAc3N,mBAAqB4N,CAC3C,CAII,iCAAWjO,GACP,OAAOgO,EAAchO,sBAC7B,CACI,iCAAWA,CAAuBiO,GAC9BD,EAAchO,uBAAyBiO,CAC/C,CAII,mCAAWpS,GACP,OAAOmS,EAAcnS,wBAC7B,CACI,mCAAWA,CAAyBoS,GAChCD,EAAcnS,yBAA2BoS,CACjD,CAII,qCAAWE,GACP,OAAOH,EAAcG,0BAC7B,CACI,qCAAWA,CAA2BF,GAClCD,EAAcG,2BAA6BF,CACnD,CAII,yBAAW1M,GACP,OAAOyM,EAAczM,cAC7B,CACI,yBAAWA,CAAe0M,GACtBD,EAAczM,eAAiB0M,CACvC,EAMAjW,GAAiBQ,WAAY,EAC7B4V,EAAW,CACPC,EAAmB,mBACpBrW,GAAiBsW,UAAW,uBAAmB,GAClDF,EAAW,CACPG,EAAiB,4CAClBvW,GAAiBsW,UAAW,sBAAkB,GACjDF,EAAW,CACPC,EAAmB,mBACpBrW,GAAiBsW,UAAW,uBAAmB,GAClDF,EAAW,CACPG,EAAiB,qCAClBvW,GAAiBsW,UAAW,sBAAkB,GACjDF,EAAW,CACPC,EAAmB,mBACpBrW,GAAiBsW,UAAW,uBAAmB,GAClDF,EAAW,CACPG,EAAiB,4CAClBvW,GAAiBsW,UAAW,sBAAkB,GACjDF,EAAW,CACPC,EAAmB,sBACpBrW,GAAiBsW,UAAW,0BAAsB,GACrDF,EAAW,CACPG,EAAiB,qCAClBvW,GAAiBsW,UAAW,yBAAqB,GACpDF,EAAW,CACPC,EAAmB,oBACpBrW,GAAiBsW,UAAW,wBAAoB,GACnDF,EAAW,CACPG,EAAiB,qCAClBvW,GAAiBsW,UAAW,uBAAmB,GAClDF,EAAW,CACPC,EAAmB,oBACpBrW,GAAiBsW,UAAW,wBAAoB,GACnDF,EAAW,CACPG,EAAiB,qCAClBvW,GAAiBsW,UAAW,uBAAmB,GAClDF,EAAW,CACPC,EAAmB,gBACpBrW,GAAiBsW,UAAW,oBAAgB,GAC/CF,EAAW,CACPG,EAAiB,qCAClBvW,GAAiBsW,UAAW,mBAAe,GAC9CF,EAAW,CACPC,EAAmB,oBACpBrW,GAAiBsW,UAAW,wBAAoB,GACnDF,EAAW,CACPG,EAAiB,qCAClBvW,GAAiBsW,UAAW,uBAAmB,GAClDF,EAAW,CACPC,EAAmB,sBACpBrW,GAAiBsW,UAAW,0BAAsB,GACrDF,EAAW,CACPG,EAAiB,qCAClBvW,GAAiBsW,UAAW,yBAAqB,GACpDF,EAAW,CACPI,EAAkB,YACnBxW,GAAiBsW,UAAW,oBAAgB,GAC/CF,EAAW,CACPI,EAAkB,YACnBxW,GAAiBsW,UAAW,oBAAgB,GAC/CF,EAAW,CACPI,EAAkB,aACnBxW,GAAiBsW,UAAW,qBAAiB,GAChDF,EAAW,CACPI,EAAkB,aACnBxW,GAAiBsW,UAAW,qBAAiB,GAChDF,EAAW,CACPK,KACDzW,GAAiBsW,UAAW,qBAAiB,GAChDF,EAAW,CACPK,EAAU,+BACXzW,GAAiBsW,UAAW,mCAA+B,GAC9DF,EAAW,CACPG,EAAiB,4CAClBvW,GAAiBsW,UAAW,kCAA8B,GAC7DF,EAAW,CACPK,EAAU,8BACXzW,GAAiBsW,UAAW,kCAA8B,GAC7DF,EAAW,CACPG,EAAiB,qCAClBvW,GAAiBsW,UAAW,iCAA6B,GAC5DF,EAAW,CACPK,EAAU,4BACXzW,GAAiBsW,UAAW,gCAA4B,GAC3DF,EAAW,CACPG,EAAiB,qCAClBvW,GAAiBsW,UAAW,+BAA2B,GAC1DF,EAAW,CACPK,EAAU,yBACXzW,GAAiBsW,UAAW,6BAAyB,GACxDF,EAAW,CACPG,EAAiB,qCAClBvW,GAAiBsW,UAAW,4BAAwB,GACvDF,EAAW,CACPK,EAAU,2BACXzW,GAAiBsW,UAAW,+BAA2B,GAC1DF,EAAW,CACPG,EAAiB,qCAClBvW,GAAiBsW,UAAW,8BAA0B,GACzDF,EAAW,CACPK,EAAU,oBACXzW,GAAiBsW,UAAW,wBAAoB,GACnDF,EAAW,CACPG,EAAiB,mCAClBvW,GAAiBsW,UAAW,uBAAmB,GAClDF,EAAW,CACPK,EAAU,4BACXzW,GAAiBsW,UAAW,gCAA4B,GAC3DF,EAAW,CACPG,EAAiB,qCAClBvW,GAAiBsW,UAAW,+BAA2B,GAC1DF,EAAW,CACPK,EAAU,gBACXzW,GAAiBsW,UAAW,oBAAgB,GAC/CF,EAAW,CACPG,EAAiB,qCAClBvW,GAAiBsW,UAAW,mBAAe,GAC9CF,EAAW,CACPK,EAAU,yBACXzW,GAAiBsW,UAAW,6BAAyB,GACxDF,EAAW,CACPG,EAAiB,qCAClBvW,GAAiBsW,UAAW,4BAAwB,GACvDF,EAAW,CACPK,KACDzW,GAAiBsW,UAAW,yBAAqB,GACpDF,EAAW,CACPK,EAAU,cACXzW,GAAiBsW,UAAW,kBAAc,GAC7CF,EAAW,CACPG,EAAiB,qCAClBvW,GAAiBsW,UAAW,iBAAa,GAC5CF,EAAW,CACPK,KACDzW,GAAiBsW,UAAW,yBAAqB,GACpDF,EAAW,CACPK,KACDzW,GAAiBsW,UAAW,yBAAqB,GACpDF,EAAW,CACPK,KACDzW,GAAiBsW,UAAW,mBAAe,GAC9CF,EAAW,CACPK,EAAU,2BACXzW,GAAiBsW,UAAW,+BAA2B,GAC1DF,EAAW,CACPG,EAAiB,qCAClBvW,GAAiBsW,UAAW,8BAA0B,GACzDF,EAAW,CACPM,EAA6B,6BAC9B1W,GAAiBsW,UAAW,iCAA6B,GAC5DF,EAAW,CACPG,EAAiB,oCAClBvW,GAAiBsW,UAAW,gCAA4B,GAC3DF,EAAW,CACPM,EAA6B,6BAC9B1W,GAAiBsW,UAAW,iCAA6B,GAC5DF,EAAW,CACPG,EAAiB,2CAClBvW,GAAiBsW,UAAW,gCAA4B,GAC3DF,EAAW,CACPM,EAA6B,gCAC9B1W,GAAiBsW,UAAW,oCAAgC,GAC/DF,EAAW,CACPG,EAAiB,oCAClBvW,GAAiBsW,UAAW,mCAA+B,GAC9DF,EAAW,CACPM,EAA6B,gCAC9B1W,GAAiBsW,UAAW,oCAAgC,GAC/DF,EAAW,CACPG,EAAiB,oCAClBvW,GAAiBsW,UAAW,mCAA+B,GAC9DF,EAAW,CACPM,EAA6B,8BAC9B1W,GAAiBsW,UAAW,kCAA8B,GAC7DF,EAAW,CACPG,EAAiB,oCAClBvW,GAAiBsW,UAAW,iCAA6B,GAC5DF,EAAW,CACPK,EAAU,qCACXzW,GAAiBsW,UAAW,yCAAqC,GACpEF,EAAW,CACPG,EAAiB,oCAClBvW,GAAiBsW,UAAW,wCAAoC,GACnEF,EAAW,CACPK,EAAU,sCACXzW,GAAiBsW,UAAW,0CAAsC,GACrEF,EAAW,CACPG,EAAiB,qCAClBvW,GAAiBsW,UAAW,yCAAqC,GACpEF,EAAW,CACPK,EAAU,0BACXzW,GAAiBsW,UAAW,8BAA0B,GACzDF,EAAW,CACPG,EAAiB,mCAClBvW,GAAiBsW,UAAW,6BAAyB,GACxDF,EAAW,CACPK,EAAU,qBACXzW,GAAiBsW,UAAW,yBAAqB,GACpDF,EAAW,CACPG,EAAiB,qCAClBvW,GAAiBsW,UAAW,wBAAoB,GACnDF,EAAW,CACPK,EAAU,qBACXzW,GAAiBsW,UAAW,yBAAqB,GACpDF,EAAW,CACPG,EAAiB,qCAClBvW,GAAiBsW,UAAW,wBAAoB,GACnDF,EAAW,CACPK,EAAU,qBACXzW,GAAiBsW,UAAW,yBAAqB,GACpDF,EAAW,CACPG,EAAiB,qCAClBvW,GAAiBsW,UAAW,wBAAoB,GACnDF,EAAW,CACPK,EAAU,gCACXzW,GAAiBsW,UAAW,oCAAgC,GAC/DF,EAAW,CACPG,EAAiB,iCAClBvW,GAAiBsW,UAAW,mCAA+B,GAC9DK,EAAc,2BAA4B3W,IAC1CwT,EAAMoD,uBAA0BvW,GACrB,IAAIL,GAAiB,mBAAoBK"}