{"version":3,"file":"dumpTools-BaBBNyfl.esm.min.js","sources":["../../../../../dev/core/dist/Misc/dumpTools.js"],"sourcesContent":["import { Constants } from \"../Engines/constants\";\nimport { EffectRenderer, EffectWrapper } from \"../Materials/effectRenderer\";\nimport { Tools } from \"./tools\";\nimport { Clamp } from \"../Maths/math.scalar.functions\";\nimport { EngineStore } from \"../Engines/engineStore\";\nimport { Logger } from \"./logger\";\nlet ResourcesPromise = null;\nasync function _CreateDumpResourcesAsync() {\n    // Create a compatible canvas. Prefer an HTMLCanvasElement if possible to avoid alpha issues with OffscreenCanvas + WebGL in many browsers.\n    const canvas = (EngineStore.LastCreatedEngine?.createCanvas(100, 100) ?? new OffscreenCanvas(100, 100)); // will be resized later\n    if (canvas instanceof OffscreenCanvas) {\n        Logger.Warn(\"DumpData: OffscreenCanvas will be used for dumping data. This may result in lossy alpha values.\");\n    }\n    // If WebGL via ThinEngine is not available (e.g. Native), use the BitmapRenderer.\n    // If https://github.com/whatwg/html/issues/10142 is resolved, we can migrate to just BitmapRenderer and avoid an engine dependency altogether.\n    const { ThinEngine: thinEngineClass } = await import(\"../Engines/thinEngine\");\n    if (!thinEngineClass.IsSupported) {\n        if (!canvas.getContext(\"bitmaprenderer\")) {\n            throw new Error(\"DumpData: No WebGL or bitmap rendering context available. Cannot dump data.\");\n        }\n        return { canvas };\n    }\n    const options = {\n        preserveDrawingBuffer: true,\n        depth: false,\n        stencil: false,\n        alpha: true,\n        premultipliedAlpha: false,\n        antialias: false,\n        failIfMajorPerformanceCaveat: false,\n    };\n    const engine = new thinEngineClass(canvas, false, options);\n    // remove this engine from the list of instances to avoid using it for other purposes\n    EngineStore.Instances.pop();\n    // However, make sure to dispose it when no other engines are left\n    EngineStore.OnEnginesDisposedObservable.add((e) => {\n        // guaranteed to run when no other instances are left\n        // only dispose if it's not the current engine\n        if (engine && e !== engine && !engine.isDisposed && EngineStore.Instances.length === 0) {\n            // Dump the engine and the associated resources\n            Dispose();\n        }\n    });\n    engine.getCaps().parallelShaderCompile = undefined;\n    const renderer = new EffectRenderer(engine);\n    const { passPixelShader } = await import(\"../Shaders/pass.fragment\");\n    const wrapper = new EffectWrapper({\n        engine,\n        name: passPixelShader.name,\n        fragmentShader: passPixelShader.shader,\n        samplerNames: [\"textureSampler\"],\n    });\n    return {\n        canvas: canvas,\n        dumpEngine: { engine, renderer, wrapper },\n    };\n}\nasync function _GetDumpResourcesAsync() {\n    if (!ResourcesPromise) {\n        ResourcesPromise = _CreateDumpResourcesAsync();\n    }\n    return await ResourcesPromise;\n}\n/**\n * Dumps the current bound framebuffer\n * @param width defines the rendering width\n * @param height defines the rendering height\n * @param engine defines the hosting engine\n * @param successCallback defines the callback triggered once the data are available\n * @param mimeType defines the mime type of the result\n * @param fileName defines the filename to download. If present, the result will automatically be downloaded\n * @param quality The quality of the image if lossy mimeType is used (e.g. image/jpeg, image/webp). See {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob | HTMLCanvasElement.toBlob()}'s `quality` parameter.\n * @returns a void promise\n */\n// Should have \"Async\" in the name but this is a public API and we can't break it now\n// eslint-disable-next-line no-restricted-syntax\nexport async function DumpFramebuffer(width, height, engine, successCallback, mimeType = \"image/png\", fileName, quality) {\n    // Read the contents of the framebuffer\n    const bufferView = await engine.readPixels(0, 0, width, height);\n    const data = new Uint8Array(bufferView.buffer);\n    DumpData(width, height, data, successCallback, mimeType, fileName, true, undefined, quality);\n}\n/**\n * Dumps an array buffer\n * @param width defines the rendering width\n * @param height defines the rendering height\n * @param data the data array\n * @param mimeType defines the mime type of the result\n * @param fileName defines the filename to download. If present, the result will automatically be downloaded\n * @param invertY true to invert the picture in the Y dimension\n * @param toArrayBuffer true to convert the data to an ArrayBuffer (encoded as `mimeType`) instead of a base64 string\n * @param quality The quality of the image if lossy mimeType is used (e.g. image/jpeg, image/webp). See {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob | HTMLCanvasElement.toBlob()}'s `quality` parameter.\n * @returns a promise that resolve to the final data\n */\nexport async function DumpDataAsync(width, height, data, mimeType = \"image/png\", fileName, invertY = false, toArrayBuffer = false, quality) {\n    // Convert if data are float32\n    if (data instanceof Float32Array) {\n        const data2 = new Uint8Array(data.length);\n        let n = data.length;\n        while (n--) {\n            const v = data[n];\n            data2[n] = Math.round(Clamp(v) * 255);\n        }\n        data = data2;\n    }\n    const resources = await _GetDumpResourcesAsync();\n    // Keep the async render + read from the shared canvas atomic\n    // eslint-disable-next-line no-async-promise-executor\n    return await new Promise(async (resolve) => {\n        if (resources.dumpEngine) {\n            const dumpEngine = resources.dumpEngine;\n            dumpEngine.engine.setSize(width, height, true);\n            // Create the image\n            const texture = dumpEngine.engine.createRawTexture(data, width, height, Constants.TEXTUREFORMAT_RGBA, false, !invertY, Constants.TEXTURE_NEAREST_NEAREST);\n            dumpEngine.renderer.setViewport();\n            dumpEngine.renderer.applyEffectWrapper(dumpEngine.wrapper);\n            dumpEngine.wrapper.effect._bindTexture(\"textureSampler\", texture);\n            dumpEngine.renderer.draw();\n            texture.dispose();\n        }\n        else {\n            const ctx = resources.canvas.getContext(\"bitmaprenderer\");\n            resources.canvas.width = width;\n            resources.canvas.height = height;\n            const imageData = new ImageData(width, height); // ImageData(data, sw, sh) ctor not yet widely implemented\n            imageData.data.set(data);\n            const imageBitmap = await createImageBitmap(imageData, { premultiplyAlpha: \"none\", imageOrientation: invertY ? \"flipY\" : \"from-image\" });\n            ctx.transferFromImageBitmap(imageBitmap);\n        }\n        Tools.ToBlob(resources.canvas, (blob) => {\n            if (!blob) {\n                throw new Error(\"DumpData: Failed to convert canvas to blob.\");\n            }\n            if (fileName !== undefined) {\n                Tools.DownloadBlob(blob, fileName);\n            }\n            const fileReader = new FileReader();\n            fileReader.onload = (event) => {\n                const result = event.target.result;\n                resolve(result);\n            };\n            if (toArrayBuffer) {\n                fileReader.readAsArrayBuffer(blob);\n            }\n            else {\n                fileReader.readAsDataURL(blob);\n            }\n        }, mimeType, quality);\n    });\n}\n/**\n * Dumps an array buffer\n * @param width defines the rendering width\n * @param height defines the rendering height\n * @param data the data array\n * @param successCallback defines the callback triggered once the data are available\n * @param mimeType defines the mime type of the result\n * @param fileName The name of the file to download. If present, the result will automatically be downloaded. If not defined, and `successCallback` is also not defined, the result will automatically be downloaded with an auto-generated file name.\n * @param invertY true to invert the picture in the Y dimension\n * @param toArrayBuffer true to convert the data to an ArrayBuffer (encoded as `mimeType`) instead of a base64 string\n * @param quality The quality of the image if lossy mimeType is used (e.g. image/jpeg, image/webp). See {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob | HTMLCanvasElement.toBlob()}'s `quality` parameter.\n */\nexport function DumpData(width, height, data, successCallback, mimeType = \"image/png\", fileName, invertY = false, toArrayBuffer = false, quality) {\n    // For back-compat: if no fileName and no callback, force download the result\n    if (fileName === undefined && !successCallback) {\n        fileName = \"\";\n    }\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    DumpDataAsync(width, height, data, mimeType, fileName, invertY, toArrayBuffer, quality)\n        // eslint-disable-next-line github/no-then\n        .then((result) => {\n        if (successCallback) {\n            successCallback(result);\n        }\n    });\n}\n/**\n * Dispose the dump tools associated resources\n */\nexport function Dispose() {\n    if (!ResourcesPromise) {\n        return;\n    }\n    // in cases where the engine is not yet created, we need to wait for it to dispose it\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises, github/no-then\n    ResourcesPromise?.then((resources) => {\n        if (resources.canvas instanceof HTMLCanvasElement) {\n            resources.canvas.remove();\n        }\n        if (resources.dumpEngine) {\n            resources.dumpEngine.engine.dispose();\n            resources.dumpEngine.renderer.dispose();\n            resources.dumpEngine.wrapper.dispose();\n        }\n    });\n    ResourcesPromise = null;\n}\n/**\n * Object containing a set of static utilities functions to dump data from a canvas\n * @deprecated use functions\n */\nexport const DumpTools = {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    DumpData,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    DumpDataAsync,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    DumpFramebuffer,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Dispose,\n};\n/**\n * This will be executed automatically for UMD and es5.\n * If esm dev wants the side effects to execute they will have to run it manually\n * Once we build native modules those need to be exported.\n * @internal\n */\nconst InitSideEffects = () => {\n    // References the dependencies.\n    Tools.DumpData = DumpData;\n    Tools.DumpDataAsync = DumpDataAsync;\n    Tools.DumpFramebuffer = DumpFramebuffer;\n};\nInitSideEffects();\n//# sourceMappingURL=dumpTools.js.map"],"names":["ResourcesPromise","async","_GetDumpResourcesAsync","canvas","EngineStore","LastCreatedEngine","createCanvas","OffscreenCanvas","Logger","Warn","ThinEngine","thinEngineClass","import","then","n","cu","IsSupported","getContext","Error","engine","preserveDrawingBuffer","depth","stencil","alpha","premultipliedAlpha","antialias","failIfMajorPerformanceCaveat","Instances","pop","OnEnginesDisposedObservable","add","e","isDisposed","length","Dispose","getCaps","parallelShaderCompile","undefined","renderer","EffectRenderer","passPixelShader","wrapper","EffectWrapper","name","fragmentShader","shader","samplerNames","dumpEngine","_CreateDumpResourcesAsync","DumpFramebuffer","width","height","successCallback","mimeType","fileName","quality","bufferView","readPixels","DumpData","Uint8Array","buffer","DumpDataAsync","data","invertY","toArrayBuffer","Float32Array","data2","v","Math","round","Clamp","resources","Promise","resolve","setSize","texture","createRawTexture","Constants","TEXTUREFORMAT_RGBA","TEXTURE_NEAREST_NEAREST","setViewport","applyEffectWrapper","effect","_bindTexture","draw","dispose","ctx","imageData","ImageData","set","imageBitmap","createImageBitmap","premultiplyAlpha","imageOrientation","transferFromImageBitmap","Tools","ToBlob","blob","DownloadBlob","fileReader","FileReader","onload","event","result","target","readAsArrayBuffer","readAsDataURL","HTMLCanvasElement","remove","DumpTools"],"mappings":"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"}