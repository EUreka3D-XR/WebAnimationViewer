{"version":3,"file":"ktxTextureLoader-DmzZfebH.esm.min.js","sources":["../../../../../dev/core/dist/Misc/khronosTextureContainer.js","../../../../../dev/core/dist/Materials/Textures/ktx2decoderTypes.js","../../../../../dev/core/dist/Misc/khronosTextureContainer2Worker.js","../../../../../dev/core/dist/Misc/khronosTextureContainer2.js","../../../../../dev/core/dist/Materials/Textures/Loaders/ktxTextureLoader.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\nimport { Logger } from \"../Misc/logger\";\n/**\n * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\n * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\n */\nexport class KhronosTextureContainer {\n    /**\n     * Creates a new KhronosTextureContainer\n     * @param data contents of the KTX container file\n     * @param facesExpected should be either 1 or 6, based whether a cube texture or or\n     */\n    constructor(\n    /** contents of the KTX container file */\n    data, facesExpected) {\n        this.data = data;\n        /**\n         * If the container has been made invalid (eg. constructor failed to correctly load array buffer)\n         */\n        this.isInvalid = false;\n        if (!KhronosTextureContainer.IsValid(data)) {\n            this.isInvalid = true;\n            Logger.Error(\"texture missing KTX identifier\");\n            return;\n        }\n        // load the reset of the header in native 32 bit uint\n        const dataSize = Uint32Array.BYTES_PER_ELEMENT;\n        const headerDataView = new DataView(this.data.buffer, this.data.byteOffset + 12, 13 * dataSize);\n        const endianness = headerDataView.getUint32(0, true);\n        const littleEndian = endianness === 0x04030201;\n        this.glType = headerDataView.getUint32(1 * dataSize, littleEndian); // must be 0 for compressed textures\n        this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian); // must be 1 for compressed textures\n        this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian); // must be 0 for compressed textures\n        this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian); // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\n        this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian); // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n        this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n        this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n        this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n        this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian); // used for texture arrays\n        this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian); // used for cubemap textures, should either be 1 or 6\n        this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian); // number of levels; disregard possibility of 0 for compressed textures\n        this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian); // the amount of space after the header for meta-data\n        // Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\n        if (this.glType !== 0) {\n            Logger.Error(\"only compressed formats currently supported\");\n            this.isInvalid = true;\n            return;\n        }\n        else {\n            // value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\n            this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);\n        }\n        if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\n            Logger.Error(\"only 2D textures currently supported\");\n            this.isInvalid = true;\n            return;\n        }\n        if (this.numberOfArrayElements !== 0) {\n            Logger.Error(\"texture arrays not currently supported\");\n            this.isInvalid = true;\n            return;\n        }\n        if (this.numberOfFaces !== facesExpected) {\n            Logger.Error(\"number of faces expected\" + facesExpected + \", but found \" + this.numberOfFaces);\n            this.isInvalid = true;\n            return;\n        }\n        // we now have a completely validated file, so could use existence of loadType as success\n        // would need to make this more elaborate & adjust checks above to support more than one load type\n        this.loadType = KhronosTextureContainer.COMPRESSED_2D;\n    }\n    /**\n     * Uploads KTX content to a Babylon Texture.\n     * It is assumed that the texture has already been created & is currently bound\n     * @internal\n     */\n    uploadLevels(texture, loadMipmaps) {\n        switch (this.loadType) {\n            case KhronosTextureContainer.COMPRESSED_2D:\n                this._upload2DCompressedLevels(texture, loadMipmaps);\n                break;\n            case KhronosTextureContainer.TEX_2D:\n            case KhronosTextureContainer.COMPRESSED_3D:\n            case KhronosTextureContainer.TEX_3D:\n        }\n    }\n    _upload2DCompressedLevels(texture, loadMipmaps) {\n        // initialize width & height for level 1\n        let dataOffset = KhronosTextureContainer.HEADER_LEN + this.bytesOfKeyValueData;\n        let width = this.pixelWidth;\n        let height = this.pixelHeight;\n        const mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n        for (let level = 0; level < mipmapCount; level++) {\n            const imageSize = new Int32Array(this.data.buffer, this.data.byteOffset + dataOffset, 1)[0]; // size per face, since not supporting array cubemaps\n            dataOffset += 4; //image data starts from next multiple of 4 offset. Each face refers to same imagesize field above.\n            for (let face = 0; face < this.numberOfFaces; face++) {\n                const byteArray = new Uint8Array(this.data.buffer, this.data.byteOffset + dataOffset, imageSize);\n                const engine = texture.getEngine();\n                engine._uploadCompressedDataToTextureDirectly(texture, texture.format, width, height, byteArray, face, level);\n                dataOffset += imageSize; // add size of the image for the next face/mipmap\n                dataOffset += 3 - ((imageSize + 3) % 4); // add padding for odd sized image\n            }\n            width = Math.max(1.0, width * 0.5);\n            height = Math.max(1.0, height * 0.5);\n        }\n    }\n    /**\n     * Checks if the given data starts with a KTX file identifier.\n     * @param data the data to check\n     * @returns true if the data is a KTX file or false otherwise\n     */\n    static IsValid(data) {\n        if (data.byteLength >= 12) {\n            // '«', 'K', 'T', 'X', ' ', '1', '1', '»', '\\r', '\\n', '\\x1A', '\\n'\n            const identifier = new Uint8Array(data.buffer, data.byteOffset, 12);\n            if (identifier[0] === 0xab &&\n                identifier[1] === 0x4b &&\n                identifier[2] === 0x54 &&\n                identifier[3] === 0x58 &&\n                identifier[4] === 0x20 &&\n                identifier[5] === 0x31 &&\n                identifier[6] === 0x31 &&\n                identifier[7] === 0xbb &&\n                identifier[8] === 0x0d &&\n                identifier[9] === 0x0a &&\n                identifier[10] === 0x1a &&\n                identifier[11] === 0x0a) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nKhronosTextureContainer.HEADER_LEN = 12 + 13 * 4; // identifier + header elements (not including key value meta-data pairs)\n// load types\nKhronosTextureContainer.COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\nKhronosTextureContainer.COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\nKhronosTextureContainer.TEX_2D = 2; // uses a gl.texImage2D()\nKhronosTextureContainer.TEX_3D = 3; // uses a gl.texImage3D()\n//# sourceMappingURL=khronosTextureContainer.js.map","export var SourceTextureFormat;\n(function (SourceTextureFormat) {\n    SourceTextureFormat[SourceTextureFormat[\"ETC1S\"] = 0] = \"ETC1S\";\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    SourceTextureFormat[SourceTextureFormat[\"UASTC4x4\"] = 1] = \"UASTC4x4\";\n})(SourceTextureFormat || (SourceTextureFormat = {}));\nexport var TranscodeTarget;\n(function (TranscodeTarget) {\n    TranscodeTarget[TranscodeTarget[\"ASTC_4X4_RGBA\"] = 0] = \"ASTC_4X4_RGBA\";\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    TranscodeTarget[TranscodeTarget[\"ASTC_4x4_RGBA\"] = 0] = \"ASTC_4x4_RGBA\";\n    TranscodeTarget[TranscodeTarget[\"BC7_RGBA\"] = 1] = \"BC7_RGBA\";\n    TranscodeTarget[TranscodeTarget[\"BC3_RGBA\"] = 2] = \"BC3_RGBA\";\n    TranscodeTarget[TranscodeTarget[\"BC1_RGB\"] = 3] = \"BC1_RGB\";\n    TranscodeTarget[TranscodeTarget[\"PVRTC1_4_RGBA\"] = 4] = \"PVRTC1_4_RGBA\";\n    TranscodeTarget[TranscodeTarget[\"PVRTC1_4_RGB\"] = 5] = \"PVRTC1_4_RGB\";\n    TranscodeTarget[TranscodeTarget[\"ETC2_RGBA\"] = 6] = \"ETC2_RGBA\";\n    TranscodeTarget[TranscodeTarget[\"ETC1_RGB\"] = 7] = \"ETC1_RGB\";\n    TranscodeTarget[TranscodeTarget[\"RGBA32\"] = 8] = \"RGBA32\";\n    TranscodeTarget[TranscodeTarget[\"R8\"] = 9] = \"R8\";\n    TranscodeTarget[TranscodeTarget[\"RG8\"] = 10] = \"RG8\";\n})(TranscodeTarget || (TranscodeTarget = {}));\nexport var EngineFormat;\n(function (EngineFormat) {\n    EngineFormat[EngineFormat[\"COMPRESSED_RGBA_BPTC_UNORM_EXT\"] = 36492] = \"COMPRESSED_RGBA_BPTC_UNORM_EXT\";\n    EngineFormat[EngineFormat[\"COMPRESSED_RGBA_ASTC_4X4_KHR\"] = 37808] = \"COMPRESSED_RGBA_ASTC_4X4_KHR\";\n    EngineFormat[EngineFormat[\"COMPRESSED_RGB_S3TC_DXT1_EXT\"] = 33776] = \"COMPRESSED_RGB_S3TC_DXT1_EXT\";\n    EngineFormat[EngineFormat[\"COMPRESSED_RGBA_S3TC_DXT5_EXT\"] = 33779] = \"COMPRESSED_RGBA_S3TC_DXT5_EXT\";\n    EngineFormat[EngineFormat[\"COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\"] = 35842] = \"COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\";\n    EngineFormat[EngineFormat[\"COMPRESSED_RGB_PVRTC_4BPPV1_IMG\"] = 35840] = \"COMPRESSED_RGB_PVRTC_4BPPV1_IMG\";\n    EngineFormat[EngineFormat[\"COMPRESSED_RGBA8_ETC2_EAC\"] = 37496] = \"COMPRESSED_RGBA8_ETC2_EAC\";\n    EngineFormat[EngineFormat[\"COMPRESSED_RGB8_ETC2\"] = 37492] = \"COMPRESSED_RGB8_ETC2\";\n    EngineFormat[EngineFormat[\"COMPRESSED_RGB_ETC1_WEBGL\"] = 36196] = \"COMPRESSED_RGB_ETC1_WEBGL\";\n    EngineFormat[EngineFormat[\"RGBA8Format\"] = 32856] = \"RGBA8Format\";\n    EngineFormat[EngineFormat[\"R8Format\"] = 33321] = \"R8Format\";\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    EngineFormat[EngineFormat[\"RG8Format\"] = 33323] = \"RG8Format\";\n})(EngineFormat || (EngineFormat = {}));\n//# sourceMappingURL=ktx2decoderTypes.js.map","export function applyConfig(urls, binariesAndModulesContainer) {\n    const KTX2DecoderModule = binariesAndModulesContainer?.jsDecoderModule || KTX2DECODER;\n    if (urls) {\n        if (urls.wasmBaseUrl) {\n            KTX2DecoderModule.Transcoder.WasmBaseUrl = urls.wasmBaseUrl;\n        }\n        if (urls.wasmUASTCToASTC) {\n            KTX2DecoderModule.LiteTranscoder_UASTC_ASTC.WasmModuleURL = urls.wasmUASTCToASTC;\n        }\n        if (urls.wasmUASTCToBC7) {\n            KTX2DecoderModule.LiteTranscoder_UASTC_BC7.WasmModuleURL = urls.wasmUASTCToBC7;\n        }\n        if (urls.wasmUASTCToRGBA_UNORM) {\n            KTX2DecoderModule.LiteTranscoder_UASTC_RGBA_UNORM.WasmModuleURL = urls.wasmUASTCToRGBA_UNORM;\n        }\n        if (urls.wasmUASTCToRGBA_SRGB) {\n            KTX2DecoderModule.LiteTranscoder_UASTC_RGBA_SRGB.WasmModuleURL = urls.wasmUASTCToRGBA_SRGB;\n        }\n        if (urls.wasmUASTCToR8_UNORM) {\n            KTX2DecoderModule.LiteTranscoder_UASTC_R8_UNORM.WasmModuleURL = urls.wasmUASTCToR8_UNORM;\n        }\n        if (urls.wasmUASTCToRG8_UNORM) {\n            KTX2DecoderModule.LiteTranscoder_UASTC_RG8_UNORM.WasmModuleURL = urls.wasmUASTCToRG8_UNORM;\n        }\n        if (urls.jsMSCTranscoder) {\n            KTX2DecoderModule.MSCTranscoder.JSModuleURL = urls.jsMSCTranscoder;\n        }\n        if (urls.wasmMSCTranscoder) {\n            KTX2DecoderModule.MSCTranscoder.WasmModuleURL = urls.wasmMSCTranscoder;\n        }\n        if (urls.wasmZSTDDecoder) {\n            KTX2DecoderModule.ZSTDDecoder.WasmModuleURL = urls.wasmZSTDDecoder;\n        }\n    }\n    if (binariesAndModulesContainer) {\n        if (binariesAndModulesContainer.wasmUASTCToASTC) {\n            KTX2DecoderModule.LiteTranscoder_UASTC_ASTC.WasmBinary = binariesAndModulesContainer.wasmUASTCToASTC;\n        }\n        if (binariesAndModulesContainer.wasmUASTCToBC7) {\n            KTX2DecoderModule.LiteTranscoder_UASTC_BC7.WasmBinary = binariesAndModulesContainer.wasmUASTCToBC7;\n        }\n        if (binariesAndModulesContainer.wasmUASTCToRGBA_UNORM) {\n            KTX2DecoderModule.LiteTranscoder_UASTC_RGBA_UNORM.WasmBinary = binariesAndModulesContainer.wasmUASTCToRGBA_UNORM;\n        }\n        if (binariesAndModulesContainer.wasmUASTCToRGBA_SRGB) {\n            KTX2DecoderModule.LiteTranscoder_UASTC_RGBA_SRGB.WasmBinary = binariesAndModulesContainer.wasmUASTCToRGBA_SRGB;\n        }\n        if (binariesAndModulesContainer.wasmUASTCToR8_UNORM) {\n            KTX2DecoderModule.LiteTranscoder_UASTC_R8_UNORM.WasmBinary = binariesAndModulesContainer.wasmUASTCToR8_UNORM;\n        }\n        if (binariesAndModulesContainer.wasmUASTCToRG8_UNORM) {\n            KTX2DecoderModule.LiteTranscoder_UASTC_RG8_UNORM.WasmBinary = binariesAndModulesContainer.wasmUASTCToRG8_UNORM;\n        }\n        if (binariesAndModulesContainer.jsMSCTranscoder) {\n            KTX2DecoderModule.MSCTranscoder.JSModule = binariesAndModulesContainer.jsMSCTranscoder;\n        }\n        if (binariesAndModulesContainer.wasmMSCTranscoder) {\n            KTX2DecoderModule.MSCTranscoder.WasmBinary = binariesAndModulesContainer.wasmMSCTranscoder;\n        }\n        if (binariesAndModulesContainer.wasmZSTDDecoder) {\n            KTX2DecoderModule.ZSTDDecoder.WasmBinary = binariesAndModulesContainer.wasmZSTDDecoder;\n        }\n    }\n}\nexport function workerFunction(KTX2DecoderModule) {\n    if (typeof KTX2DecoderModule === \"undefined\" && typeof KTX2DECODER !== \"undefined\") {\n        KTX2DecoderModule = KTX2DECODER;\n    }\n    let ktx2Decoder;\n    onmessage = (event) => {\n        if (!event.data) {\n            return;\n        }\n        switch (event.data.action) {\n            case \"init\": {\n                const urls = event.data.urls;\n                if (urls) {\n                    if (urls.jsDecoderModule && typeof KTX2DecoderModule === \"undefined\") {\n                        importScripts(urls.jsDecoderModule);\n                        // assuming global namespace populated by the script (UMD pattern)\n                        KTX2DecoderModule = KTX2DECODER;\n                    }\n                    applyConfig(urls);\n                }\n                if (event.data.wasmBinaries) {\n                    applyConfig(undefined, { ...event.data.wasmBinaries, jsDecoderModule: KTX2DecoderModule });\n                }\n                ktx2Decoder = new KTX2DecoderModule.KTX2Decoder();\n                postMessage({ action: \"init\" });\n                break;\n            }\n            case \"setDefaultDecoderOptions\": {\n                KTX2DecoderModule.KTX2Decoder.DefaultDecoderOptions = event.data.options;\n                break;\n            }\n            case \"decode\":\n                ktx2Decoder\n                    .decode(event.data.data, event.data.caps, event.data.options)\n                    // eslint-disable-next-line github/no-then\n                    .then((data) => {\n                    const buffers = [];\n                    for (let mip = 0; mip < data.mipmaps.length; ++mip) {\n                        const mipmap = data.mipmaps[mip];\n                        if (mipmap && mipmap.data) {\n                            buffers.push(mipmap.data.buffer);\n                        }\n                    }\n                    postMessage({ action: \"decoded\", success: true, decodedData: data }, buffers);\n                })\n                    // eslint-disable-next-line github/no-then\n                    .catch((reason) => {\n                    postMessage({ action: \"decoded\", success: false, msg: reason });\n                });\n                break;\n        }\n    };\n}\nexport async function initializeWebWorker(worker, wasmBinaries, urls) {\n    return await new Promise((resolve, reject) => {\n        const onError = (error) => {\n            worker.removeEventListener(\"error\", onError);\n            worker.removeEventListener(\"message\", onMessage);\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n            reject(error);\n        };\n        const onMessage = (message) => {\n            if (message.data.action === \"init\") {\n                worker.removeEventListener(\"error\", onError);\n                worker.removeEventListener(\"message\", onMessage);\n                resolve(worker);\n            }\n        };\n        worker.addEventListener(\"error\", onError);\n        worker.addEventListener(\"message\", onMessage);\n        worker.postMessage({\n            action: \"init\",\n            urls,\n            wasmBinaries,\n        });\n    });\n}\n//# sourceMappingURL=khronosTextureContainer2Worker.js.map","import { Constants } from \"../Engines/constants\";\nimport { AutoReleaseWorkerPool } from \"./workerPool\";\nimport { Tools } from \"./tools\";\nimport { TranscodeTarget } from \"core/Materials/Textures/ktx2decoderTypes\";\nimport { applyConfig, initializeWebWorker, workerFunction } from \"./khronosTextureContainer2Worker\";\n/**\n * Class that defines the default KTX2 decoder options.\n *\n * This class is useful for providing options to the KTX2 decoder to control how the source data is transcoded.\n */\nexport class DefaultKTX2DecoderOptions {\n    constructor() {\n        this._isDirty = true;\n        this._useRGBAIfOnlyBC1BC3AvailableWhenUASTC = true;\n        this._ktx2DecoderOptions = {};\n    }\n    /**\n     * Gets the dirty flag\n     */\n    get isDirty() {\n        return this._isDirty;\n    }\n    /**\n     * force a (uncompressed) RGBA transcoded format if transcoding a UASTC source format and ASTC + BC7 are not available as a compressed transcoded format\n     */\n    get useRGBAIfASTCBC7NotAvailableWhenUASTC() {\n        return this._useRGBAIfASTCBC7NotAvailableWhenUASTC;\n    }\n    set useRGBAIfASTCBC7NotAvailableWhenUASTC(value) {\n        if (this._useRGBAIfASTCBC7NotAvailableWhenUASTC === value) {\n            return;\n        }\n        this._useRGBAIfASTCBC7NotAvailableWhenUASTC = value;\n        this._isDirty = true;\n    }\n    /**\n     * force a (uncompressed) RGBA transcoded format if transcoding a UASTC source format and only BC1 or BC3 are available as a compressed transcoded format.\n     * This property is true by default to favor speed over memory, because currently transcoding from UASTC to BC1/3 is slow because the transcoder transcodes\n     * to uncompressed and then recompresses the texture\n     */\n    get useRGBAIfOnlyBC1BC3AvailableWhenUASTC() {\n        return this._useRGBAIfOnlyBC1BC3AvailableWhenUASTC;\n    }\n    set useRGBAIfOnlyBC1BC3AvailableWhenUASTC(value) {\n        if (this._useRGBAIfOnlyBC1BC3AvailableWhenUASTC === value) {\n            return;\n        }\n        this._useRGBAIfOnlyBC1BC3AvailableWhenUASTC = value;\n        this._isDirty = true;\n    }\n    /**\n     * force to always use (uncompressed) RGBA for transcoded format\n     */\n    get forceRGBA() {\n        return this._forceRGBA;\n    }\n    set forceRGBA(value) {\n        if (this._forceRGBA === value) {\n            return;\n        }\n        this._forceRGBA = value;\n        this._isDirty = true;\n    }\n    /**\n     * force to always use (uncompressed) R8 for transcoded format\n     */\n    get forceR8() {\n        return this._forceR8;\n    }\n    set forceR8(value) {\n        if (this._forceR8 === value) {\n            return;\n        }\n        this._forceR8 = value;\n        this._isDirty = true;\n    }\n    /**\n     * force to always use (uncompressed) RG8 for transcoded format\n     */\n    get forceRG8() {\n        return this._forceRG8;\n    }\n    set forceRG8(value) {\n        if (this._forceRG8 === value) {\n            return;\n        }\n        this._forceRG8 = value;\n        this._isDirty = true;\n    }\n    /**\n     * list of transcoders to bypass when looking for a suitable transcoder. The available transcoders are:\n     *      UniversalTranscoder_UASTC_ASTC\n     *      UniversalTranscoder_UASTC_BC7\n     *      UniversalTranscoder_UASTC_RGBA_UNORM\n     *      UniversalTranscoder_UASTC_RGBA_SRGB\n     *      UniversalTranscoder_UASTC_R8_UNORM\n     *      UniversalTranscoder_UASTC_RG8_UNORM\n     *      MSCTranscoder\n     */\n    get bypassTranscoders() {\n        return this._bypassTranscoders;\n    }\n    set bypassTranscoders(value) {\n        if (this._bypassTranscoders === value) {\n            return;\n        }\n        this._bypassTranscoders = value;\n        this._isDirty = true;\n    }\n    /** @internal */\n    _getKTX2DecoderOptions() {\n        if (!this._isDirty) {\n            return this._ktx2DecoderOptions;\n        }\n        this._isDirty = false;\n        const options = {};\n        if (this._useRGBAIfASTCBC7NotAvailableWhenUASTC !== undefined) {\n            options.useRGBAIfASTCBC7NotAvailableWhenUASTC = this._useRGBAIfASTCBC7NotAvailableWhenUASTC;\n        }\n        if (this._forceRGBA !== undefined) {\n            options.forceRGBA = this._forceRGBA;\n        }\n        if (this._forceR8 !== undefined) {\n            options.forceR8 = this._forceR8;\n        }\n        if (this._forceRG8 !== undefined) {\n            options.forceRG8 = this._forceRG8;\n        }\n        if (this._bypassTranscoders !== undefined) {\n            options.bypassTranscoders = this._bypassTranscoders;\n        }\n        if (this.useRGBAIfOnlyBC1BC3AvailableWhenUASTC) {\n            options.transcodeFormatDecisionTree = {\n                UASTC: {\n                    transcodeFormat: [TranscodeTarget.BC1_RGB, TranscodeTarget.BC3_RGBA],\n                    yes: {\n                        transcodeFormat: TranscodeTarget.RGBA32,\n                        engineFormat: 32856 /* EngineFormat.RGBA8Format */,\n                        roundToMultiple4: false,\n                    },\n                },\n            };\n        }\n        this._ktx2DecoderOptions = options;\n        return options;\n    }\n}\n/**\n * Class for loading KTX2 files\n */\nexport class KhronosTextureContainer2 {\n    static GetDefaultNumWorkers() {\n        if (typeof navigator !== \"object\" || !navigator.hardwareConcurrency) {\n            return 1;\n        }\n        // Use 50% of the available logical processors but capped at 4.\n        return Math.min(Math.floor(navigator.hardwareConcurrency * 0.5), 4);\n    }\n    static _Initialize(numWorkers) {\n        if (KhronosTextureContainer2._WorkerPoolPromise || KhronosTextureContainer2._DecoderModulePromise) {\n            return;\n        }\n        const urls = {\n            wasmBaseUrl: Tools.ScriptBaseUrl,\n            jsDecoderModule: Tools.GetBabylonScriptURL(this.URLConfig.jsDecoderModule, true),\n            wasmUASTCToASTC: Tools.GetBabylonScriptURL(this.URLConfig.wasmUASTCToASTC, true),\n            wasmUASTCToBC7: Tools.GetBabylonScriptURL(this.URLConfig.wasmUASTCToBC7, true),\n            wasmUASTCToRGBA_UNORM: Tools.GetBabylonScriptURL(this.URLConfig.wasmUASTCToRGBA_UNORM, true),\n            wasmUASTCToRGBA_SRGB: Tools.GetBabylonScriptURL(this.URLConfig.wasmUASTCToRGBA_SRGB, true),\n            wasmUASTCToR8_UNORM: Tools.GetBabylonScriptURL(this.URLConfig.wasmUASTCToR8_UNORM, true),\n            wasmUASTCToRG8_UNORM: Tools.GetBabylonScriptURL(this.URLConfig.wasmUASTCToRG8_UNORM, true),\n            jsMSCTranscoder: Tools.GetBabylonScriptURL(this.URLConfig.jsMSCTranscoder, true),\n            wasmMSCTranscoder: Tools.GetBabylonScriptURL(this.URLConfig.wasmMSCTranscoder, true),\n            wasmZSTDDecoder: Tools.GetBabylonScriptURL(this.URLConfig.wasmZSTDDecoder, true),\n        };\n        if (numWorkers && typeof Worker === \"function\" && typeof URL !== \"undefined\") {\n            KhronosTextureContainer2._WorkerPoolPromise = new Promise((resolve) => {\n                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                const workerContent = `${applyConfig}(${workerFunction})()`;\n                const workerBlobUrl = URL.createObjectURL(new Blob([workerContent], { type: \"application/javascript\" }));\n                resolve(new AutoReleaseWorkerPool(numWorkers, async () => await initializeWebWorker(new Worker(workerBlobUrl), undefined, urls)));\n            });\n        }\n        else {\n            if (typeof KhronosTextureContainer2._KTX2DecoderModule === \"undefined\") {\n                // eslint-disable-next-line github/no-then\n                KhronosTextureContainer2._DecoderModulePromise = Tools.LoadBabylonScriptAsync(urls.jsDecoderModule).then(() => {\n                    KhronosTextureContainer2._KTX2DecoderModule = KTX2DECODER;\n                    KhronosTextureContainer2._KTX2DecoderModule.MSCTranscoder.UseFromWorkerThread = false;\n                    KhronosTextureContainer2._KTX2DecoderModule.WASMMemoryManager.LoadBinariesFromCurrentThread = true;\n                    applyConfig(urls, KhronosTextureContainer2._KTX2DecoderModule);\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                    return new KhronosTextureContainer2._KTX2DecoderModule.KTX2Decoder();\n                });\n            }\n            else {\n                KhronosTextureContainer2._KTX2DecoderModule.MSCTranscoder.UseFromWorkerThread = false;\n                KhronosTextureContainer2._KTX2DecoderModule.WASMMemoryManager.LoadBinariesFromCurrentThread = true;\n                KhronosTextureContainer2._DecoderModulePromise = Promise.resolve(new KhronosTextureContainer2._KTX2DecoderModule.KTX2Decoder());\n            }\n        }\n    }\n    /**\n     * Constructor\n     * @param engine The engine to use\n     * @param numWorkersOrOptions The number of workers for async operations. Specify `0` to disable web workers and run synchronously in the current context.\n     */\n    constructor(engine, numWorkersOrOptions = KhronosTextureContainer2.DefaultNumWorkers) {\n        this._engine = engine;\n        const workerPoolOption = (typeof numWorkersOrOptions === \"object\" && numWorkersOrOptions.workerPool) || KhronosTextureContainer2.WorkerPool;\n        if (workerPoolOption) {\n            KhronosTextureContainer2._WorkerPoolPromise = Promise.resolve(workerPoolOption);\n        }\n        else {\n            // set the KTX2 decoder module\n            if (typeof numWorkersOrOptions === \"object\") {\n                KhronosTextureContainer2._KTX2DecoderModule = numWorkersOrOptions?.binariesAndModulesContainer?.jsDecoderModule;\n            }\n            else if (typeof KTX2DECODER !== \"undefined\") {\n                KhronosTextureContainer2._KTX2DecoderModule = KTX2DECODER;\n            }\n            const numberOfWorkers = typeof numWorkersOrOptions === \"number\" ? numWorkersOrOptions : (numWorkersOrOptions.numWorkers ?? KhronosTextureContainer2.DefaultNumWorkers);\n            KhronosTextureContainer2._Initialize(numberOfWorkers);\n        }\n    }\n    /**\n     * @internal\n     */\n    async _uploadAsync(data, internalTexture, options) {\n        const caps = this._engine.getCaps();\n        const compressedTexturesCaps = {\n            astc: !!caps.astc,\n            bptc: !!caps.bptc,\n            s3tc: !!caps.s3tc,\n            pvrtc: !!caps.pvrtc,\n            etc2: !!caps.etc2,\n            etc1: !!caps.etc1,\n        };\n        if (KhronosTextureContainer2._WorkerPoolPromise) {\n            const workerPool = await KhronosTextureContainer2._WorkerPoolPromise;\n            return await new Promise((resolve, reject) => {\n                workerPool.push((worker, onComplete) => {\n                    const onError = (error) => {\n                        worker.removeEventListener(\"error\", onError);\n                        worker.removeEventListener(\"message\", onMessage);\n                        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                        reject(error);\n                        onComplete();\n                    };\n                    const onMessage = (message) => {\n                        if (message.data.action === \"decoded\") {\n                            worker.removeEventListener(\"error\", onError);\n                            worker.removeEventListener(\"message\", onMessage);\n                            if (!message.data.success) {\n                                // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                                reject({ message: message.data.msg });\n                            }\n                            else {\n                                try {\n                                    this._createTexture(message.data.decodedData, internalTexture, options);\n                                    resolve();\n                                }\n                                catch (err) {\n                                    // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                                    reject({ message: err });\n                                }\n                            }\n                            onComplete();\n                        }\n                    };\n                    worker.addEventListener(\"error\", onError);\n                    worker.addEventListener(\"message\", onMessage);\n                    worker.postMessage({ action: \"setDefaultDecoderOptions\", options: KhronosTextureContainer2.DefaultDecoderOptions._getKTX2DecoderOptions() });\n                    const dataCopy = new Uint8Array(data.byteLength);\n                    dataCopy.set(new Uint8Array(data.buffer, data.byteOffset, data.byteLength));\n                    worker.postMessage({ action: \"decode\", data: dataCopy, caps: compressedTexturesCaps, options }, [dataCopy.buffer]);\n                });\n            });\n        }\n        else if (KhronosTextureContainer2._DecoderModulePromise) {\n            const decoder = await KhronosTextureContainer2._DecoderModulePromise;\n            if (KhronosTextureContainer2.DefaultDecoderOptions.isDirty) {\n                KhronosTextureContainer2._KTX2DecoderModule.KTX2Decoder.DefaultDecoderOptions = KhronosTextureContainer2.DefaultDecoderOptions._getKTX2DecoderOptions();\n            }\n            return await new Promise((resolve, reject) => {\n                decoder\n                    .decode(data, caps)\n                    // eslint-disable-next-line github/no-then\n                    .then((data) => {\n                    this._createTexture(data, internalTexture);\n                    resolve();\n                })\n                    // eslint-disable-next-line github/no-then\n                    .catch((reason) => {\n                    // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                    reject({ message: reason });\n                });\n            });\n        }\n        throw new Error(\"KTX2 decoder module is not available\");\n    }\n    _createTexture(data, internalTexture, options) {\n        const oglTexture2D = 3553; // gl.TEXTURE_2D\n        this._engine._bindTextureDirectly(oglTexture2D, internalTexture);\n        if (options) {\n            // return back some information about the decoded data\n            options.transcodedFormat = data.transcodedFormat;\n            options.isInGammaSpace = data.isInGammaSpace;\n            options.hasAlpha = data.hasAlpha;\n            options.transcoderName = data.transcoderName;\n        }\n        let isUncompressedFormat = true;\n        switch (data.transcodedFormat) {\n            case 0x8058 /* RGBA8 */:\n                internalTexture.type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\n                internalTexture.format = Constants.TEXTUREFORMAT_RGBA;\n                break;\n            case 0x8229 /* R8 */:\n                internalTexture.type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\n                internalTexture.format = Constants.TEXTUREFORMAT_R;\n                break;\n            case 0x822b /* RG8 */:\n                internalTexture.type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\n                internalTexture.format = Constants.TEXTUREFORMAT_RG;\n                break;\n            default:\n                internalTexture.format = data.transcodedFormat;\n                isUncompressedFormat = false;\n                break;\n        }\n        internalTexture._gammaSpace = data.isInGammaSpace;\n        internalTexture.generateMipMaps = data.mipmaps.length > 1;\n        internalTexture.width = data.mipmaps[0].width;\n        internalTexture.height = data.mipmaps[0].height;\n        if (data.errors) {\n            throw new Error(\"KTX2 container - could not transcode the data. \" + data.errors);\n        }\n        for (let t = 0; t < data.mipmaps.length; ++t) {\n            const mipmap = data.mipmaps[t];\n            if (!mipmap || !mipmap.data) {\n                throw new Error(\"KTX2 container - could not transcode one of the image\");\n            }\n            if (isUncompressedFormat) {\n                // uncompressed RGBA / R8 / RG8\n                internalTexture.width = mipmap.width; // need to set width/height so that the call to _uploadDataToTextureDirectly uses the right dimensions\n                internalTexture.height = mipmap.height;\n                this._engine._uploadDataToTextureDirectly(internalTexture, mipmap.data, 0, t, undefined, true);\n            }\n            else {\n                this._engine._uploadCompressedDataToTextureDirectly(internalTexture, data.transcodedFormat, mipmap.width, mipmap.height, mipmap.data, 0, t);\n            }\n        }\n        internalTexture._extension = \".ktx2\";\n        internalTexture.isReady = true;\n        this._engine._bindTextureDirectly(oglTexture2D, null);\n    }\n    /**\n     * Checks if the given data starts with a KTX2 file identifier.\n     * @param data the data to check\n     * @returns true if the data is a KTX2 file or false otherwise\n     */\n    static IsValid(data) {\n        if (data.byteLength >= 12) {\n            // '«', 'K', 'T', 'X', ' ', '2', '0', '»', '\\r', '\\n', '\\x1A', '\\n'\n            const identifier = new Uint8Array(data.buffer, data.byteOffset, 12);\n            if (identifier[0] === 0xab &&\n                identifier[1] === 0x4b &&\n                identifier[2] === 0x54 &&\n                identifier[3] === 0x58 &&\n                identifier[4] === 0x20 &&\n                identifier[5] === 0x32 &&\n                identifier[6] === 0x30 &&\n                identifier[7] === 0xbb &&\n                identifier[8] === 0x0d &&\n                identifier[9] === 0x0a &&\n                identifier[10] === 0x1a &&\n                identifier[11] === 0x0a) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n/**\n * URLs to use when loading the KTX2 decoder module as well as its dependencies\n * If a url is null, the default url is used (pointing to https://preview.babylonjs.com)\n * Note that jsDecoderModule can't be null and that the other dependencies will only be loaded if necessary\n * Urls you can change:\n *     URLConfig.jsDecoderModule\n *     URLConfig.wasmUASTCToASTC\n *     URLConfig.wasmUASTCToBC7\n *     URLConfig.wasmUASTCToRGBA_UNORM\n *     URLConfig.wasmUASTCToRGBA_SRGB\n *     URLConfig.wasmUASTCToR8_UNORM\n *     URLConfig.wasmUASTCToRG8_UNORM\n *     URLConfig.jsMSCTranscoder\n *     URLConfig.wasmMSCTranscoder\n *     URLConfig.wasmZSTDDecoder\n * You can see their default values in this PG: https://playground.babylonjs.com/#EIJH8L#29\n */\nKhronosTextureContainer2.URLConfig = {\n    jsDecoderModule: \"https://cdn.babylonjs.com/babylon.ktx2Decoder.js\",\n    wasmUASTCToASTC: null,\n    wasmUASTCToBC7: null,\n    wasmUASTCToRGBA_UNORM: null,\n    wasmUASTCToRGBA_SRGB: null,\n    wasmUASTCToR8_UNORM: null,\n    wasmUASTCToRG8_UNORM: null,\n    jsMSCTranscoder: null,\n    wasmMSCTranscoder: null,\n    wasmZSTDDecoder: null,\n};\n/**\n * Default number of workers used to handle data decoding\n */\nKhronosTextureContainer2.DefaultNumWorkers = KhronosTextureContainer2.GetDefaultNumWorkers();\n/**\n * Default configuration for the KTX2 decoder.\n * The options defined in this way have priority over those passed when creating a KTX2 texture with new Texture(...).\n */\nKhronosTextureContainer2.DefaultDecoderOptions = new DefaultKTX2DecoderOptions();\n//# sourceMappingURL=khronosTextureContainer2.js.map","import { KhronosTextureContainer } from \"../../../Misc/khronosTextureContainer\";\nimport { KhronosTextureContainer2 } from \"../../../Misc/khronosTextureContainer2\";\nimport { Logger } from \"../../../Misc/logger\";\nimport { Constants } from \"../../../Engines/constants\";\nfunction MapSRGBToLinear(format) {\n    switch (format) {\n        case Constants.TEXTUREFORMAT_COMPRESSED_SRGB_S3TC_DXT1_EXT:\n            return Constants.TEXTUREFORMAT_COMPRESSED_RGB_S3TC_DXT1;\n        case Constants.TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT:\n            return Constants.TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT3;\n        case Constants.TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT:\n            return Constants.TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT5;\n        case Constants.TEXTUREFORMAT_COMPRESSED_SRGB8_ETC2:\n            return Constants.TEXTUREFORMAT_COMPRESSED_RGB8_ETC2;\n        case Constants.TEXTUREFORMAT_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:\n            return Constants.TEXTUREFORMAT_COMPRESSED_RGBA8_ETC2_EAC;\n        case Constants.TEXTUREFORMAT_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2:\n            return Constants.TEXTUREFORMAT_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;\n        case Constants.TEXTUREFORMAT_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:\n            return Constants.TEXTUREFORMAT_COMPRESSED_RGBA_ASTC_4x4;\n        case Constants.TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_BPTC_UNORM:\n            return Constants.TEXTUREFORMAT_COMPRESSED_RGBA_BPTC_UNORM;\n    }\n    return null;\n}\n/**\n * Implementation of the KTX Texture Loader.\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _KTXTextureLoader {\n    constructor() {\n        /**\n         * Defines whether the loader supports cascade loading the different faces.\n         */\n        this.supportCascades = false;\n    }\n    /**\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param createPolynomials will be true if polynomials have been requested\n     * @param onLoad defines the callback to trigger once the texture is ready\n     */\n    loadCubeData(data, texture, createPolynomials, onLoad) {\n        if (Array.isArray(data)) {\n            return;\n        }\n        // Need to invert vScale as invertY via UNPACK_FLIP_Y_WEBGL is not supported by compressed texture\n        texture._invertVScale = !texture.invertY;\n        const engine = texture.getEngine();\n        const ktx = new KhronosTextureContainer(data, 6);\n        const loadMipmap = ktx.numberOfMipmapLevels > 1 && texture.generateMipMaps;\n        engine._unpackFlipY(true);\n        ktx.uploadLevels(texture, texture.generateMipMaps);\n        texture.width = ktx.pixelWidth;\n        texture.height = ktx.pixelHeight;\n        engine._setCubeMapTextureParams(texture, loadMipmap, ktx.numberOfMipmapLevels - 1);\n        texture.isReady = true;\n        texture.onLoadedObservable.notifyObservers(texture);\n        texture.onLoadedObservable.clear();\n        if (onLoad) {\n            onLoad();\n        }\n    }\n    /**\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param callback defines the method to call once ready to upload\n     * @param options\n     */\n    loadData(data, texture, callback, options) {\n        if (KhronosTextureContainer.IsValid(data)) {\n            // Need to invert vScale as invertY via UNPACK_FLIP_Y_WEBGL is not supported by compressed texture\n            texture._invertVScale = !texture.invertY;\n            const ktx = new KhronosTextureContainer(data, 1);\n            const mappedFormat = MapSRGBToLinear(ktx.glInternalFormat);\n            if (mappedFormat) {\n                texture.format = mappedFormat;\n                texture._useSRGBBuffer = texture.getEngine()._getUseSRGBBuffer(true, texture.generateMipMaps);\n                texture._gammaSpace = true;\n            }\n            else {\n                texture.format = ktx.glInternalFormat;\n            }\n            callback(ktx.pixelWidth, ktx.pixelHeight, texture.generateMipMaps, true, () => {\n                ktx.uploadLevels(texture, texture.generateMipMaps);\n            }, ktx.isInvalid);\n        }\n        else if (KhronosTextureContainer2.IsValid(data)) {\n            const ktx2 = new KhronosTextureContainer2(texture.getEngine());\n            // eslint-disable-next-line github/no-then\n            ktx2._uploadAsync(data, texture, options).then(() => {\n                callback(texture.width, texture.height, texture.generateMipMaps, true, () => { }, false);\n            }, (error) => {\n                Logger.Warn(`Failed to load KTX2 texture data: ${error.message}`);\n                callback(0, 0, false, false, () => { }, true);\n            });\n        }\n        else {\n            Logger.Error(\"texture missing KTX identifier\");\n            callback(0, 0, false, false, () => { }, true);\n        }\n    }\n}\n//# sourceMappingURL=ktxTextureLoader.js.map"],"names":["KhronosTextureContainer","constructor","data","facesExpected","this","isInvalid","IsValid","Logger","Error","dataSize","Uint32Array","BYTES_PER_ELEMENT","headerDataView","DataView","buffer","byteOffset","littleEndian","getUint32","glType","glTypeSize","glFormat","glInternalFormat","glBaseInternalFormat","pixelWidth","pixelHeight","pixelDepth","numberOfArrayElements","numberOfFaces","numberOfMipmapLevels","bytesOfKeyValueData","Math","max","loadType","COMPRESSED_2D","uploadLevels","texture","loadMipmaps","_upload2DCompressedLevels","dataOffset","HEADER_LEN","width","height","mipmapCount","level","imageSize","Int32Array","face","byteArray","Uint8Array","getEngine","_uploadCompressedDataToTextureDirectly","format","byteLength","identifier","SourceTextureFormat","TranscodeTarget","EngineFormat","applyConfig","urls","binariesAndModulesContainer","KTX2DecoderModule","jsDecoderModule","KTX2DECODER","wasmBaseUrl","Transcoder","WasmBaseUrl","wasmUASTCToASTC","LiteTranscoder_UASTC_ASTC","WasmModuleURL","wasmUASTCToBC7","LiteTranscoder_UASTC_BC7","wasmUASTCToRGBA_UNORM","LiteTranscoder_UASTC_RGBA_UNORM","wasmUASTCToRGBA_SRGB","LiteTranscoder_UASTC_RGBA_SRGB","wasmUASTCToR8_UNORM","LiteTranscoder_UASTC_R8_UNORM","wasmUASTCToRG8_UNORM","LiteTranscoder_UASTC_RG8_UNORM","jsMSCTranscoder","MSCTranscoder","JSModuleURL","wasmMSCTranscoder","wasmZSTDDecoder","ZSTDDecoder","WasmBinary","JSModule","workerFunction","ktx2Decoder","onmessage","event","action","importScripts","wasmBinaries","undefined","KTX2Decoder","postMessage","DefaultDecoderOptions","options","decode","caps","then","buffers","mip","mipmaps","length","mipmap","push","success","decodedData","catch","reason","msg","COMPRESSED_3D","TEX_2D","TEX_3D","KhronosTextureContainer2","GetDefaultNumWorkers","navigator","hardwareConcurrency","min","floor","_Initialize","numWorkers","_WorkerPoolPromise","_DecoderModulePromise","Tools","ScriptBaseUrl","GetBabylonScriptURL","URLConfig","Worker","URL","Promise","resolve","workerContent","workerBlobUrl","createObjectURL","Blob","type","AutoReleaseWorkerPool","async","worker","reject","onError","error","removeEventListener","onMessage","message","addEventListener","initializeWebWorker","_KTX2DecoderModule","LoadBabylonScriptAsync","UseFromWorkerThread","WASMMemoryManager","LoadBinariesFromCurrentThread","engine","numWorkersOrOptions","DefaultNumWorkers","_engine","workerPoolOption","workerPool","WorkerPool","numberOfWorkers","_uploadAsync","internalTexture","getCaps","compressedTexturesCaps","astc","bptc","s3tc","pvrtc","etc2","etc1","onComplete","_createTexture","err","_getKTX2DecoderOptions","dataCopy","set","decoder","isDirty","_bindTextureDirectly","transcodedFormat","isInGammaSpace","hasAlpha","transcoderName","isUncompressedFormat","Constants","TEXTURETYPE_UNSIGNED_BYTE","TEXTUREFORMAT_RGBA","TEXTUREFORMAT_R","TEXTUREFORMAT_RG","_gammaSpace","generateMipMaps","errors","t","_uploadDataToTextureDirectly","_extension","isReady","_isDirty","_useRGBAIfOnlyBC1BC3AvailableWhenUASTC","_ktx2DecoderOptions","useRGBAIfASTCBC7NotAvailableWhenUASTC","_useRGBAIfASTCBC7NotAvailableWhenUASTC","value","useRGBAIfOnlyBC1BC3AvailableWhenUASTC","forceRGBA","_forceRGBA","forceR8","_forceR8","forceRG8","_forceRG8","bypassTranscoders","_bypassTranscoders","transcodeFormatDecisionTree","UASTC","transcodeFormat","BC1_RGB","BC3_RGBA","yes","RGBA32","engineFormat","roundToMultiple4","_KTXTextureLoader","supportCascades","loadCubeData","createPolynomials","onLoad","Array","isArray","_invertVScale","invertY","ktx","loadMipmap","_unpackFlipY","_setCubeMapTextureParams","onLoadedObservable","notifyObservers","clear","loadData","callback","mappedFormat","TEXTUREFORMAT_COMPRESSED_SRGB_S3TC_DXT1_EXT","TEXTUREFORMAT_COMPRESSED_RGB_S3TC_DXT1","TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT","TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT3","TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT","TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT5","TEXTUREFORMAT_COMPRESSED_SRGB8_ETC2","TEXTUREFORMAT_COMPRESSED_RGB8_ETC2","TEXTUREFORMAT_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","TEXTUREFORMAT_COMPRESSED_RGBA8_ETC2_EAC","TEXTUREFORMAT_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2","TEXTUREFORMAT_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2","TEXTUREFORMAT_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR","TEXTUREFORMAT_COMPRESSED_RGBA_ASTC_4x4","TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_BPTC_UNORM","TEXTUREFORMAT_COMPRESSED_RGBA_BPTC_UNORM","MapSRGBToLinear","_useSRGBBuffer","_getUseSRGBBuffer","Warn"],"mappings":"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"}