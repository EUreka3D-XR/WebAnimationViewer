{"version":3,"file":"imageProcessing.fragment-hLYCNi7u.esm.min.js","sources":["../../../../../dev/core/dist/ShadersWGSL/imageProcessing.fragment.js"],"sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/imageProcessingDeclaration\";\nimport \"./ShadersInclude/helperFunctions\";\nimport \"./ShadersInclude/imageProcessingFunctions\";\nconst name = \"imageProcessingPixelShader\";\nconst shader = `varying vUV: vec2f;var textureSamplerSampler: sampler;var textureSampler: texture_2d<f32>;\n#include<imageProcessingDeclaration>\n#include<helperFunctions>\n#include<imageProcessingFunctions>\n#define CUSTOM_FRAGMENT_DEFINITIONS\n@fragment\nfn main(input: FragmentInputs)->FragmentOutputs {var result: vec4f=textureSample(textureSampler,textureSamplerSampler,input.vUV);result=vec4f(max(result.rgb,vec3f(0.)),result.a);\n#ifdef IMAGEPROCESSING\n#ifndef FROMLINEARSPACE\nresult=vec4f(toLinearSpaceVec3(result.rgb),result.a);\n#endif\nresult=applyImageProcessing(result);\n#else\n#ifdef FROMLINEARSPACE\nresult=applyImageProcessing(result);\n#endif\n#endif\nfragmentOutputs.color=result;}`;\n// Sideeffect\nif (!ShaderStore.ShadersStoreWGSL[name]) {\n    ShaderStore.ShadersStoreWGSL[name] = shader;\n}\n/** @internal */\nexport const imageProcessingPixelShaderWGSL = { name, shader };\n//# sourceMappingURL=imageProcessing.fragment.js.map"],"names":["name","shader","ShaderStore","ShadersStoreWGSL","imageProcessingPixelShaderWGSL"],"mappings":"qJAKA,MAAMA,EAAO,6BACPC,EAAS,irBAmBVC,EAAYC,iBAAiBH,KAC9BE,EAAYC,iBAAiBH,GAAQC,GAG7B,MAACG,EAAiC,CAAEJ,OAAMC"}