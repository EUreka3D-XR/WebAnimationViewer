{"version":3,"file":"prePassRendererSceneComponent-BhUsZgnS.esm.js","sources":["../../../../../dev/core/dist/PostProcesses/thinImageProcessingPostProcess.js","../../../../../dev/core/dist/PostProcesses/imageProcessingPostProcess.js","../../../../../dev/core/dist/Materials/Textures/prePassRenderTarget.js","../../../../../dev/core/dist/Rendering/prePassRenderer.js","../../../../../dev/core/dist/Rendering/prePassRendererSceneComponent.js"],"sourcesContent":["import { EffectWrapper } from \"../Materials/effectRenderer\";\nimport { Engine } from \"../Engines/engine\";\nimport { EngineStore } from \"../Engines/engineStore\";\nimport { ImageProcessingConfiguration } from \"../Materials/imageProcessingConfiguration\";\n/**\n * Post process used to apply image processing to a scene\n */\nexport class ThinImageProcessingPostProcess extends EffectWrapper {\n    _gatherImports(useWebGPU, list) {\n        if (useWebGPU) {\n            this._webGPUReady = true;\n            list.push(import(\"../ShadersWGSL/imageProcessing.fragment\"));\n        }\n        else {\n            list.push(import(\"../Shaders/imageProcessing.fragment\"));\n        }\n    }\n    /**\n     * Gets the image processing configuration used either in this material.\n     */\n    get imageProcessingConfiguration() {\n        return this._imageProcessingConfiguration;\n    }\n    /**\n     * Sets the Default image processing configuration used either in the this material.\n     *\n     * If sets to null, the scene one is in use.\n     */\n    set imageProcessingConfiguration(value) {\n        // We are almost sure it is applied by post process as\n        // We are in the post process :-)\n        value.applyByPostProcess = true;\n        this._attachImageProcessingConfiguration(value);\n    }\n    /**\n     * Attaches a new image processing configuration to the PBR Material.\n     * @param configuration\n     * @param doNotBuild\n     */\n    _attachImageProcessingConfiguration(configuration, doNotBuild = false) {\n        if (configuration === this._imageProcessingConfiguration) {\n            return;\n        }\n        // Detaches observer.\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n        }\n        // Pick the scene configuration if needed.\n        if (!configuration) {\n            let scene = this.options.scene;\n            if (!scene) {\n                const engine = this.options.engine;\n                if (engine && engine.scenes) {\n                    const scenes = engine.scenes;\n                    scene = scenes[scenes.length - 1];\n                }\n                else {\n                    scene = EngineStore.LastCreatedScene;\n                }\n            }\n            if (scene) {\n                this._imageProcessingConfiguration = scene.imageProcessingConfiguration;\n            }\n            else {\n                this._imageProcessingConfiguration = new ImageProcessingConfiguration();\n            }\n        }\n        else {\n            this._imageProcessingConfiguration = configuration;\n        }\n        // Attaches observer.\n        if (this._imageProcessingConfiguration) {\n            this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(() => {\n                this._updateParameters();\n            });\n        }\n        // Ensure the effect will be rebuilt.\n        if (!doNotBuild) {\n            this._updateParameters();\n        }\n    }\n    /**\n     * Gets Color curves setup used in the effect if colorCurvesEnabled is set to true .\n     */\n    get colorCurves() {\n        return this.imageProcessingConfiguration.colorCurves;\n    }\n    /**\n     * Sets Color curves setup used in the effect if colorCurvesEnabled is set to true .\n     */\n    set colorCurves(value) {\n        this.imageProcessingConfiguration.colorCurves = value;\n    }\n    /**\n     * Gets whether the color curves effect is enabled.\n     */\n    get colorCurvesEnabled() {\n        return this.imageProcessingConfiguration.colorCurvesEnabled;\n    }\n    /**\n     * Sets whether the color curves effect is enabled.\n     */\n    set colorCurvesEnabled(value) {\n        this.imageProcessingConfiguration.colorCurvesEnabled = value;\n    }\n    /**\n     * Gets Color grading LUT texture used in the effect if colorGradingEnabled is set to true.\n     */\n    get colorGradingTexture() {\n        return this.imageProcessingConfiguration.colorGradingTexture;\n    }\n    /**\n     * Sets Color grading LUT texture used in the effect if colorGradingEnabled is set to true.\n     */\n    set colorGradingTexture(value) {\n        this.imageProcessingConfiguration.colorGradingTexture = value;\n    }\n    /**\n     * Gets whether the color grading effect is enabled.\n     */\n    get colorGradingEnabled() {\n        return this.imageProcessingConfiguration.colorGradingEnabled;\n    }\n    /**\n     * Gets whether the color grading effect is enabled.\n     */\n    set colorGradingEnabled(value) {\n        this.imageProcessingConfiguration.colorGradingEnabled = value;\n    }\n    /**\n     * Gets exposure used in the effect.\n     */\n    get exposure() {\n        return this.imageProcessingConfiguration.exposure;\n    }\n    /**\n     * Sets exposure used in the effect.\n     */\n    set exposure(value) {\n        this.imageProcessingConfiguration.exposure = value;\n    }\n    /**\n     * Gets whether tonemapping is enabled or not.\n     */\n    get toneMappingEnabled() {\n        return this._imageProcessingConfiguration.toneMappingEnabled;\n    }\n    /**\n     * Sets whether tonemapping is enabled or not\n     */\n    set toneMappingEnabled(value) {\n        this._imageProcessingConfiguration.toneMappingEnabled = value;\n    }\n    /**\n     * Gets the type of tone mapping effect.\n     */\n    get toneMappingType() {\n        return this._imageProcessingConfiguration.toneMappingType;\n    }\n    /**\n     * Sets the type of tone mapping effect.\n     */\n    set toneMappingType(value) {\n        this._imageProcessingConfiguration.toneMappingType = value;\n    }\n    /**\n     * Gets contrast used in the effect.\n     */\n    get contrast() {\n        return this.imageProcessingConfiguration.contrast;\n    }\n    /**\n     * Sets contrast used in the effect.\n     */\n    set contrast(value) {\n        this.imageProcessingConfiguration.contrast = value;\n    }\n    /**\n     * Gets Vignette stretch size.\n     */\n    get vignetteStretch() {\n        return this.imageProcessingConfiguration.vignetteStretch;\n    }\n    /**\n     * Sets Vignette stretch size.\n     */\n    set vignetteStretch(value) {\n        this.imageProcessingConfiguration.vignetteStretch = value;\n    }\n    /**\n     * Gets Vignette center X Offset.\n     * @deprecated use vignetteCenterX instead\n     */\n    get vignetteCentreX() {\n        return this.imageProcessingConfiguration.vignetteCenterX;\n    }\n    /**\n     * Sets Vignette center X Offset.\n     * @deprecated use vignetteCenterX instead\n     */\n    set vignetteCentreX(value) {\n        this.imageProcessingConfiguration.vignetteCenterX = value;\n    }\n    /**\n     * Gets Vignette center Y Offset.\n     * @deprecated use vignetteCenterY instead\n     */\n    get vignetteCentreY() {\n        return this.imageProcessingConfiguration.vignetteCenterY;\n    }\n    /**\n     * Sets Vignette center Y Offset.\n     * @deprecated use vignetteCenterY instead\n     */\n    set vignetteCentreY(value) {\n        this.imageProcessingConfiguration.vignetteCenterY = value;\n    }\n    /**\n     * Vignette center Y Offset.\n     */\n    get vignetteCenterY() {\n        return this.imageProcessingConfiguration.vignetteCenterY;\n    }\n    set vignetteCenterY(value) {\n        this.imageProcessingConfiguration.vignetteCenterY = value;\n    }\n    /**\n     * Vignette center X Offset.\n     */\n    get vignetteCenterX() {\n        return this.imageProcessingConfiguration.vignetteCenterX;\n    }\n    set vignetteCenterX(value) {\n        this.imageProcessingConfiguration.vignetteCenterX = value;\n    }\n    /**\n     * Gets Vignette weight or intensity of the vignette effect.\n     */\n    get vignetteWeight() {\n        return this.imageProcessingConfiguration.vignetteWeight;\n    }\n    /**\n     * Sets Vignette weight or intensity of the vignette effect.\n     */\n    set vignetteWeight(value) {\n        this.imageProcessingConfiguration.vignetteWeight = value;\n    }\n    /**\n     * Gets Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\n     * if vignetteEnabled is set to true.\n     */\n    get vignetteColor() {\n        return this.imageProcessingConfiguration.vignetteColor;\n    }\n    /**\n     * Sets Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\n     * if vignetteEnabled is set to true.\n     */\n    set vignetteColor(value) {\n        this.imageProcessingConfiguration.vignetteColor = value;\n    }\n    /**\n     * Gets Camera field of view used by the Vignette effect.\n     */\n    get vignetteCameraFov() {\n        return this.imageProcessingConfiguration.vignetteCameraFov;\n    }\n    /**\n     * Sets Camera field of view used by the Vignette effect.\n     */\n    set vignetteCameraFov(value) {\n        this.imageProcessingConfiguration.vignetteCameraFov = value;\n    }\n    /**\n     * Gets the vignette blend mode allowing different kind of effect.\n     */\n    get vignetteBlendMode() {\n        return this.imageProcessingConfiguration.vignetteBlendMode;\n    }\n    /**\n     * Sets the vignette blend mode allowing different kind of effect.\n     */\n    set vignetteBlendMode(value) {\n        this.imageProcessingConfiguration.vignetteBlendMode = value;\n    }\n    /**\n     * Gets whether the vignette effect is enabled.\n     */\n    get vignetteEnabled() {\n        return this.imageProcessingConfiguration.vignetteEnabled;\n    }\n    /**\n     * Sets whether the vignette effect is enabled.\n     */\n    set vignetteEnabled(value) {\n        this.imageProcessingConfiguration.vignetteEnabled = value;\n    }\n    /**\n     * Gets intensity of the dithering effect.\n     */\n    get ditheringIntensity() {\n        return this.imageProcessingConfiguration.ditheringIntensity;\n    }\n    /**\n     * Sets intensity of the dithering effect.\n     */\n    set ditheringIntensity(value) {\n        this.imageProcessingConfiguration.ditheringIntensity = value;\n    }\n    /**\n     * Gets whether the dithering effect is enabled.\n     */\n    get ditheringEnabled() {\n        return this.imageProcessingConfiguration.ditheringEnabled;\n    }\n    /**\n     * Sets whether the dithering effect is enabled.\n     */\n    set ditheringEnabled(value) {\n        this.imageProcessingConfiguration.ditheringEnabled = value;\n    }\n    /**\n     * Gets whether the input of the processing is in Gamma or Linear Space.\n     */\n    get fromLinearSpace() {\n        return this._fromLinearSpace;\n    }\n    /**\n     * Sets whether the input of the processing is in Gamma or Linear Space.\n     */\n    set fromLinearSpace(value) {\n        if (this._fromLinearSpace === value) {\n            return;\n        }\n        this._fromLinearSpace = value;\n        this._updateParameters();\n    }\n    /**\n     * * Gets the width of the output texture used to store the result of the post process.\n     */\n    get outputTextureWidth() {\n        return this.imageProcessingConfiguration.outputTextureWidth;\n    }\n    /**\n     * * Sets the width of the output texture used to store the result of the post process.\n     */\n    set outputTextureWidth(value) {\n        this.imageProcessingConfiguration.outputTextureWidth = value;\n    }\n    /**\n     * * Gets the height of the output texture used to store the result of the post process.\n     */\n    get outputTextureHeight() {\n        return this.imageProcessingConfiguration.outputTextureHeight;\n    }\n    /**\n     * * Sets the height of the output texture used to store the result of the post process.\n     */\n    set outputTextureHeight(value) {\n        this.imageProcessingConfiguration.outputTextureHeight = value;\n    }\n    /**\n     * Constructs a new image processing post process\n     * @param name Name of the effect\n     * @param engine Engine to use to render the effect. If not provided, the last created engine will be used\n     * @param options Options to configure the effect\n     */\n    constructor(name, engine = null, options) {\n        super({\n            ...options,\n            name,\n            engine: engine || Engine.LastCreatedEngine,\n            useShaderStore: true,\n            useAsPostProcess: true,\n            fragmentShader: ThinImageProcessingPostProcess.FragmentUrl,\n        });\n        this._fromLinearSpace = true;\n        /**\n         * Defines cache preventing GC.\n         */\n        this._defines = {\n            IMAGEPROCESSING: false,\n            VIGNETTE: false,\n            VIGNETTEBLENDMODEMULTIPLY: false,\n            VIGNETTEBLENDMODEOPAQUE: false,\n            TONEMAPPING: 0,\n            CONTRAST: false,\n            COLORCURVES: false,\n            COLORGRADING: false,\n            COLORGRADING3D: false,\n            FROMLINEARSPACE: false,\n            SAMPLER3DGREENDEPTH: false,\n            SAMPLER3DBGRMAP: false,\n            DITHER: false,\n            IMAGEPROCESSINGPOSTPROCESS: false,\n            EXPOSURE: false,\n            SKIPFINALCOLORCLAMP: false,\n        };\n        const imageProcessingConfiguration = options?.imageProcessingConfiguration;\n        // Setup the configuration as forced by the constructor. This would then not force the\n        // scene materials output in linear space and let untouched the default forward pass.\n        if (imageProcessingConfiguration) {\n            imageProcessingConfiguration.applyByPostProcess = true;\n            this._attachImageProcessingConfiguration(imageProcessingConfiguration, true);\n            // This will cause the shader to be compiled\n            this._updateParameters();\n        }\n        // Setup the default processing configuration to the scene.\n        else {\n            this._attachImageProcessingConfiguration(null, true);\n            this.imageProcessingConfiguration.applyByPostProcess = true;\n        }\n    }\n    /**\n     * @internal\n     */\n    _updateParameters() {\n        this._defines.FROMLINEARSPACE = this._fromLinearSpace;\n        this.imageProcessingConfiguration.prepareDefines(this._defines, true);\n        let defines = \"\";\n        for (const prop in this._defines) {\n            const value = this._defines[prop];\n            const type = typeof value;\n            switch (type) {\n                case \"number\":\n                case \"string\":\n                    defines += `#define ${prop} ${value};\\n`;\n                    break;\n                default:\n                    if (value) {\n                        defines += `#define ${prop};\\n`;\n                    }\n                    break;\n            }\n        }\n        const samplers = [\"textureSampler\"];\n        const uniforms = [\"scale\"];\n        if (ImageProcessingConfiguration) {\n            ImageProcessingConfiguration.PrepareSamplers(samplers, this._defines);\n            ImageProcessingConfiguration.PrepareUniforms(uniforms, this._defines);\n        }\n        this.updateEffect(defines, uniforms, samplers);\n    }\n    bind(noDefaultBindings = false) {\n        super.bind(noDefaultBindings);\n        this.imageProcessingConfiguration.bind(this.effect, this.overrideAspectRatio);\n    }\n    dispose() {\n        super.dispose();\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n        }\n        if (this._imageProcessingConfiguration) {\n            this.imageProcessingConfiguration.applyByPostProcess = false;\n        }\n    }\n}\n/**\n * The fragment shader url\n */\nThinImageProcessingPostProcess.FragmentUrl = \"imageProcessing\";\n//# sourceMappingURL=thinImageProcessingPostProcess.js.map","import { __decorate } from \"tslib\";\nimport { serialize } from \"../Misc/decorators\";\nimport { PostProcess } from \"./postProcess\";\nimport { Constants } from \"../Engines/constants\";\nimport { ThinImageProcessingPostProcess } from \"./thinImageProcessingPostProcess\";\n/**\n * ImageProcessingPostProcess\n * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses#imageprocessing\n */\nexport class ImageProcessingPostProcess extends PostProcess {\n    get _imageProcessingConfiguration() {\n        return this._effectWrapper.imageProcessingConfiguration;\n    }\n    /**\n     * Gets the image processing configuration used either in this material.\n     */\n    get imageProcessingConfiguration() {\n        return this._effectWrapper.imageProcessingConfiguration;\n    }\n    /**\n     * Sets the Default image processing configuration used either in the this material.\n     *\n     * If sets to null, the scene one is in use.\n     */\n    set imageProcessingConfiguration(value) {\n        this._effectWrapper.imageProcessingConfiguration = value;\n    }\n    /**\n     * If the post process is supported.\n     */\n    get isSupported() {\n        const effect = this.getEffect();\n        return !effect || effect.isSupported;\n    }\n    /**\n     * Gets Color curves setup used in the effect if colorCurvesEnabled is set to true .\n     */\n    get colorCurves() {\n        return this.imageProcessingConfiguration.colorCurves;\n    }\n    /**\n     * Sets Color curves setup used in the effect if colorCurvesEnabled is set to true .\n     */\n    set colorCurves(value) {\n        this.imageProcessingConfiguration.colorCurves = value;\n    }\n    /**\n     * Gets whether the color curves effect is enabled.\n     */\n    get colorCurvesEnabled() {\n        return this.imageProcessingConfiguration.colorCurvesEnabled;\n    }\n    /**\n     * Sets whether the color curves effect is enabled.\n     */\n    set colorCurvesEnabled(value) {\n        this.imageProcessingConfiguration.colorCurvesEnabled = value;\n    }\n    /**\n     * Gets Color grading LUT texture used in the effect if colorGradingEnabled is set to true.\n     */\n    get colorGradingTexture() {\n        return this.imageProcessingConfiguration.colorGradingTexture;\n    }\n    /**\n     * Sets Color grading LUT texture used in the effect if colorGradingEnabled is set to true.\n     */\n    set colorGradingTexture(value) {\n        this.imageProcessingConfiguration.colorGradingTexture = value;\n    }\n    /**\n     * Gets whether the color grading effect is enabled.\n     */\n    get colorGradingEnabled() {\n        return this.imageProcessingConfiguration.colorGradingEnabled;\n    }\n    /**\n     * Gets whether the color grading effect is enabled.\n     */\n    set colorGradingEnabled(value) {\n        this.imageProcessingConfiguration.colorGradingEnabled = value;\n    }\n    /**\n     * Gets exposure used in the effect.\n     */\n    get exposure() {\n        return this.imageProcessingConfiguration.exposure;\n    }\n    /**\n     * Sets exposure used in the effect.\n     */\n    set exposure(value) {\n        this.imageProcessingConfiguration.exposure = value;\n    }\n    /**\n     * Gets whether tonemapping is enabled or not.\n     */\n    get toneMappingEnabled() {\n        return this._imageProcessingConfiguration.toneMappingEnabled;\n    }\n    /**\n     * Sets whether tonemapping is enabled or not\n     */\n    set toneMappingEnabled(value) {\n        this._imageProcessingConfiguration.toneMappingEnabled = value;\n    }\n    /**\n     * Gets the type of tone mapping effect.\n     */\n    get toneMappingType() {\n        return this._imageProcessingConfiguration.toneMappingType;\n    }\n    /**\n     * Sets the type of tone mapping effect.\n     */\n    set toneMappingType(value) {\n        this._imageProcessingConfiguration.toneMappingType = value;\n    }\n    /**\n     * Gets contrast used in the effect.\n     */\n    get contrast() {\n        return this.imageProcessingConfiguration.contrast;\n    }\n    /**\n     * Sets contrast used in the effect.\n     */\n    set contrast(value) {\n        this.imageProcessingConfiguration.contrast = value;\n    }\n    /**\n     * Gets Vignette stretch size.\n     */\n    get vignetteStretch() {\n        return this.imageProcessingConfiguration.vignetteStretch;\n    }\n    /**\n     * Sets Vignette stretch size.\n     */\n    set vignetteStretch(value) {\n        this.imageProcessingConfiguration.vignetteStretch = value;\n    }\n    /**\n     * Gets Vignette center X Offset.\n     * @deprecated use vignetteCenterX instead\n     */\n    get vignetteCentreX() {\n        return this.imageProcessingConfiguration.vignetteCenterX;\n    }\n    /**\n     * Sets Vignette center X Offset.\n     * @deprecated use vignetteCenterX instead\n     */\n    set vignetteCentreX(value) {\n        this.imageProcessingConfiguration.vignetteCenterX = value;\n    }\n    /**\n     * Gets Vignette center Y Offset.\n     * @deprecated use vignetteCenterY instead\n     */\n    get vignetteCentreY() {\n        return this.imageProcessingConfiguration.vignetteCenterY;\n    }\n    /**\n     * Sets Vignette center Y Offset.\n     * @deprecated use vignetteCenterY instead\n     */\n    set vignetteCentreY(value) {\n        this.imageProcessingConfiguration.vignetteCenterY = value;\n    }\n    /**\n     * Vignette center Y Offset.\n     */\n    get vignetteCenterY() {\n        return this.imageProcessingConfiguration.vignetteCenterY;\n    }\n    set vignetteCenterY(value) {\n        this.imageProcessingConfiguration.vignetteCenterY = value;\n    }\n    /**\n     * Vignette center X Offset.\n     */\n    get vignetteCenterX() {\n        return this.imageProcessingConfiguration.vignetteCenterX;\n    }\n    set vignetteCenterX(value) {\n        this.imageProcessingConfiguration.vignetteCenterX = value;\n    }\n    /**\n     * Gets Vignette weight or intensity of the vignette effect.\n     */\n    get vignetteWeight() {\n        return this.imageProcessingConfiguration.vignetteWeight;\n    }\n    /**\n     * Sets Vignette weight or intensity of the vignette effect.\n     */\n    set vignetteWeight(value) {\n        this.imageProcessingConfiguration.vignetteWeight = value;\n    }\n    /**\n     * Gets Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\n     * if vignetteEnabled is set to true.\n     */\n    get vignetteColor() {\n        return this.imageProcessingConfiguration.vignetteColor;\n    }\n    /**\n     * Sets Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\n     * if vignetteEnabled is set to true.\n     */\n    set vignetteColor(value) {\n        this.imageProcessingConfiguration.vignetteColor = value;\n    }\n    /**\n     * Gets Camera field of view used by the Vignette effect.\n     */\n    get vignetteCameraFov() {\n        return this.imageProcessingConfiguration.vignetteCameraFov;\n    }\n    /**\n     * Sets Camera field of view used by the Vignette effect.\n     */\n    set vignetteCameraFov(value) {\n        this.imageProcessingConfiguration.vignetteCameraFov = value;\n    }\n    /**\n     * Gets the vignette blend mode allowing different kind of effect.\n     */\n    get vignetteBlendMode() {\n        return this.imageProcessingConfiguration.vignetteBlendMode;\n    }\n    /**\n     * Sets the vignette blend mode allowing different kind of effect.\n     */\n    set vignetteBlendMode(value) {\n        this.imageProcessingConfiguration.vignetteBlendMode = value;\n    }\n    /**\n     * Gets whether the vignette effect is enabled.\n     */\n    get vignetteEnabled() {\n        return this.imageProcessingConfiguration.vignetteEnabled;\n    }\n    /**\n     * Sets whether the vignette effect is enabled.\n     */\n    set vignetteEnabled(value) {\n        this.imageProcessingConfiguration.vignetteEnabled = value;\n    }\n    /**\n     * Gets intensity of the dithering effect.\n     */\n    get ditheringIntensity() {\n        return this.imageProcessingConfiguration.ditheringIntensity;\n    }\n    /**\n     * Sets intensity of the dithering effect.\n     */\n    set ditheringIntensity(value) {\n        this.imageProcessingConfiguration.ditheringIntensity = value;\n    }\n    /**\n     * Gets whether the dithering effect is enabled.\n     */\n    get ditheringEnabled() {\n        return this.imageProcessingConfiguration.ditheringEnabled;\n    }\n    /**\n     * Sets whether the dithering effect is enabled.\n     */\n    set ditheringEnabled(value) {\n        this.imageProcessingConfiguration.ditheringEnabled = value;\n    }\n    /**\n     * Gets whether the input of the processing is in Gamma or Linear Space.\n     */\n    get fromLinearSpace() {\n        return this._effectWrapper.fromLinearSpace;\n    }\n    /**\n     * Sets whether the input of the processing is in Gamma or Linear Space.\n     */\n    set fromLinearSpace(value) {\n        this._effectWrapper.fromLinearSpace = value;\n    }\n    constructor(name, options, camera = null, samplingMode, engine, reusable, textureType = Constants.TEXTURETYPE_UNSIGNED_BYTE, imageProcessingConfiguration) {\n        const localOptions = {\n            size: typeof options === \"number\" ? options : undefined,\n            camera,\n            samplingMode,\n            engine,\n            reusable,\n            textureType,\n            imageProcessingConfiguration,\n            scene: camera?.getScene(),\n            ...options,\n            blockCompilation: true,\n        };\n        super(name, ThinImageProcessingPostProcess.FragmentUrl, {\n            effectWrapper: typeof options === \"number\" || !options.effectWrapper ? new ThinImageProcessingPostProcess(name, engine, localOptions) : undefined,\n            ...localOptions,\n        });\n        this.onApply = () => {\n            this._effectWrapper.overrideAspectRatio = this.aspectRatio;\n        };\n    }\n    /**\n     *  \"ImageProcessingPostProcess\"\n     * @returns \"ImageProcessingPostProcess\"\n     */\n    getClassName() {\n        return \"ImageProcessingPostProcess\";\n    }\n    /**\n     * @internal\n     */\n    _updateParameters() {\n        this._effectWrapper._updateParameters();\n    }\n    dispose(camera) {\n        super.dispose(camera);\n        if (this._imageProcessingConfiguration) {\n            this.imageProcessingConfiguration.applyByPostProcess = false;\n        }\n    }\n}\n__decorate([\n    serialize()\n], ImageProcessingPostProcess.prototype, \"fromLinearSpace\", null);\n//# sourceMappingURL=imageProcessingPostProcess.js.map","import { MultiRenderTarget } from \"./multiRenderTarget\";\nimport { ImageProcessingPostProcess } from \"../../PostProcesses/imageProcessingPostProcess\";\n/**\n * A multi render target designed to render the prepass.\n * Prepass is a scene component used to render information in multiple textures\n * alongside with the scene materials rendering.\n * Note : This is an internal class, and you should NOT need to instanciate this.\n * Only the `PrePassRenderer` should instanciate this class.\n * It is more likely that you need a regular `MultiRenderTarget`\n * @internal\n */\nexport class PrePassRenderTarget extends MultiRenderTarget {\n    constructor(name, renderTargetTexture, size, count, scene, options) {\n        super(name, size, count, scene, options);\n        /**\n         * @internal\n         */\n        this._beforeCompositionPostProcesses = [];\n        /**\n         * @internal\n         */\n        this._internalTextureDirty = false;\n        /**\n         * Is this render target enabled for prepass rendering\n         */\n        this.enabled = false;\n        /**\n         * Render target associated with this prePassRenderTarget\n         * If this is `null`, it means this prePassRenderTarget is associated with the scene\n         */\n        this.renderTargetTexture = null;\n        this.renderTargetTexture = renderTargetTexture;\n    }\n    /**\n     * Creates a composition effect for this RT\n     * @internal\n     */\n    _createCompositionEffect() {\n        this.imageProcessingPostProcess = new ImageProcessingPostProcess(\"prePassComposition\", 1, null, undefined, this._engine);\n        this.imageProcessingPostProcess._updateParameters();\n    }\n    /**\n     * Checks that the size of this RT is still adapted to the desired render size.\n     * @internal\n     */\n    _checkSize() {\n        const requiredWidth = this._engine.getRenderWidth(true);\n        const requiredHeight = this._engine.getRenderHeight(true);\n        const width = this.getRenderWidth();\n        const height = this.getRenderHeight();\n        if (width !== requiredWidth || height !== requiredHeight) {\n            this.resize({ width: requiredWidth, height: requiredHeight });\n            this._internalTextureDirty = true;\n        }\n    }\n    /**\n     * Changes the number of render targets in this MRT\n     * Be careful as it will recreate all the data in the new texture.\n     * @param count new texture count\n     * @param options Specifies texture types and sampling modes for new textures\n     * @param textureNames Specifies the names of the textures (optional)\n     */\n    updateCount(count, options, textureNames) {\n        super.updateCount(count, options, textureNames);\n        this._internalTextureDirty = true;\n    }\n    /**\n     * Resets the post processes chains applied to this RT.\n     * @internal\n     */\n    _resetPostProcessChain() {\n        this._beforeCompositionPostProcesses.length = 0;\n    }\n    /**\n     * Diposes this render target\n     */\n    dispose() {\n        const scene = this._scene;\n        super.dispose();\n        if (scene && scene.prePassRenderer) {\n            const index = scene.prePassRenderer.renderTargets.indexOf(this);\n            if (index !== -1) {\n                scene.prePassRenderer.renderTargets.splice(index, 1);\n            }\n        }\n        if (this.imageProcessingPostProcess) {\n            this.imageProcessingPostProcess.dispose();\n        }\n        if (this.renderTargetTexture) {\n            this.renderTargetTexture._prePassRenderTarget = null;\n        }\n        if (this._outputPostProcess) {\n            this._outputPostProcess.autoClear = true;\n            this._outputPostProcess.restoreDefaultInputTexture();\n        }\n    }\n}\n//# sourceMappingURL=prePassRenderTarget.js.map","import { PrePassRenderTarget } from \"../Materials/Textures/prePassRenderTarget\";\nimport { Constants } from \"../Engines/constants\";\nimport { _WarnImport } from \"../Misc/devTools\";\nimport { Color4 } from \"../Maths/math.color\";\nimport { Material } from \"../Materials/material\";\nimport { GeometryBufferRenderer } from \"../Rendering/geometryBufferRenderer\";\nimport \"../Engines/Extensions/engine.multiRender\";\n/**\n * Renders a pre pass of the scene\n * This means every mesh in the scene will be rendered to a render target texture\n * And then this texture will be composited to the rendering canvas with post processes\n * It is necessary for effects like subsurface scattering or deferred shading\n */\nexport class PrePassRenderer {\n    /**\n     * Indicates if the prepass renderer is generating normals in world space or camera space (default: camera space)\n     */\n    get generateNormalsInWorldSpace() {\n        return this._generateNormalsInWorldSpace;\n    }\n    set generateNormalsInWorldSpace(value) {\n        if (this._generateNormalsInWorldSpace === value) {\n            return;\n        }\n        this._generateNormalsInWorldSpace = value;\n        this._markAllMaterialsAsPrePassDirty();\n    }\n    /**\n     * Returns the index of a texture in the multi render target texture array.\n     * @param type Texture type\n     * @returns The index\n     */\n    getIndex(type) {\n        return this._textureIndices[type];\n    }\n    /**\n     * How many samples are used for MSAA of the scene render target\n     */\n    get samples() {\n        return this.defaultRT.samples;\n    }\n    set samples(n) {\n        this.defaultRT.samples = n;\n    }\n    /**\n     * If set to true (default: false), the depth texture will be cleared with the depth value corresponding to the far plane (1 in normal mode, 0 in reverse depth buffer mode)\n     * If set to false, the depth texture is always cleared with 0.\n     */\n    get useSpecificClearForDepthTexture() {\n        return this._useSpecificClearForDepthTexture;\n    }\n    set useSpecificClearForDepthTexture(value) {\n        if (this._useSpecificClearForDepthTexture === value) {\n            return;\n        }\n        this._useSpecificClearForDepthTexture = value;\n        this._isDirty = true;\n    }\n    /**\n     * @returns the prepass render target for the rendering pass.\n     * If we are currently rendering a render target, it returns the PrePassRenderTarget\n     * associated with that render target. Otherwise, it returns the scene default PrePassRenderTarget\n     */\n    getRenderTarget() {\n        return this._currentTarget;\n    }\n    /**\n     * @internal\n     * Managed by the scene component\n     * @param prePassRenderTarget\n     */\n    _setRenderTarget(prePassRenderTarget) {\n        if (prePassRenderTarget) {\n            this._currentTarget = prePassRenderTarget;\n        }\n        else {\n            this._currentTarget = this.defaultRT;\n            this._engine.currentRenderPassId = this._scene.activeCamera?.renderPassId ?? this._currentTarget.renderPassId;\n        }\n    }\n    /**\n     * Returns true if the currently rendered prePassRenderTarget is the one\n     * associated with the scene.\n     */\n    get currentRTisSceneRT() {\n        return this._currentTarget === this.defaultRT;\n    }\n    _refreshGeometryBufferRendererLink() {\n        if (!this.doNotUseGeometryRendererFallback) {\n            this._geometryBuffer = this._scene.enableGeometryBufferRenderer();\n            if (!this._geometryBuffer) {\n                // Not supported\n                this.doNotUseGeometryRendererFallback = true;\n                return;\n            }\n            this._geometryBuffer._linkPrePassRenderer(this);\n        }\n        else {\n            if (this._geometryBuffer) {\n                this._geometryBuffer._unlinkPrePassRenderer();\n            }\n            this._geometryBuffer = null;\n            this._scene.disableGeometryBufferRenderer();\n        }\n    }\n    /**\n     * Indicates if the prepass is enabled\n     */\n    get enabled() {\n        return this._enabled;\n    }\n    /**\n     * Instantiates a prepass renderer\n     * @param scene The scene\n     */\n    constructor(scene) {\n        /**\n         * To save performance, we can excluded skinned meshes from the prepass\n         */\n        this.excludedSkinnedMesh = [];\n        /**\n         * Force material to be excluded from the prepass\n         * Can be useful when `useGeometryBufferFallback` is set to `true`\n         * and you don't want a material to show in the effect.\n         */\n        this.excludedMaterials = [];\n        /**\n         * Number of textures in the multi render target texture where the scene is directly rendered\n         */\n        this.mrtCount = 0;\n        this._mrtTypes = [];\n        this._mrtFormats = [];\n        this._mrtLayout = [];\n        this._mrtNames = [];\n        this._textureIndices = [];\n        this._generateNormalsInWorldSpace = false;\n        this._useSpecificClearForDepthTexture = false;\n        this._isDirty = true;\n        /**\n         * Configuration for prepass effects\n         */\n        this._effectConfigurations = [];\n        /**\n         * Prevents the PrePassRenderer from using the GeometryBufferRenderer as a fallback\n         */\n        this.doNotUseGeometryRendererFallback = true;\n        /**\n         * All the render targets generated by prepass\n         */\n        this.renderTargets = [];\n        this._clearColor = new Color4(0, 0, 0, 0);\n        this._clearDepthColor = new Color4(0, 0, 0, 1); //  // sets an invalid value by default - depth in the depth texture is view.z, so 0 is not possible because view.z can't be less than camera.minZ\n        this._enabled = false;\n        this._needsCompositionForThisPass = false;\n        /**\n         * Set to true to disable gamma transform in PrePass.\n         * Can be useful in case you already proceed to gamma transform on a material level\n         * and your post processes don't need to be in linear color space.\n         */\n        this.disableGammaTransform = false;\n        this._scene = scene;\n        this._engine = scene.getEngine();\n        let type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\n        if (this._engine._caps.textureFloat && this._engine._caps.textureFloatLinearFiltering) {\n            type = Constants.TEXTURETYPE_FLOAT;\n        }\n        else if (this._engine._caps.textureHalfFloat && this._engine._caps.textureHalfFloatLinearFiltering) {\n            type = Constants.TEXTURETYPE_HALF_FLOAT;\n        }\n        for (let i = 0; i < PrePassRenderer.TextureFormats.length; ++i) {\n            const format = PrePassRenderer.TextureFormats[i].format;\n            if (PrePassRenderer.TextureFormats[i].type === Constants.TEXTURETYPE_FLOAT) {\n                PrePassRenderer.TextureFormats[i].type = type;\n                if (type === Constants.TEXTURETYPE_FLOAT &&\n                    (format === Constants.TEXTUREFORMAT_R || format === Constants.TEXTUREFORMAT_RG || format === Constants.TEXTUREFORMAT_RGBA) &&\n                    !this._engine._caps.supportFloatTexturesResolve) {\n                    // We don't know in advance if the texture will be used as a resolve target, so we revert to half_float if the extension to resolve full float textures is not supported\n                    PrePassRenderer.TextureFormats[i].type = Constants.TEXTURETYPE_HALF_FLOAT;\n                }\n            }\n        }\n        PrePassRenderer._SceneComponentInitialization(this._scene);\n        this.defaultRT = this._createRenderTarget(\"sceneprePassRT\", null);\n        this._currentTarget = this.defaultRT;\n    }\n    /**\n     * Creates a new PrePassRenderTarget\n     * This should be the only way to instantiate a `PrePassRenderTarget`\n     * @param name Name of the `PrePassRenderTarget`\n     * @param renderTargetTexture RenderTarget the `PrePassRenderTarget` will be attached to.\n     * Can be `null` if the created `PrePassRenderTarget` is attached to the scene (default framebuffer).\n     * @internal\n     */\n    _createRenderTarget(name, renderTargetTexture) {\n        const rt = new PrePassRenderTarget(name, renderTargetTexture, { width: this._engine.getRenderWidth(), height: this._engine.getRenderHeight() }, 0, this._scene, {\n            generateMipMaps: false,\n            generateStencilBuffer: this._engine.isStencilEnable,\n            defaultType: Constants.TEXTURETYPE_UNSIGNED_BYTE,\n            types: [],\n            drawOnlyOnFirstAttachmentByDefault: true,\n        });\n        this.renderTargets.push(rt);\n        if (this._enabled) {\n            // The pre-pass renderer is already enabled, so make sure we create the render target with the correct number of textures\n            this._update();\n        }\n        return rt;\n    }\n    /**\n     * Indicates if rendering a prepass is supported\n     */\n    get isSupported() {\n        return this._scene.getEngine().getCaps().drawBuffersExtension;\n    }\n    /**\n     * Sets the proper output textures to draw in the engine.\n     * @param effect The effect that is drawn. It can be or not be compatible with drawing to several output textures.\n     * @param subMesh Submesh on which the effect is applied\n     */\n    bindAttachmentsForEffect(effect, subMesh) {\n        const material = subMesh.getMaterial();\n        const isPrePassCapable = material && material.isPrePassCapable;\n        const excluded = material && this.excludedMaterials.indexOf(material) !== -1;\n        if (this.enabled && this._currentTarget.enabled) {\n            if (effect._multiTarget && isPrePassCapable && !excluded) {\n                this._engine.bindAttachments(this._multiRenderAttachments);\n            }\n            else {\n                if (this._engine._currentRenderTarget) {\n                    this._engine.bindAttachments(this._defaultAttachments);\n                }\n                else {\n                    this._engine.restoreSingleAttachment();\n                }\n                if (this._geometryBuffer && this.currentRTisSceneRT && !excluded) {\n                    this._geometryBuffer.renderList.push(subMesh.getRenderingMesh());\n                }\n            }\n        }\n    }\n    _reinitializeAttachments() {\n        const multiRenderLayout = [];\n        const clearLayout = [false];\n        const clearDepthLayout = [false];\n        const defaultLayout = [true];\n        for (let i = 0; i < this.mrtCount; i++) {\n            multiRenderLayout.push(true);\n            if (i > 0) {\n                if (this._useSpecificClearForDepthTexture && this._mrtLayout[i] === Constants.PREPASS_DEPTH_TEXTURE_TYPE) {\n                    clearLayout.push(false);\n                    clearDepthLayout.push(true);\n                }\n                else {\n                    clearLayout.push(true);\n                    clearDepthLayout.push(false);\n                }\n                defaultLayout.push(false);\n            }\n        }\n        this._multiRenderAttachments = this._engine.buildTextureLayout(multiRenderLayout);\n        this._clearAttachments = this._engine.buildTextureLayout(clearLayout);\n        this._clearDepthAttachments = this._engine.buildTextureLayout(clearDepthLayout);\n        this._defaultAttachments = this._engine.buildTextureLayout(defaultLayout);\n    }\n    _resetLayout() {\n        for (let i = 0; i < PrePassRenderer.TextureFormats.length; i++) {\n            this._textureIndices[PrePassRenderer.TextureFormats[i].purpose] = -1;\n        }\n        this._textureIndices[Constants.PREPASS_COLOR_TEXTURE_TYPE] = 0;\n        this._mrtLayout = [Constants.PREPASS_COLOR_TEXTURE_TYPE];\n        this._mrtTypes = [PrePassRenderer.TextureFormats[Constants.PREPASS_COLOR_TEXTURE_TYPE].type];\n        this._mrtFormats = [PrePassRenderer.TextureFormats[Constants.PREPASS_COLOR_TEXTURE_TYPE].format];\n        this._mrtNames = [PrePassRenderer.TextureFormats[Constants.PREPASS_COLOR_TEXTURE_TYPE].name];\n        this.mrtCount = 1;\n    }\n    _updateGeometryBufferLayout() {\n        this._refreshGeometryBufferRendererLink();\n        if (this._geometryBuffer) {\n            this._geometryBuffer._resetLayout();\n            const texturesActivated = [];\n            for (let i = 0; i < this._mrtLayout.length; i++) {\n                texturesActivated.push(false);\n            }\n            this._geometryBuffer._linkInternalTexture(this.defaultRT.getInternalTexture());\n            const matches = [\n                {\n                    prePassConstant: Constants.PREPASS_DEPTH_TEXTURE_TYPE,\n                    geometryBufferConstant: GeometryBufferRenderer.DEPTH_TEXTURE_TYPE,\n                },\n                {\n                    prePassConstant: Constants.PREPASS_NORMAL_TEXTURE_TYPE,\n                    geometryBufferConstant: GeometryBufferRenderer.NORMAL_TEXTURE_TYPE,\n                },\n                {\n                    prePassConstant: Constants.PREPASS_POSITION_TEXTURE_TYPE,\n                    geometryBufferConstant: GeometryBufferRenderer.POSITION_TEXTURE_TYPE,\n                },\n                {\n                    prePassConstant: Constants.PREPASS_REFLECTIVITY_TEXTURE_TYPE,\n                    geometryBufferConstant: GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE,\n                },\n                {\n                    prePassConstant: Constants.PREPASS_VELOCITY_TEXTURE_TYPE,\n                    geometryBufferConstant: GeometryBufferRenderer.VELOCITY_TEXTURE_TYPE,\n                },\n            ];\n            // replace textures in the geometryBuffer RT\n            for (let i = 0; i < matches.length; i++) {\n                const index = this._mrtLayout.indexOf(matches[i].prePassConstant);\n                if (index !== -1) {\n                    this._geometryBuffer._forceTextureType(matches[i].geometryBufferConstant, index);\n                    texturesActivated[index] = true;\n                }\n            }\n            this._geometryBuffer._setAttachments(this._engine.buildTextureLayout(texturesActivated));\n        }\n    }\n    /**\n     * Restores attachments for single texture draw.\n     */\n    restoreAttachments() {\n        if (this.enabled && this._currentTarget.enabled && this._defaultAttachments) {\n            if (this._engine._currentRenderTarget) {\n                this._engine.bindAttachments(this._defaultAttachments);\n            }\n            else {\n                this._engine.restoreSingleAttachment();\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _beforeDraw(camera, faceIndex, layer) {\n        // const previousEnabled = this._enabled && this._currentTarget.enabled;\n        if (this._isDirty) {\n            this._update();\n        }\n        if (!this._enabled || !this._currentTarget.enabled) {\n            return;\n        }\n        if (this._geometryBuffer) {\n            this._geometryBuffer.renderList = [];\n        }\n        this._setupOutputForThisPass(this._currentTarget, camera);\n    }\n    _prepareFrame(prePassRenderTarget, faceIndex, layer) {\n        if (prePassRenderTarget.renderTargetTexture) {\n            prePassRenderTarget.renderTargetTexture._prepareFrame(this._scene, faceIndex, layer, prePassRenderTarget.renderTargetTexture.useCameraPostProcesses);\n        }\n        else if (this._postProcessesSourceForThisPass.length) {\n            this._scene.postProcessManager._prepareFrame();\n        }\n        else {\n            this._engine.restoreDefaultFramebuffer();\n        }\n    }\n    /**\n     * Sets an intermediary texture between prepass and postprocesses. This texture\n     * will be used as input for post processes\n     * @param rt The render target texture to use\n     * @returns true if there are postprocesses that will use this texture,\n     * false if there is no postprocesses - and the function has no effect\n     */\n    setCustomOutput(rt) {\n        const firstPP = this._postProcessesSourceForThisPass[0];\n        if (!firstPP) {\n            return false;\n        }\n        firstPP.inputTexture = rt.renderTarget;\n        return true;\n    }\n    _renderPostProcesses(prePassRenderTarget, faceIndex) {\n        const firstPP = this._postProcessesSourceForThisPass[0];\n        const outputTexture = firstPP ? firstPP.inputTexture : prePassRenderTarget.renderTargetTexture ? prePassRenderTarget.renderTargetTexture.renderTarget : null;\n        // Build post process chain for this prepass post draw\n        let postProcessChain = this._currentTarget._beforeCompositionPostProcesses;\n        if (this._needsCompositionForThisPass) {\n            postProcessChain = postProcessChain.concat([this._currentTarget.imageProcessingPostProcess]);\n        }\n        // Activates and renders the chain\n        if (postProcessChain.length) {\n            this._scene.postProcessManager._prepareFrame(this._currentTarget.renderTarget?.texture, postProcessChain);\n            this._scene.postProcessManager.directRender(postProcessChain, outputTexture, false, faceIndex);\n        }\n    }\n    /**\n     * @internal\n     */\n    _afterDraw(faceIndex, layer) {\n        if (this._enabled && this._currentTarget.enabled) {\n            this._prepareFrame(this._currentTarget, faceIndex, layer);\n            this._renderPostProcesses(this._currentTarget, faceIndex);\n        }\n    }\n    /**\n     * Clears the current prepass render target (in the sense of settings pixels to the scene clear color value)\n     * @internal\n     */\n    _clear() {\n        if (this._isDirty) {\n            this._update();\n        }\n        if (this._enabled && this._currentTarget.enabled) {\n            this._bindFrameBuffer();\n            // Clearing other attachment with 0 on all other attachments\n            this._engine.bindAttachments(this._clearAttachments);\n            this._engine.clear(this._clearColor, true, false, false);\n            if (this._useSpecificClearForDepthTexture) {\n                this._engine.bindAttachments(this._clearDepthAttachments);\n                this._engine.clear(this._clearDepthColor, true, false, false);\n            }\n            // Regular clear color with the scene clear color of the 1st attachment\n            this._engine.bindAttachments(this._defaultAttachments);\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _bindFrameBuffer() {\n        if (this._enabled && this._currentTarget.enabled) {\n            this._currentTarget._checkSize();\n            const internalTexture = this._currentTarget.renderTarget;\n            if (internalTexture) {\n                this._engine.bindFramebuffer(internalTexture);\n            }\n        }\n    }\n    _setEnabled(enabled) {\n        this._enabled = enabled;\n    }\n    _setRenderTargetEnabled(prePassRenderTarget, enabled) {\n        prePassRenderTarget.enabled = enabled;\n        if (!enabled) {\n            this._unlinkInternalTexture(prePassRenderTarget);\n        }\n    }\n    /**\n     * Adds an effect configuration to the prepass render target.\n     * If an effect has already been added, it won't add it twice and will return the configuration\n     * already present.\n     * @param cfg the effect configuration\n     * @returns the effect configuration now used by the prepass\n     */\n    addEffectConfiguration(cfg) {\n        // Do not add twice\n        for (let i = 0; i < this._effectConfigurations.length; i++) {\n            if (this._effectConfigurations[i].name === cfg.name) {\n                return this._effectConfigurations[i];\n            }\n        }\n        this._effectConfigurations.push(cfg);\n        if (cfg.clearColor) {\n            this._clearColor.copyFrom(cfg.clearColor);\n        }\n        return cfg;\n    }\n    /**\n     * Retrieves an effect configuration by name\n     * @param name the name of the effect configuration\n     * @returns the effect configuration, or null if not present\n     */\n    getEffectConfiguration(name) {\n        for (let i = 0; i < this._effectConfigurations.length; i++) {\n            if (this._effectConfigurations[i].name === name) {\n                return this._effectConfigurations[i];\n            }\n        }\n        return null;\n    }\n    _enable() {\n        const previousMrtCount = this.mrtCount;\n        for (let i = 0; i < this._effectConfigurations.length; i++) {\n            if (this._effectConfigurations[i].enabled) {\n                this._enableTextures(this._effectConfigurations[i].texturesRequired);\n            }\n        }\n        for (let i = 0; i < this.renderTargets.length; i++) {\n            if (this.mrtCount !== previousMrtCount || this.renderTargets[i].count !== this.mrtCount) {\n                this.renderTargets[i].updateCount(this.mrtCount, { types: this._mrtTypes, formats: this._mrtFormats }, this._mrtNames.concat(\"prePass_DepthBuffer\"));\n            }\n            this.renderTargets[i]._resetPostProcessChain();\n            for (let j = 0; j < this._effectConfigurations.length; j++) {\n                if (this._effectConfigurations[j].enabled) {\n                    // TODO : subsurface scattering has 1 scene-wide effect configuration\n                    // solution : do not stock postProcess on effectConfiguration, but in the prepassRenderTarget (hashmap configuration => postProcess)\n                    // And call createPostProcess whenever the post process does not exist in the RT\n                    if (!this._effectConfigurations[j].postProcess && this._effectConfigurations[j].createPostProcess) {\n                        this._effectConfigurations[j].createPostProcess();\n                    }\n                    if (this._effectConfigurations[j].postProcess) {\n                        this.renderTargets[i]._beforeCompositionPostProcesses.push(this._effectConfigurations[j].postProcess);\n                    }\n                }\n            }\n        }\n        this._reinitializeAttachments();\n        this._setEnabled(true);\n        this._updateGeometryBufferLayout();\n    }\n    _disable() {\n        this._setEnabled(false);\n        for (let i = 0; i < this.renderTargets.length; i++) {\n            this._setRenderTargetEnabled(this.renderTargets[i], false);\n        }\n        this._resetLayout();\n        for (let i = 0; i < this._effectConfigurations.length; i++) {\n            this._effectConfigurations[i].enabled = false;\n        }\n    }\n    _getPostProcessesSource(prePassRenderTarget, camera) {\n        if (camera) {\n            return camera._postProcesses;\n        }\n        else if (prePassRenderTarget.renderTargetTexture) {\n            if (prePassRenderTarget.renderTargetTexture.useCameraPostProcesses) {\n                const camera = prePassRenderTarget.renderTargetTexture.activeCamera ? prePassRenderTarget.renderTargetTexture.activeCamera : this._scene.activeCamera;\n                return camera ? camera._postProcesses : [];\n            }\n            else if (prePassRenderTarget.renderTargetTexture.postProcesses) {\n                return prePassRenderTarget.renderTargetTexture.postProcesses;\n            }\n            else {\n                return [];\n            }\n        }\n        else {\n            return this._scene.activeCamera ? this._scene.activeCamera._postProcesses : [];\n        }\n    }\n    _setupOutputForThisPass(prePassRenderTarget, camera) {\n        // Order is : draw ===> prePassRenderTarget._postProcesses ==> ipp ==> camera._postProcesses\n        const secondaryCamera = camera && this._scene.activeCameras && !!this._scene.activeCameras.length && this._scene.activeCameras.indexOf(camera) !== 0;\n        this._postProcessesSourceForThisPass = this._getPostProcessesSource(prePassRenderTarget, camera);\n        this._postProcessesSourceForThisPass = this._postProcessesSourceForThisPass.filter((pp) => {\n            return pp != null;\n        });\n        this._scene.autoClear = true;\n        const cameraHasImageProcessing = this._hasImageProcessing(this._postProcessesSourceForThisPass);\n        this._needsCompositionForThisPass = !cameraHasImageProcessing && !this.disableGammaTransform && this._needsImageProcessing() && !secondaryCamera;\n        const firstCameraPP = this._getFirstPostProcess(this._postProcessesSourceForThisPass);\n        const firstPrePassPP = prePassRenderTarget._beforeCompositionPostProcesses && prePassRenderTarget._beforeCompositionPostProcesses[0];\n        let firstPP = null;\n        // Setting the scene-wide post process configuration\n        this._scene.imageProcessingConfiguration.applyByPostProcess = this._needsCompositionForThisPass || cameraHasImageProcessing;\n        // Create composition effect if needed\n        if (this._needsCompositionForThisPass && !prePassRenderTarget.imageProcessingPostProcess) {\n            prePassRenderTarget._createCompositionEffect();\n        }\n        // Setting the prePassRenderTarget as input texture of the first PP\n        if (firstPrePassPP) {\n            firstPP = firstPrePassPP;\n        }\n        else if (this._needsCompositionForThisPass) {\n            firstPP = prePassRenderTarget.imageProcessingPostProcess;\n        }\n        else if (firstCameraPP) {\n            firstPP = firstCameraPP;\n        }\n        this._bindFrameBuffer();\n        this._linkInternalTexture(prePassRenderTarget, firstPP);\n    }\n    _linkInternalTexture(prePassRenderTarget, postProcess) {\n        if (postProcess) {\n            postProcess.autoClear = false;\n            postProcess.inputTexture = prePassRenderTarget.renderTarget;\n        }\n        if (prePassRenderTarget._outputPostProcess !== postProcess) {\n            if (prePassRenderTarget._outputPostProcess) {\n                this._unlinkInternalTexture(prePassRenderTarget);\n            }\n            prePassRenderTarget._outputPostProcess = postProcess;\n        }\n        if (prePassRenderTarget._internalTextureDirty) {\n            this._updateGeometryBufferLayout();\n            prePassRenderTarget._internalTextureDirty = false;\n        }\n    }\n    /**\n     * @internal\n     */\n    _unlinkInternalTexture(prePassRenderTarget) {\n        if (prePassRenderTarget._outputPostProcess) {\n            prePassRenderTarget._outputPostProcess.autoClear = true;\n            prePassRenderTarget._outputPostProcess.restoreDefaultInputTexture();\n            prePassRenderTarget._outputPostProcess = null;\n        }\n    }\n    _needsImageProcessing() {\n        for (let i = 0; i < this._effectConfigurations.length; i++) {\n            if (this._effectConfigurations[i].enabled && this._effectConfigurations[i].needsImageProcessing) {\n                return true;\n            }\n        }\n        return false;\n    }\n    _hasImageProcessing(postProcesses) {\n        let isIPPAlreadyPresent = false;\n        if (postProcesses) {\n            for (let i = 0; i < postProcesses.length; i++) {\n                if (postProcesses[i]?.getClassName() === \"ImageProcessingPostProcess\") {\n                    isIPPAlreadyPresent = true;\n                    break;\n                }\n            }\n        }\n        return isIPPAlreadyPresent;\n    }\n    /**\n     * Internal, gets the first post proces.\n     * @param postProcesses\n     * @returns the first post process to be run on this camera.\n     */\n    _getFirstPostProcess(postProcesses) {\n        for (let ppIndex = 0; ppIndex < postProcesses.length; ppIndex++) {\n            if (postProcesses[ppIndex] !== null) {\n                return postProcesses[ppIndex];\n            }\n        }\n        return null;\n    }\n    /**\n     * Marks the prepass renderer as dirty, triggering a check if the prepass is necessary for the next rendering.\n     */\n    markAsDirty() {\n        this._isDirty = true;\n    }\n    /**\n     * Enables a texture on the MultiRenderTarget for prepass\n     * @param types\n     */\n    _enableTextures(types) {\n        // For velocity : enable storage of previous matrices for instances\n        this._scene.needsPreviousWorldMatrices = false;\n        for (let i = 0; i < types.length; i++) {\n            const type = types[i];\n            if (this._textureIndices[type] === -1) {\n                this._textureIndices[type] = this._mrtLayout.length;\n                this._mrtLayout.push(type);\n                this._mrtTypes.push(PrePassRenderer.TextureFormats[type].type);\n                this._mrtFormats.push(PrePassRenderer.TextureFormats[type].format);\n                this._mrtNames.push(PrePassRenderer.TextureFormats[type].name);\n                this.mrtCount++;\n            }\n            if (type === Constants.PREPASS_VELOCITY_TEXTURE_TYPE || type === Constants.PREPASS_VELOCITY_LINEAR_TEXTURE_TYPE) {\n                this._scene.needsPreviousWorldMatrices = true;\n            }\n        }\n    }\n    /**\n     * Makes sure that the prepass renderer is up to date if it has been dirtified.\n     */\n    update() {\n        if (this._isDirty) {\n            this._update();\n        }\n    }\n    _update() {\n        this._disable();\n        let enablePrePass = false;\n        this._scene.imageProcessingConfiguration.applyByPostProcess = false;\n        if (this._scene._depthPeelingRenderer && this._scene.useOrderIndependentTransparency) {\n            this._scene._depthPeelingRenderer.setPrePassRenderer(this);\n            enablePrePass = true;\n        }\n        for (let i = 0; i < this._scene.materials.length; i++) {\n            if (this._scene.materials[i].setPrePassRenderer(this)) {\n                enablePrePass = true;\n            }\n        }\n        if (enablePrePass) {\n            this._setRenderTargetEnabled(this.defaultRT, true);\n        }\n        let postProcesses;\n        for (let i = 0; i < this.renderTargets.length; i++) {\n            if (this.renderTargets[i].renderTargetTexture) {\n                postProcesses = this._getPostProcessesSource(this.renderTargets[i]);\n            }\n            else {\n                const camera = this._scene.activeCamera;\n                if (!camera) {\n                    continue;\n                }\n                postProcesses = camera._postProcesses;\n            }\n            if (!postProcesses) {\n                continue;\n            }\n            postProcesses = postProcesses.filter((pp) => {\n                return pp != null;\n            });\n            if (postProcesses) {\n                for (let j = 0; j < postProcesses.length; j++) {\n                    if (postProcesses[j].setPrePassRenderer(this)) {\n                        this._setRenderTargetEnabled(this.renderTargets[i], true);\n                        enablePrePass = true;\n                    }\n                }\n                if (this._hasImageProcessing(postProcesses)) {\n                    this._scene.imageProcessingConfiguration.applyByPostProcess = true;\n                }\n            }\n        }\n        this._markAllMaterialsAsPrePassDirty();\n        this._isDirty = false;\n        if (enablePrePass) {\n            this._enable();\n        }\n    }\n    _markAllMaterialsAsPrePassDirty() {\n        const materials = this._scene.materials;\n        for (let i = 0; i < materials.length; i++) {\n            materials[i].markAsDirty(Material.PrePassDirtyFlag);\n        }\n    }\n    /**\n     * Disposes the prepass renderer.\n     */\n    dispose() {\n        for (let i = this.renderTargets.length - 1; i >= 0; i--) {\n            this.renderTargets[i].dispose();\n        }\n        for (let i = 0; i < this._effectConfigurations.length; i++) {\n            if (this._effectConfigurations[i].dispose) {\n                this._effectConfigurations[i].dispose();\n            }\n        }\n    }\n}\n/**\n * @internal\n */\nPrePassRenderer._SceneComponentInitialization = (_) => {\n    throw _WarnImport(\"PrePassRendererSceneComponent\");\n};\n/**\n * Describes the types and formats of the textures used by the pre-pass renderer\n */\nPrePassRenderer.TextureFormats = [\n    {\n        purpose: Constants.PREPASS_IRRADIANCE_TEXTURE_TYPE,\n        type: Constants.TEXTURETYPE_HALF_FLOAT,\n        format: Constants.TEXTUREFORMAT_RGBA,\n        name: \"prePass_Irradiance\",\n    },\n    {\n        purpose: Constants.PREPASS_POSITION_TEXTURE_TYPE,\n        type: Constants.TEXTURETYPE_HALF_FLOAT,\n        format: Constants.TEXTUREFORMAT_RGBA,\n        name: \"prePass_Position\",\n    },\n    {\n        purpose: Constants.PREPASS_VELOCITY_TEXTURE_TYPE,\n        type: Constants.TEXTURETYPE_UNSIGNED_BYTE,\n        format: Constants.TEXTUREFORMAT_RGBA,\n        name: \"prePass_Velocity\",\n    },\n    {\n        purpose: Constants.PREPASS_REFLECTIVITY_TEXTURE_TYPE,\n        type: Constants.TEXTURETYPE_UNSIGNED_BYTE,\n        format: Constants.TEXTUREFORMAT_RGBA,\n        name: \"prePass_Reflectivity\",\n    },\n    {\n        purpose: Constants.PREPASS_COLOR_TEXTURE_TYPE,\n        type: Constants.TEXTURETYPE_HALF_FLOAT,\n        format: Constants.TEXTUREFORMAT_RGBA,\n        name: \"prePass_Color\",\n    },\n    {\n        purpose: Constants.PREPASS_DEPTH_TEXTURE_TYPE,\n        type: Constants.TEXTURETYPE_FLOAT,\n        format: Constants.TEXTUREFORMAT_R,\n        name: \"prePass_Depth\",\n    },\n    {\n        purpose: Constants.PREPASS_NORMAL_TEXTURE_TYPE,\n        type: Constants.TEXTURETYPE_HALF_FLOAT,\n        format: Constants.TEXTUREFORMAT_RGBA,\n        name: \"prePass_Normal\",\n    },\n    {\n        purpose: Constants.PREPASS_ALBEDO_SQRT_TEXTURE_TYPE,\n        type: Constants.TEXTURETYPE_UNSIGNED_BYTE,\n        format: Constants.TEXTUREFORMAT_RGBA,\n        name: \"prePass_Albedo\",\n    },\n    {\n        purpose: Constants.PREPASS_WORLD_NORMAL_TEXTURE_TYPE,\n        type: Constants.TEXTURETYPE_UNSIGNED_BYTE,\n        format: Constants.TEXTUREFORMAT_RGBA,\n        name: \"prePass_WorldNormal\",\n    },\n    {\n        purpose: Constants.PREPASS_LOCAL_POSITION_TEXTURE_TYPE,\n        type: Constants.TEXTURETYPE_HALF_FLOAT,\n        format: Constants.TEXTUREFORMAT_RGBA,\n        name: \"prePass_LocalPosition\",\n    },\n    {\n        purpose: Constants.PREPASS_SCREENSPACE_DEPTH_TEXTURE_TYPE,\n        type: Constants.TEXTURETYPE_FLOAT,\n        format: Constants.TEXTUREFORMAT_R,\n        name: \"prePass_ScreenDepth\",\n    },\n    {\n        purpose: Constants.PREPASS_VELOCITY_LINEAR_TEXTURE_TYPE,\n        type: Constants.TEXTURETYPE_HALF_FLOAT,\n        format: Constants.TEXTUREFORMAT_RGBA,\n        name: \"prePass_VelocityLinear\",\n    },\n];\n//# sourceMappingURL=prePassRenderer.js.map","import { Scene } from \"../scene\";\nimport { SceneComponentConstants } from \"../sceneComponent\";\nimport { PrePassRenderer } from \"./prePassRenderer\";\nimport { Logger } from \"../Misc/logger\";\nObject.defineProperty(Scene.prototype, \"prePassRenderer\", {\n    get: function () {\n        return this._prePassRenderer;\n    },\n    set: function (value) {\n        if (value && value.isSupported) {\n            this._prePassRenderer = value;\n        }\n    },\n    enumerable: true,\n    configurable: true,\n});\nScene.prototype.enablePrePassRenderer = function () {\n    if (this._prePassRenderer) {\n        return this._prePassRenderer;\n    }\n    this._prePassRenderer = new PrePassRenderer(this);\n    if (!this._prePassRenderer.isSupported) {\n        this._prePassRenderer = null;\n        Logger.Error(\"PrePassRenderer needs WebGL 2 support.\\n\" + \"Maybe you tried to use the following features that need the PrePassRenderer :\\n\" + \" + Subsurface Scattering\");\n    }\n    return this._prePassRenderer;\n};\nScene.prototype.disablePrePassRenderer = function () {\n    if (!this._prePassRenderer) {\n        return;\n    }\n    this._prePassRenderer.dispose();\n    this._prePassRenderer = null;\n};\n/**\n * Defines the Geometry Buffer scene component responsible to manage a G-Buffer useful\n * in several rendering techniques.\n */\nexport class PrePassRendererSceneComponent {\n    /**\n     * Creates a new instance of the component for the given scene\n     * @param scene Defines the scene to register the component in\n     */\n    constructor(scene) {\n        /**\n         * The component name helpful to identify the component in the list of scene components.\n         */\n        this.name = SceneComponentConstants.NAME_PREPASSRENDERER;\n        this.scene = scene;\n    }\n    /**\n     * Registers the component in a given scene\n     */\n    register() {\n        this.scene._beforeCameraDrawStage.registerStep(SceneComponentConstants.STEP_BEFORECAMERADRAW_PREPASS, this, this._beforeCameraDraw);\n        this.scene._afterCameraDrawStage.registerStep(SceneComponentConstants.STEP_AFTERCAMERADRAW_PREPASS, this, this._afterCameraDraw);\n        this.scene._beforeRenderTargetDrawStage.registerStep(SceneComponentConstants.STEP_BEFORERENDERTARGETDRAW_PREPASS, this, this._beforeRenderTargetDraw);\n        this.scene._afterRenderTargetDrawStage.registerStep(SceneComponentConstants.STEP_AFTERCAMERADRAW_PREPASS, this, this._afterRenderTargetDraw);\n        this.scene._beforeClearStage.registerStep(SceneComponentConstants.STEP_BEFORECLEAR_PREPASS, this, this._beforeClearStage);\n        this.scene._beforeRenderTargetClearStage.registerStep(SceneComponentConstants.STEP_BEFORERENDERTARGETCLEAR_PREPASS, this, this._beforeRenderTargetClearStage);\n        this.scene._beforeRenderingMeshStage.registerStep(SceneComponentConstants.STEP_BEFORERENDERINGMESH_PREPASS, this, this._beforeRenderingMeshStage);\n        this.scene._afterRenderingMeshStage.registerStep(SceneComponentConstants.STEP_AFTERRENDERINGMESH_PREPASS, this, this._afterRenderingMeshStage);\n    }\n    _beforeRenderTargetDraw(renderTarget, faceIndex, layer) {\n        if (this.scene.prePassRenderer && !renderTarget.noPrePassRenderer) {\n            this.scene.prePassRenderer._setRenderTarget(renderTarget._prePassRenderTarget);\n            this.scene.prePassRenderer._beforeDraw(undefined, faceIndex, layer);\n        }\n    }\n    _afterRenderTargetDraw(renderTarget, faceIndex, layer) {\n        if (this.scene.prePassRenderer && !renderTarget.noPrePassRenderer) {\n            this.scene.prePassRenderer._afterDraw(faceIndex, layer);\n        }\n    }\n    _beforeRenderTargetClearStage(renderTarget) {\n        if (this.scene.prePassRenderer && !renderTarget.noPrePassRenderer) {\n            if (!renderTarget._prePassRenderTarget) {\n                renderTarget._prePassRenderTarget = this.scene.prePassRenderer._createRenderTarget(renderTarget.name + \"_prePassRTT\", renderTarget);\n            }\n            this.scene.prePassRenderer._setRenderTarget(renderTarget._prePassRenderTarget);\n            this.scene.prePassRenderer._clear();\n        }\n    }\n    _beforeCameraDraw(camera) {\n        if (this.scene.prePassRenderer) {\n            this.scene.prePassRenderer._setRenderTarget(null);\n            this.scene.prePassRenderer._beforeDraw(camera);\n        }\n    }\n    _afterCameraDraw() {\n        if (this.scene.prePassRenderer) {\n            this.scene.prePassRenderer._afterDraw();\n        }\n    }\n    _beforeClearStage() {\n        if (this.scene.prePassRenderer) {\n            this.scene.prePassRenderer._setRenderTarget(null);\n            this.scene.prePassRenderer._clear();\n        }\n    }\n    _beforeRenderingMeshStage(mesh, subMesh, batch, effect) {\n        if (!effect) {\n            return;\n        }\n        // Render to MRT\n        const scene = mesh.getScene();\n        if (scene.prePassRenderer) {\n            scene.prePassRenderer.bindAttachmentsForEffect(effect, subMesh);\n        }\n    }\n    _afterRenderingMeshStage(mesh) {\n        const scene = mesh.getScene();\n        if (scene.prePassRenderer) {\n            scene.prePassRenderer.restoreAttachments();\n        }\n    }\n    /**\n     * Rebuilds the elements related to this component in case of\n     * context lost for instance.\n     */\n    rebuild() {\n        // Nothing to do for this component\n    }\n    /**\n     * Disposes the component and the associated resources\n     */\n    dispose() {\n        this.scene.disablePrePassRenderer();\n    }\n}\nPrePassRenderer._SceneComponentInitialization = (scene) => {\n    // Register the G Buffer component to the scene.\n    let component = scene._getComponent(SceneComponentConstants.NAME_PREPASSRENDERER);\n    if (!component) {\n        component = new PrePassRendererSceneComponent(scene);\n        scene._addComponent(component);\n    }\n};\n//# sourceMappingURL=prePassRendererSceneComponent.js.map"],"names":[],"mappings":";;;;;;;;AAIA;AACA;AACA;AACO,MAAM,8BAA8B,SAAS,aAAa,CAAC;AAClE,IAAI,cAAc,CAAC,SAAS,EAAE,IAAI,EAAE;AACpC,QAAQ,IAAI,SAAS,EAAE;AACvB,YAAY,IAAI,CAAC,YAAY,GAAG,IAAI;AACpC,YAAY,IAAI,CAAC,IAAI,CAAC,OAAO,4CAAyC,CAAC,CAAC;AACxE;AACA,aAAa;AACb,YAAY,IAAI,CAAC,IAAI,CAAC,OAAO,4CAAqC,CAAC,CAAC;AACpE;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,4BAA4B,GAAG;AACvC,QAAQ,OAAO,IAAI,CAAC,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,4BAA4B,CAAC,KAAK,EAAE;AAC5C;AACA;AACA,QAAQ,KAAK,CAAC,kBAAkB,GAAG,IAAI;AACvC,QAAQ,IAAI,CAAC,mCAAmC,CAAC,KAAK,CAAC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,mCAAmC,CAAC,aAAa,EAAE,UAAU,GAAG,KAAK,EAAE;AAC3E,QAAQ,IAAI,aAAa,KAAK,IAAI,CAAC,6BAA6B,EAAE;AAClE,YAAY;AACZ;AACA;AACA,QAAQ,IAAI,IAAI,CAAC,6BAA6B,IAAI,IAAI,CAAC,wBAAwB,EAAE;AACjF,YAAY,IAAI,CAAC,6BAA6B,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC;AACvG;AACA;AACA,QAAQ,IAAI,CAAC,aAAa,EAAE;AAC5B,YAAY,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK;AAC1C,YAAY,IAAI,CAAC,KAAK,EAAE;AACxB,gBAAgB,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM;AAClD,gBAAgB,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,EAAE;AAC7C,oBAAoB,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM;AAChD,oBAAoB,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;AACrD;AACA,qBAAqB;AACrB,oBAAoB,KAAK,GAAG,WAAW,CAAC,gBAAgB;AACxD;AACA;AACA,YAAY,IAAI,KAAK,EAAE;AACvB,gBAAgB,IAAI,CAAC,6BAA6B,GAAG,KAAK,CAAC,4BAA4B;AACvF;AACA,iBAAiB;AACjB,gBAAgB,IAAI,CAAC,6BAA6B,GAAG,IAAI,4BAA4B,EAAE;AACvF;AACA;AACA,aAAa;AACb,YAAY,IAAI,CAAC,6BAA6B,GAAG,aAAa;AAC9D;AACA;AACA,QAAQ,IAAI,IAAI,CAAC,6BAA6B,EAAE;AAChD,YAAY,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,6BAA6B,CAAC,kBAAkB,CAAC,GAAG,CAAC,MAAM;AAC5G,gBAAgB,IAAI,CAAC,iBAAiB,EAAE;AACxC,aAAa,CAAC;AACd;AACA;AACA,QAAQ,IAAI,CAAC,UAAU,EAAE;AACzB,YAAY,IAAI,CAAC,iBAAiB,EAAE;AACpC;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,WAAW,GAAG;AACtB,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,WAAW;AAC5D;AACA;AACA;AACA;AACA,IAAI,IAAI,WAAW,CAAC,KAAK,EAAE;AAC3B,QAAQ,IAAI,CAAC,4BAA4B,CAAC,WAAW,GAAG,KAAK;AAC7D;AACA;AACA;AACA;AACA,IAAI,IAAI,kBAAkB,GAAG;AAC7B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,kBAAkB;AACnE;AACA;AACA;AACA;AACA,IAAI,IAAI,kBAAkB,CAAC,KAAK,EAAE;AAClC,QAAQ,IAAI,CAAC,4BAA4B,CAAC,kBAAkB,GAAG,KAAK;AACpE;AACA;AACA;AACA;AACA,IAAI,IAAI,mBAAmB,GAAG;AAC9B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,mBAAmB;AACpE;AACA;AACA;AACA;AACA,IAAI,IAAI,mBAAmB,CAAC,KAAK,EAAE;AACnC,QAAQ,IAAI,CAAC,4BAA4B,CAAC,mBAAmB,GAAG,KAAK;AACrE;AACA;AACA;AACA;AACA,IAAI,IAAI,mBAAmB,GAAG;AAC9B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,mBAAmB;AACpE;AACA;AACA;AACA;AACA,IAAI,IAAI,mBAAmB,CAAC,KAAK,EAAE;AACnC,QAAQ,IAAI,CAAC,4BAA4B,CAAC,mBAAmB,GAAG,KAAK;AACrE;AACA;AACA;AACA;AACA,IAAI,IAAI,QAAQ,GAAG;AACnB,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,QAAQ;AACzD;AACA;AACA;AACA;AACA,IAAI,IAAI,QAAQ,CAAC,KAAK,EAAE;AACxB,QAAQ,IAAI,CAAC,4BAA4B,CAAC,QAAQ,GAAG,KAAK;AAC1D;AACA;AACA;AACA;AACA,IAAI,IAAI,kBAAkB,GAAG;AAC7B,QAAQ,OAAO,IAAI,CAAC,6BAA6B,CAAC,kBAAkB;AACpE;AACA;AACA;AACA;AACA,IAAI,IAAI,kBAAkB,CAAC,KAAK,EAAE;AAClC,QAAQ,IAAI,CAAC,6BAA6B,CAAC,kBAAkB,GAAG,KAAK;AACrE;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,GAAG;AAC1B,QAAQ,OAAO,IAAI,CAAC,6BAA6B,CAAC,eAAe;AACjE;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,CAAC,KAAK,EAAE;AAC/B,QAAQ,IAAI,CAAC,6BAA6B,CAAC,eAAe,GAAG,KAAK;AAClE;AACA;AACA;AACA;AACA,IAAI,IAAI,QAAQ,GAAG;AACnB,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,QAAQ;AACzD;AACA;AACA;AACA;AACA,IAAI,IAAI,QAAQ,CAAC,KAAK,EAAE;AACxB,QAAQ,IAAI,CAAC,4BAA4B,CAAC,QAAQ,GAAG,KAAK;AAC1D;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,GAAG;AAC1B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,eAAe;AAChE;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,CAAC,KAAK,EAAE;AAC/B,QAAQ,IAAI,CAAC,4BAA4B,CAAC,eAAe,GAAG,KAAK;AACjE;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,GAAG;AAC1B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,eAAe;AAChE;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,CAAC,KAAK,EAAE;AAC/B,QAAQ,IAAI,CAAC,4BAA4B,CAAC,eAAe,GAAG,KAAK;AACjE;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,GAAG;AAC1B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,eAAe;AAChE;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,CAAC,KAAK,EAAE;AAC/B,QAAQ,IAAI,CAAC,4BAA4B,CAAC,eAAe,GAAG,KAAK;AACjE;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,GAAG;AAC1B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,eAAe;AAChE;AACA,IAAI,IAAI,eAAe,CAAC,KAAK,EAAE;AAC/B,QAAQ,IAAI,CAAC,4BAA4B,CAAC,eAAe,GAAG,KAAK;AACjE;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,GAAG;AAC1B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,eAAe;AAChE;AACA,IAAI,IAAI,eAAe,CAAC,KAAK,EAAE;AAC/B,QAAQ,IAAI,CAAC,4BAA4B,CAAC,eAAe,GAAG,KAAK;AACjE;AACA;AACA;AACA;AACA,IAAI,IAAI,cAAc,GAAG;AACzB,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,cAAc;AAC/D;AACA;AACA;AACA;AACA,IAAI,IAAI,cAAc,CAAC,KAAK,EAAE;AAC9B,QAAQ,IAAI,CAAC,4BAA4B,CAAC,cAAc,GAAG,KAAK;AAChE;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,aAAa,GAAG;AACxB,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,aAAa;AAC9D;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,aAAa,CAAC,KAAK,EAAE;AAC7B,QAAQ,IAAI,CAAC,4BAA4B,CAAC,aAAa,GAAG,KAAK;AAC/D;AACA;AACA;AACA;AACA,IAAI,IAAI,iBAAiB,GAAG;AAC5B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,iBAAiB;AAClE;AACA;AACA;AACA;AACA,IAAI,IAAI,iBAAiB,CAAC,KAAK,EAAE;AACjC,QAAQ,IAAI,CAAC,4BAA4B,CAAC,iBAAiB,GAAG,KAAK;AACnE;AACA;AACA;AACA;AACA,IAAI,IAAI,iBAAiB,GAAG;AAC5B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,iBAAiB;AAClE;AACA;AACA;AACA;AACA,IAAI,IAAI,iBAAiB,CAAC,KAAK,EAAE;AACjC,QAAQ,IAAI,CAAC,4BAA4B,CAAC,iBAAiB,GAAG,KAAK;AACnE;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,GAAG;AAC1B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,eAAe;AAChE;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,CAAC,KAAK,EAAE;AAC/B,QAAQ,IAAI,CAAC,4BAA4B,CAAC,eAAe,GAAG,KAAK;AACjE;AACA;AACA;AACA;AACA,IAAI,IAAI,kBAAkB,GAAG;AAC7B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,kBAAkB;AACnE;AACA;AACA;AACA;AACA,IAAI,IAAI,kBAAkB,CAAC,KAAK,EAAE;AAClC,QAAQ,IAAI,CAAC,4BAA4B,CAAC,kBAAkB,GAAG,KAAK;AACpE;AACA;AACA;AACA;AACA,IAAI,IAAI,gBAAgB,GAAG;AAC3B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,gBAAgB;AACjE;AACA;AACA;AACA;AACA,IAAI,IAAI,gBAAgB,CAAC,KAAK,EAAE;AAChC,QAAQ,IAAI,CAAC,4BAA4B,CAAC,gBAAgB,GAAG,KAAK;AAClE;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,GAAG;AAC1B,QAAQ,OAAO,IAAI,CAAC,gBAAgB;AACpC;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,CAAC,KAAK,EAAE;AAC/B,QAAQ,IAAI,IAAI,CAAC,gBAAgB,KAAK,KAAK,EAAE;AAC7C,YAAY;AACZ;AACA,QAAQ,IAAI,CAAC,gBAAgB,GAAG,KAAK;AACrC,QAAQ,IAAI,CAAC,iBAAiB,EAAE;AAChC;AACA;AACA;AACA;AACA,IAAI,IAAI,kBAAkB,GAAG;AAC7B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,kBAAkB;AACnE;AACA;AACA;AACA;AACA,IAAI,IAAI,kBAAkB,CAAC,KAAK,EAAE;AAClC,QAAQ,IAAI,CAAC,4BAA4B,CAAC,kBAAkB,GAAG,KAAK;AACpE;AACA;AACA;AACA;AACA,IAAI,IAAI,mBAAmB,GAAG;AAC9B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,mBAAmB;AACpE;AACA;AACA;AACA;AACA,IAAI,IAAI,mBAAmB,CAAC,KAAK,EAAE;AACnC,QAAQ,IAAI,CAAC,4BAA4B,CAAC,mBAAmB,GAAG,KAAK;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,WAAW,CAAC,IAAI,EAAE,MAAM,GAAG,IAAI,EAAE,OAAO,EAAE;AAC9C,QAAQ,KAAK,CAAC;AACd,YAAY,GAAG,OAAO;AACtB,YAAY,IAAI;AAChB,YAAY,MAAM,EAAE,MAAM,IAAI,MAAM,CAAC,iBAAiB;AACtD,YAAY,cAAc,EAAE,IAAI;AAChC,YAAY,gBAAgB,EAAE,IAAI;AAClC,YAAY,cAAc,EAAE,8BAA8B,CAAC,WAAW;AACtE,SAAS,CAAC;AACV,QAAQ,IAAI,CAAC,gBAAgB,GAAG,IAAI;AACpC;AACA;AACA;AACA,QAAQ,IAAI,CAAC,QAAQ,GAAG;AACxB,YAAY,eAAe,EAAE,KAAK;AAClC,YAAY,QAAQ,EAAE,KAAK;AAC3B,YAAY,yBAAyB,EAAE,KAAK;AAC5C,YAAY,uBAAuB,EAAE,KAAK;AAC1C,YAAY,WAAW,EAAE,CAAC;AAC1B,YAAY,QAAQ,EAAE,KAAK;AAC3B,YAAY,WAAW,EAAE,KAAK;AAC9B,YAAY,YAAY,EAAE,KAAK;AAC/B,YAAY,cAAc,EAAE,KAAK;AACjC,YAAY,eAAe,EAAE,KAAK;AAClC,YAAY,mBAAmB,EAAE,KAAK;AACtC,YAAY,eAAe,EAAE,KAAK;AAClC,YAAY,MAAM,EAAE,KAAK;AACzB,YAAY,0BAA0B,EAAE,KAAK;AAC7C,YAAY,QAAQ,EAAE,KAAK;AAC3B,YAAY,mBAAmB,EAAE,KAAK;AACtC,SAAS;AACT,QAAQ,MAAM,4BAA4B,GAAG,OAAO,EAAE,4BAA4B;AAClF;AACA;AACA,QAAQ,IAAI,4BAA4B,EAAE;AAC1C,YAAY,4BAA4B,CAAC,kBAAkB,GAAG,IAAI;AAClE,YAAY,IAAI,CAAC,mCAAmC,CAAC,4BAA4B,EAAE,IAAI,CAAC;AACxF;AACA,YAAY,IAAI,CAAC,iBAAiB,EAAE;AACpC;AACA;AACA,aAAa;AACb,YAAY,IAAI,CAAC,mCAAmC,CAAC,IAAI,EAAE,IAAI,CAAC;AAChE,YAAY,IAAI,CAAC,4BAA4B,CAAC,kBAAkB,GAAG,IAAI;AACvE;AACA;AACA;AACA;AACA;AACA,IAAI,iBAAiB,GAAG;AACxB,QAAQ,IAAI,CAAC,QAAQ,CAAC,eAAe,GAAG,IAAI,CAAC,gBAAgB;AAC7D,QAAQ,IAAI,CAAC,4BAA4B,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC;AAC7E,QAAQ,IAAI,OAAO,GAAG,EAAE;AACxB,QAAQ,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE;AAC1C,YAAY,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;AAC7C,YAAY,MAAM,IAAI,GAAG,OAAO,KAAK;AACrC,YAAY,QAAQ,IAAI;AACxB,gBAAgB,KAAK,QAAQ;AAC7B,gBAAgB,KAAK,QAAQ;AAC7B,oBAAoB,OAAO,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC;AAC5D,oBAAoB;AACpB,gBAAgB;AAChB,oBAAoB,IAAI,KAAK,EAAE;AAC/B,wBAAwB,OAAO,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,GAAG,CAAC;AACvD;AACA,oBAAoB;AACpB;AACA;AACA,QAAQ,MAAM,QAAQ,GAAG,CAAC,gBAAgB,CAAC;AAC3C,QAAQ,MAAM,QAAQ,GAAG,CAAC,OAAO,CAAC;AAClC,QAAQ,IAAI,4BAA4B,EAAE;AAC1C,YAAY,4BAA4B,CAAC,eAAe,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC;AACjF,YAAY,4BAA4B,CAAC,eAAe,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC;AACjF;AACA,QAAQ,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC;AACtD;AACA,IAAI,IAAI,CAAC,iBAAiB,GAAG,KAAK,EAAE;AACpC,QAAQ,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC;AACrC,QAAQ,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,mBAAmB,CAAC;AACrF;AACA,IAAI,OAAO,GAAG;AACd,QAAQ,KAAK,CAAC,OAAO,EAAE;AACvB,QAAQ,IAAI,IAAI,CAAC,6BAA6B,IAAI,IAAI,CAAC,wBAAwB,EAAE;AACjF,YAAY,IAAI,CAAC,6BAA6B,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC;AACvG;AACA,QAAQ,IAAI,IAAI,CAAC,6BAA6B,EAAE;AAChD,YAAY,IAAI,CAAC,4BAA4B,CAAC,kBAAkB,GAAG,KAAK;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,CAAC,WAAW,GAAG,iBAAiB;;ACvc9D;AACA;AACA;AACA;AACO,MAAM,0BAA0B,SAAS,WAAW,CAAC;AAC5D,IAAI,IAAI,6BAA6B,GAAG;AACxC,QAAQ,OAAO,IAAI,CAAC,cAAc,CAAC,4BAA4B;AAC/D;AACA;AACA;AACA;AACA,IAAI,IAAI,4BAA4B,GAAG;AACvC,QAAQ,OAAO,IAAI,CAAC,cAAc,CAAC,4BAA4B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,4BAA4B,CAAC,KAAK,EAAE;AAC5C,QAAQ,IAAI,CAAC,cAAc,CAAC,4BAA4B,GAAG,KAAK;AAChE;AACA;AACA;AACA;AACA,IAAI,IAAI,WAAW,GAAG;AACtB,QAAQ,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE;AACvC,QAAQ,OAAO,CAAC,MAAM,IAAI,MAAM,CAAC,WAAW;AAC5C;AACA;AACA;AACA;AACA,IAAI,IAAI,WAAW,GAAG;AACtB,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,WAAW;AAC5D;AACA;AACA;AACA;AACA,IAAI,IAAI,WAAW,CAAC,KAAK,EAAE;AAC3B,QAAQ,IAAI,CAAC,4BAA4B,CAAC,WAAW,GAAG,KAAK;AAC7D;AACA;AACA;AACA;AACA,IAAI,IAAI,kBAAkB,GAAG;AAC7B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,kBAAkB;AACnE;AACA;AACA;AACA;AACA,IAAI,IAAI,kBAAkB,CAAC,KAAK,EAAE;AAClC,QAAQ,IAAI,CAAC,4BAA4B,CAAC,kBAAkB,GAAG,KAAK;AACpE;AACA;AACA;AACA;AACA,IAAI,IAAI,mBAAmB,GAAG;AAC9B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,mBAAmB;AACpE;AACA;AACA;AACA;AACA,IAAI,IAAI,mBAAmB,CAAC,KAAK,EAAE;AACnC,QAAQ,IAAI,CAAC,4BAA4B,CAAC,mBAAmB,GAAG,KAAK;AACrE;AACA;AACA;AACA;AACA,IAAI,IAAI,mBAAmB,GAAG;AAC9B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,mBAAmB;AACpE;AACA;AACA;AACA;AACA,IAAI,IAAI,mBAAmB,CAAC,KAAK,EAAE;AACnC,QAAQ,IAAI,CAAC,4BAA4B,CAAC,mBAAmB,GAAG,KAAK;AACrE;AACA;AACA;AACA;AACA,IAAI,IAAI,QAAQ,GAAG;AACnB,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,QAAQ;AACzD;AACA;AACA;AACA;AACA,IAAI,IAAI,QAAQ,CAAC,KAAK,EAAE;AACxB,QAAQ,IAAI,CAAC,4BAA4B,CAAC,QAAQ,GAAG,KAAK;AAC1D;AACA;AACA;AACA;AACA,IAAI,IAAI,kBAAkB,GAAG;AAC7B,QAAQ,OAAO,IAAI,CAAC,6BAA6B,CAAC,kBAAkB;AACpE;AACA;AACA;AACA;AACA,IAAI,IAAI,kBAAkB,CAAC,KAAK,EAAE;AAClC,QAAQ,IAAI,CAAC,6BAA6B,CAAC,kBAAkB,GAAG,KAAK;AACrE;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,GAAG;AAC1B,QAAQ,OAAO,IAAI,CAAC,6BAA6B,CAAC,eAAe;AACjE;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,CAAC,KAAK,EAAE;AAC/B,QAAQ,IAAI,CAAC,6BAA6B,CAAC,eAAe,GAAG,KAAK;AAClE;AACA;AACA;AACA;AACA,IAAI,IAAI,QAAQ,GAAG;AACnB,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,QAAQ;AACzD;AACA;AACA;AACA;AACA,IAAI,IAAI,QAAQ,CAAC,KAAK,EAAE;AACxB,QAAQ,IAAI,CAAC,4BAA4B,CAAC,QAAQ,GAAG,KAAK;AAC1D;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,GAAG;AAC1B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,eAAe;AAChE;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,CAAC,KAAK,EAAE;AAC/B,QAAQ,IAAI,CAAC,4BAA4B,CAAC,eAAe,GAAG,KAAK;AACjE;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,GAAG;AAC1B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,eAAe;AAChE;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,CAAC,KAAK,EAAE;AAC/B,QAAQ,IAAI,CAAC,4BAA4B,CAAC,eAAe,GAAG,KAAK;AACjE;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,GAAG;AAC1B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,eAAe;AAChE;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,CAAC,KAAK,EAAE;AAC/B,QAAQ,IAAI,CAAC,4BAA4B,CAAC,eAAe,GAAG,KAAK;AACjE;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,GAAG;AAC1B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,eAAe;AAChE;AACA,IAAI,IAAI,eAAe,CAAC,KAAK,EAAE;AAC/B,QAAQ,IAAI,CAAC,4BAA4B,CAAC,eAAe,GAAG,KAAK;AACjE;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,GAAG;AAC1B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,eAAe;AAChE;AACA,IAAI,IAAI,eAAe,CAAC,KAAK,EAAE;AAC/B,QAAQ,IAAI,CAAC,4BAA4B,CAAC,eAAe,GAAG,KAAK;AACjE;AACA;AACA;AACA;AACA,IAAI,IAAI,cAAc,GAAG;AACzB,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,cAAc;AAC/D;AACA;AACA;AACA;AACA,IAAI,IAAI,cAAc,CAAC,KAAK,EAAE;AAC9B,QAAQ,IAAI,CAAC,4BAA4B,CAAC,cAAc,GAAG,KAAK;AAChE;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,aAAa,GAAG;AACxB,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,aAAa;AAC9D;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,aAAa,CAAC,KAAK,EAAE;AAC7B,QAAQ,IAAI,CAAC,4BAA4B,CAAC,aAAa,GAAG,KAAK;AAC/D;AACA;AACA;AACA;AACA,IAAI,IAAI,iBAAiB,GAAG;AAC5B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,iBAAiB;AAClE;AACA;AACA;AACA;AACA,IAAI,IAAI,iBAAiB,CAAC,KAAK,EAAE;AACjC,QAAQ,IAAI,CAAC,4BAA4B,CAAC,iBAAiB,GAAG,KAAK;AACnE;AACA;AACA;AACA;AACA,IAAI,IAAI,iBAAiB,GAAG;AAC5B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,iBAAiB;AAClE;AACA;AACA;AACA;AACA,IAAI,IAAI,iBAAiB,CAAC,KAAK,EAAE;AACjC,QAAQ,IAAI,CAAC,4BAA4B,CAAC,iBAAiB,GAAG,KAAK;AACnE;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,GAAG;AAC1B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,eAAe;AAChE;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,CAAC,KAAK,EAAE;AAC/B,QAAQ,IAAI,CAAC,4BAA4B,CAAC,eAAe,GAAG,KAAK;AACjE;AACA;AACA;AACA;AACA,IAAI,IAAI,kBAAkB,GAAG;AAC7B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,kBAAkB;AACnE;AACA;AACA;AACA;AACA,IAAI,IAAI,kBAAkB,CAAC,KAAK,EAAE;AAClC,QAAQ,IAAI,CAAC,4BAA4B,CAAC,kBAAkB,GAAG,KAAK;AACpE;AACA;AACA;AACA;AACA,IAAI,IAAI,gBAAgB,GAAG;AAC3B,QAAQ,OAAO,IAAI,CAAC,4BAA4B,CAAC,gBAAgB;AACjE;AACA;AACA;AACA;AACA,IAAI,IAAI,gBAAgB,CAAC,KAAK,EAAE;AAChC,QAAQ,IAAI,CAAC,4BAA4B,CAAC,gBAAgB,GAAG,KAAK;AAClE;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,GAAG;AAC1B,QAAQ,OAAO,IAAI,CAAC,cAAc,CAAC,eAAe;AAClD;AACA;AACA;AACA;AACA,IAAI,IAAI,eAAe,CAAC,KAAK,EAAE;AAC/B,QAAQ,IAAI,CAAC,cAAc,CAAC,eAAe,GAAG,KAAK;AACnD;AACA,IAAI,WAAW,CAAC,IAAI,EAAE,OAAO,EAAE,MAAM,GAAG,IAAI,EAAE,YAAY,EAAE,MAAM,EAAE,QAAQ,EAAE,WAAW,GAAG,SAAS,CAAC,yBAAyB,EAAE,4BAA4B,EAAE;AAC/J,QAAQ,MAAM,YAAY,GAAG;AAC7B,YAAY,IAAI,EAAE,OAAO,OAAO,KAAK,QAAQ,GAAG,OAAO,GAAG,SAAS;AACnE,YAAY,MAAM;AAClB,YAAY,YAAY;AACxB,YAAY,MAAM;AAClB,YAAY,QAAQ;AACpB,YAAY,WAAW;AACvB,YAAY,4BAA4B;AACxC,YAAY,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE;AACrC,YAAY,GAAG,OAAO;AACtB,YAAY,gBAAgB,EAAE,IAAI;AAClC,SAAS;AACT,QAAQ,KAAK,CAAC,IAAI,EAAE,8BAA8B,CAAC,WAAW,EAAE;AAChE,YAAY,aAAa,EAAE,OAAO,OAAO,KAAK,QAAQ,IAAI,CAAC,OAAO,CAAC,aAAa,GAAG,IAAI,8BAA8B,CAAC,IAAI,EAAE,MAAM,EAAE,YAAY,CAAC,GAAG,SAAS;AAC7J,YAAY,GAAG,YAAY;AAC3B,SAAS,CAAC;AACV,QAAQ,IAAI,CAAC,OAAO,GAAG,MAAM;AAC7B,YAAY,IAAI,CAAC,cAAc,CAAC,mBAAmB,GAAG,IAAI,CAAC,WAAW;AACtE,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,IAAI,YAAY,GAAG;AACnB,QAAQ,OAAO,4BAA4B;AAC3C;AACA;AACA;AACA;AACA,IAAI,iBAAiB,GAAG;AACxB,QAAQ,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE;AAC/C;AACA,IAAI,OAAO,CAAC,MAAM,EAAE;AACpB,QAAQ,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC;AAC7B,QAAQ,IAAI,IAAI,CAAC,6BAA6B,EAAE;AAChD,YAAY,IAAI,CAAC,4BAA4B,CAAC,kBAAkB,GAAG,KAAK;AACxE;AACA;AACA;AACA,UAAU,CAAC;AACX,IAAI,SAAS;AACb,CAAC,EAAE,0BAA0B,CAAC,SAAS,EAAE,iBAAiB,EAAE,IAAI,CAAC;;ACvUjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,mBAAmB,SAAS,iBAAiB,CAAC;AAC3D,IAAI,WAAW,CAAC,IAAI,EAAE,mBAAmB,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE;AACxE,QAAQ,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,CAAC;AAChD;AACA;AACA;AACA,QAAQ,IAAI,CAAC,+BAA+B,GAAG,EAAE;AACjD;AACA;AACA;AACA,QAAQ,IAAI,CAAC,qBAAqB,GAAG,KAAK;AAC1C;AACA;AACA;AACA,QAAQ,IAAI,CAAC,OAAO,GAAG,KAAK;AAC5B;AACA;AACA;AACA;AACA,QAAQ,IAAI,CAAC,mBAAmB,GAAG,IAAI;AACvC,QAAQ,IAAI,CAAC,mBAAmB,GAAG,mBAAmB;AACtD;AACA;AACA;AACA;AACA;AACA,IAAI,wBAAwB,GAAG;AAC/B,QAAQ,IAAI,CAAC,0BAA0B,GAAG,IAAI,0BAA0B,CAAC,oBAAoB,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC;AAChI,QAAQ,IAAI,CAAC,0BAA0B,CAAC,iBAAiB,EAAE;AAC3D;AACA;AACA;AACA;AACA;AACA,IAAI,UAAU,GAAG;AACjB,QAAQ,MAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC;AAC/D,QAAQ,MAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC;AACjE,QAAQ,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,EAAE;AAC3C,QAAQ,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,EAAE;AAC7C,QAAQ,IAAI,KAAK,KAAK,aAAa,IAAI,MAAM,KAAK,cAAc,EAAE;AAClE,YAAY,IAAI,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,aAAa,EAAE,MAAM,EAAE,cAAc,EAAE,CAAC;AACzE,YAAY,IAAI,CAAC,qBAAqB,GAAG,IAAI;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,WAAW,CAAC,KAAK,EAAE,OAAO,EAAE,YAAY,EAAE;AAC9C,QAAQ,KAAK,CAAC,WAAW,CAAC,KAAK,EAAE,OAAO,EAAE,YAAY,CAAC;AACvD,QAAQ,IAAI,CAAC,qBAAqB,GAAG,IAAI;AACzC;AACA;AACA;AACA;AACA;AACA,IAAI,sBAAsB,GAAG;AAC7B,QAAQ,IAAI,CAAC,+BAA+B,CAAC,MAAM,GAAG,CAAC;AACvD;AACA;AACA;AACA;AACA,IAAI,OAAO,GAAG;AACd,QAAQ,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM;AACjC,QAAQ,KAAK,CAAC,OAAO,EAAE;AACvB,QAAQ,IAAI,KAAK,IAAI,KAAK,CAAC,eAAe,EAAE;AAC5C,YAAY,MAAM,KAAK,GAAG,KAAK,CAAC,eAAe,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC;AAC3E,YAAY,IAAI,KAAK,KAAK,EAAE,EAAE;AAC9B,gBAAgB,KAAK,CAAC,eAAe,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;AACpE;AACA;AACA,QAAQ,IAAI,IAAI,CAAC,0BAA0B,EAAE;AAC7C,YAAY,IAAI,CAAC,0BAA0B,CAAC,OAAO,EAAE;AACrD;AACA,QAAQ,IAAI,IAAI,CAAC,mBAAmB,EAAE;AACtC,YAAY,IAAI,CAAC,mBAAmB,CAAC,oBAAoB,GAAG,IAAI;AAChE;AACA,QAAQ,IAAI,IAAI,CAAC,kBAAkB,EAAE;AACrC,YAAY,IAAI,CAAC,kBAAkB,CAAC,SAAS,GAAG,IAAI;AACpD,YAAY,IAAI,CAAC,kBAAkB,CAAC,0BAA0B,EAAE;AAChE;AACA;AACA;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,eAAe,CAAC;AAC7B;AACA;AACA;AACA,IAAI,IAAI,2BAA2B,GAAG;AACtC,QAAQ,OAAO,IAAI,CAAC,4BAA4B;AAChD;AACA,IAAI,IAAI,2BAA2B,CAAC,KAAK,EAAE;AAC3C,QAAQ,IAAI,IAAI,CAAC,4BAA4B,KAAK,KAAK,EAAE;AACzD,YAAY;AACZ;AACA,QAAQ,IAAI,CAAC,4BAA4B,GAAG,KAAK;AACjD,QAAQ,IAAI,CAAC,+BAA+B,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,QAAQ,CAAC,IAAI,EAAE;AACnB,QAAQ,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;AACzC;AACA;AACA;AACA;AACA,IAAI,IAAI,OAAO,GAAG;AAClB,QAAQ,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO;AACrC;AACA,IAAI,IAAI,OAAO,CAAC,CAAC,EAAE;AACnB,QAAQ,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG,CAAC;AAClC;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,+BAA+B,GAAG;AAC1C,QAAQ,OAAO,IAAI,CAAC,gCAAgC;AACpD;AACA,IAAI,IAAI,+BAA+B,CAAC,KAAK,EAAE;AAC/C,QAAQ,IAAI,IAAI,CAAC,gCAAgC,KAAK,KAAK,EAAE;AAC7D,YAAY;AACZ;AACA,QAAQ,IAAI,CAAC,gCAAgC,GAAG,KAAK;AACrD,QAAQ,IAAI,CAAC,QAAQ,GAAG,IAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,eAAe,GAAG;AACtB,QAAQ,OAAO,IAAI,CAAC,cAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,gBAAgB,CAAC,mBAAmB,EAAE;AAC1C,QAAQ,IAAI,mBAAmB,EAAE;AACjC,YAAY,IAAI,CAAC,cAAc,GAAG,mBAAmB;AACrD;AACA,aAAa;AACb,YAAY,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,SAAS;AAChD,YAAY,IAAI,CAAC,OAAO,CAAC,mBAAmB,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,YAAY,IAAI,IAAI,CAAC,cAAc,CAAC,YAAY;AACzH;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,kBAAkB,GAAG;AAC7B,QAAQ,OAAO,IAAI,CAAC,cAAc,KAAK,IAAI,CAAC,SAAS;AACrD;AACA,IAAI,kCAAkC,GAAG;AACzC,QAAQ,IAAI,CAAC,IAAI,CAAC,gCAAgC,EAAE;AACpD,YAAY,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,4BAA4B,EAAE;AAC7E,YAAY,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;AACvC;AACA,gBAAgB,IAAI,CAAC,gCAAgC,GAAG,IAAI;AAC5D,gBAAgB;AAChB;AACA,YAAY,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,IAAI,CAAC;AAC3D;AACA,aAAa;AACb,YAAY,IAAI,IAAI,CAAC,eAAe,EAAE;AACtC,gBAAgB,IAAI,CAAC,eAAe,CAAC,sBAAsB,EAAE;AAC7D;AACA,YAAY,IAAI,CAAC,eAAe,GAAG,IAAI;AACvC,YAAY,IAAI,CAAC,MAAM,CAAC,6BAA6B,EAAE;AACvD;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,OAAO,GAAG;AAClB,QAAQ,OAAO,IAAI,CAAC,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA,IAAI,WAAW,CAAC,KAAK,EAAE;AACvB;AACA;AACA;AACA,QAAQ,IAAI,CAAC,mBAAmB,GAAG,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA,QAAQ,IAAI,CAAC,iBAAiB,GAAG,EAAE;AACnC;AACA;AACA;AACA,QAAQ,IAAI,CAAC,QAAQ,GAAG,CAAC;AACzB,QAAQ,IAAI,CAAC,SAAS,GAAG,EAAE;AAC3B,QAAQ,IAAI,CAAC,WAAW,GAAG,EAAE;AAC7B,QAAQ,IAAI,CAAC,UAAU,GAAG,EAAE;AAC5B,QAAQ,IAAI,CAAC,SAAS,GAAG,EAAE;AAC3B,QAAQ,IAAI,CAAC,eAAe,GAAG,EAAE;AACjC,QAAQ,IAAI,CAAC,4BAA4B,GAAG,KAAK;AACjD,QAAQ,IAAI,CAAC,gCAAgC,GAAG,KAAK;AACrD,QAAQ,IAAI,CAAC,QAAQ,GAAG,IAAI;AAC5B;AACA;AACA;AACA,QAAQ,IAAI,CAAC,qBAAqB,GAAG,EAAE;AACvC;AACA;AACA;AACA,QAAQ,IAAI,CAAC,gCAAgC,GAAG,IAAI;AACpD;AACA;AACA;AACA,QAAQ,IAAI,CAAC,aAAa,GAAG,EAAE;AAC/B,QAAQ,IAAI,CAAC,WAAW,GAAG,IAAI,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACjD,QAAQ,IAAI,CAAC,gBAAgB,GAAG,IAAI,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACvD,QAAQ,IAAI,CAAC,QAAQ,GAAG,KAAK;AAC7B,QAAQ,IAAI,CAAC,4BAA4B,GAAG,KAAK;AACjD;AACA;AACA;AACA;AACA;AACA,QAAQ,IAAI,CAAC,qBAAqB,GAAG,KAAK;AAC1C,QAAQ,IAAI,CAAC,MAAM,GAAG,KAAK;AAC3B,QAAQ,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,SAAS,EAAE;AACxC,QAAQ,IAAI,IAAI,GAAG,SAAS,CAAC,yBAAyB;AACtD,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,YAAY,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE;AAC/F,YAAY,IAAI,GAAG,SAAS,CAAC,iBAAiB;AAC9C;AACA,aAAa,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,gBAAgB,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE;AAC5G,YAAY,IAAI,GAAG,SAAS,CAAC,sBAAsB;AACnD;AACA,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,cAAc,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AACxE,YAAY,MAAM,MAAM,GAAG,eAAe,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,MAAM;AACnE,YAAY,IAAI,eAAe,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC,iBAAiB,EAAE;AACxF,gBAAgB,eAAe,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI;AAC7D,gBAAgB,IAAI,IAAI,KAAK,SAAS,CAAC,iBAAiB;AACxD,qBAAqB,MAAM,KAAK,SAAS,CAAC,eAAe,IAAI,MAAM,KAAK,SAAS,CAAC,gBAAgB,IAAI,MAAM,KAAK,SAAS,CAAC,kBAAkB,CAAC;AAC9I,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE;AACrE;AACA,oBAAoB,eAAe,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,SAAS,CAAC,sBAAsB;AAC7F;AACA;AACA;AACA,QAAQ,eAAe,CAAC,6BAA6B,CAAC,IAAI,CAAC,MAAM,CAAC;AAClE,QAAQ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,EAAE,IAAI,CAAC;AACzE,QAAQ,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,SAAS;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,mBAAmB,CAAC,IAAI,EAAE,mBAAmB,EAAE;AACnD,QAAQ,MAAM,EAAE,GAAG,IAAI,mBAAmB,CAAC,IAAI,EAAE,mBAAmB,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE;AACxK,YAAY,eAAe,EAAE,KAAK;AAClC,YAAY,qBAAqB,EAAE,IAAI,CAAC,OAAO,CAAC,eAAe;AAC/D,YAAY,WAAW,EAAE,SAAS,CAAC,yBAAyB;AAC5D,YAAY,KAAK,EAAE,EAAE;AACrB,YAAY,kCAAkC,EAAE,IAAI;AACpD,SAAS,CAAC;AACV,QAAQ,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC;AACnC,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE;AAC3B;AACA,YAAY,IAAI,CAAC,OAAO,EAAE;AAC1B;AACA,QAAQ,OAAO,EAAE;AACjB;AACA;AACA;AACA;AACA,IAAI,IAAI,WAAW,GAAG;AACtB,QAAQ,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,CAAC,oBAAoB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,wBAAwB,CAAC,MAAM,EAAE,OAAO,EAAE;AAC9C,QAAQ,MAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,EAAE;AAC9C,QAAQ,MAAM,gBAAgB,GAAG,QAAQ,IAAI,QAAQ,CAAC,gBAAgB;AACtE,QAAQ,MAAM,QAAQ,GAAG,QAAQ,IAAI,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,EAAE;AACpF,QAAQ,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE;AACzD,YAAY,IAAI,MAAM,CAAC,YAAY,IAAI,gBAAgB,IAAI,CAAC,QAAQ,EAAE;AACtE,gBAAgB,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,uBAAuB,CAAC;AAC1E;AACA,iBAAiB;AACjB,gBAAgB,IAAI,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE;AACvD,oBAAoB,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,mBAAmB,CAAC;AAC1E;AACA,qBAAqB;AACrB,oBAAoB,IAAI,CAAC,OAAO,CAAC,uBAAuB,EAAE;AAC1D;AACA,gBAAgB,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,kBAAkB,IAAI,CAAC,QAAQ,EAAE;AAClF,oBAAoB,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC;AACpF;AACA;AACA;AACA;AACA,IAAI,wBAAwB,GAAG;AAC/B,QAAQ,MAAM,iBAAiB,GAAG,EAAE;AACpC,QAAQ,MAAM,WAAW,GAAG,CAAC,KAAK,CAAC;AACnC,QAAQ,MAAM,gBAAgB,GAAG,CAAC,KAAK,CAAC;AACxC,QAAQ,MAAM,aAAa,GAAG,CAAC,IAAI,CAAC;AACpC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,EAAE,EAAE;AAChD,YAAY,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC;AACxC,YAAY,IAAI,CAAC,GAAG,CAAC,EAAE;AACvB,gBAAgB,IAAI,IAAI,CAAC,gCAAgC,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC,0BAA0B,EAAE;AAC1H,oBAAoB,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC;AAC3C,oBAAoB,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC;AAC/C;AACA,qBAAqB;AACrB,oBAAoB,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;AAC1C,oBAAoB,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC;AAChD;AACA,gBAAgB,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC;AACzC;AACA;AACA,QAAQ,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,iBAAiB,CAAC;AACzF,QAAQ,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,WAAW,CAAC;AAC7E,QAAQ,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,gBAAgB,CAAC;AACvF,QAAQ,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,aAAa,CAAC;AACjF;AACA,IAAI,YAAY,GAAG;AACnB,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACxE,YAAY,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE;AAChF;AACA,QAAQ,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,0BAA0B,CAAC,GAAG,CAAC;AACtE,QAAQ,IAAI,CAAC,UAAU,GAAG,CAAC,SAAS,CAAC,0BAA0B,CAAC;AAChE,QAAQ,IAAI,CAAC,SAAS,GAAG,CAAC,eAAe,CAAC,cAAc,CAAC,SAAS,CAAC,0BAA0B,CAAC,CAAC,IAAI,CAAC;AACpG,QAAQ,IAAI,CAAC,WAAW,GAAG,CAAC,eAAe,CAAC,cAAc,CAAC,SAAS,CAAC,0BAA0B,CAAC,CAAC,MAAM,CAAC;AACxG,QAAQ,IAAI,CAAC,SAAS,GAAG,CAAC,eAAe,CAAC,cAAc,CAAC,SAAS,CAAC,0BAA0B,CAAC,CAAC,IAAI,CAAC;AACpG,QAAQ,IAAI,CAAC,QAAQ,GAAG,CAAC;AACzB;AACA,IAAI,2BAA2B,GAAG;AAClC,QAAQ,IAAI,CAAC,kCAAkC,EAAE;AACjD,QAAQ,IAAI,IAAI,CAAC,eAAe,EAAE;AAClC,YAAY,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE;AAC/C,YAAY,MAAM,iBAAiB,GAAG,EAAE;AACxC,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC7D,gBAAgB,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC;AAC7C;AACA,YAAY,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAC;AAC1F,YAAY,MAAM,OAAO,GAAG;AAC5B,gBAAgB;AAChB,oBAAoB,eAAe,EAAE,SAAS,CAAC,0BAA0B;AACzE,oBAAoB,sBAAsB,EAAE,sBAAsB,CAAC,kBAAkB;AACrF,iBAAiB;AACjB,gBAAgB;AAChB,oBAAoB,eAAe,EAAE,SAAS,CAAC,2BAA2B;AAC1E,oBAAoB,sBAAsB,EAAE,sBAAsB,CAAC,mBAAmB;AACtF,iBAAiB;AACjB,gBAAgB;AAChB,oBAAoB,eAAe,EAAE,SAAS,CAAC,6BAA6B;AAC5E,oBAAoB,sBAAsB,EAAE,sBAAsB,CAAC,qBAAqB;AACxF,iBAAiB;AACjB,gBAAgB;AAChB,oBAAoB,eAAe,EAAE,SAAS,CAAC,iCAAiC;AAChF,oBAAoB,sBAAsB,EAAE,sBAAsB,CAAC,yBAAyB;AAC5F,iBAAiB;AACjB,gBAAgB;AAChB,oBAAoB,eAAe,EAAE,SAAS,CAAC,6BAA6B;AAC5E,oBAAoB,sBAAsB,EAAE,sBAAsB,CAAC,qBAAqB;AACxF,iBAAiB;AACjB,aAAa;AACb;AACA,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACrD,gBAAgB,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC;AACjF,gBAAgB,IAAI,KAAK,KAAK,EAAE,EAAE;AAClC,oBAAoB,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,sBAAsB,EAAE,KAAK,CAAC;AACpG,oBAAoB,iBAAiB,CAAC,KAAK,CAAC,GAAG,IAAI;AACnD;AACA;AACA,YAAY,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;AACpG;AACA;AACA;AACA;AACA;AACA,IAAI,kBAAkB,GAAG;AACzB,QAAQ,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,IAAI,IAAI,CAAC,mBAAmB,EAAE;AACrF,YAAY,IAAI,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE;AACnD,gBAAgB,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,mBAAmB,CAAC;AACtE;AACA,iBAAiB;AACjB,gBAAgB,IAAI,CAAC,OAAO,CAAC,uBAAuB,EAAE;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,WAAW,CAAC,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE;AAC1C;AACA,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE;AAC3B,YAAY,IAAI,CAAC,OAAO,EAAE;AAC1B;AACA,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE;AAC5D,YAAY;AACZ;AACA,QAAQ,IAAI,IAAI,CAAC,eAAe,EAAE;AAClC,YAAY,IAAI,CAAC,eAAe,CAAC,UAAU,GAAG,EAAE;AAChD;AACA,QAAQ,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,cAAc,EAAE,MAAM,CAAC;AACjE;AACA,IAAI,aAAa,CAAC,mBAAmB,EAAE,SAAS,EAAE,KAAK,EAAE;AACzD,QAAQ,IAAI,mBAAmB,CAAC,mBAAmB,EAAE;AACrD,YAAY,mBAAmB,CAAC,mBAAmB,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,mBAAmB,CAAC,mBAAmB,CAAC,sBAAsB,CAAC;AAChK;AACA,aAAa,IAAI,IAAI,CAAC,+BAA+B,CAAC,MAAM,EAAE;AAC9D,YAAY,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,aAAa,EAAE;AAC1D;AACA,aAAa;AACb,YAAY,IAAI,CAAC,OAAO,CAAC,yBAAyB,EAAE;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,eAAe,CAAC,EAAE,EAAE;AACxB,QAAQ,MAAM,OAAO,GAAG,IAAI,CAAC,+BAA+B,CAAC,CAAC,CAAC;AAC/D,QAAQ,IAAI,CAAC,OAAO,EAAE;AACtB,YAAY,OAAO,KAAK;AACxB;AACA,QAAQ,OAAO,CAAC,YAAY,GAAG,EAAE,CAAC,YAAY;AAC9C,QAAQ,OAAO,IAAI;AACnB;AACA,IAAI,oBAAoB,CAAC,mBAAmB,EAAE,SAAS,EAAE;AACzD,QAAQ,MAAM,OAAO,GAAG,IAAI,CAAC,+BAA+B,CAAC,CAAC,CAAC;AAC/D,QAAQ,MAAM,aAAa,GAAG,OAAO,GAAG,OAAO,CAAC,YAAY,GAAG,mBAAmB,CAAC,mBAAmB,GAAG,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,GAAG,IAAI;AACpK;AACA,QAAQ,IAAI,gBAAgB,GAAG,IAAI,CAAC,cAAc,CAAC,+BAA+B;AAClF,QAAQ,IAAI,IAAI,CAAC,4BAA4B,EAAE;AAC/C,YAAY,gBAAgB,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,0BAA0B,CAAC,CAAC;AACxG;AACA;AACA,QAAQ,IAAI,gBAAgB,CAAC,MAAM,EAAE;AACrC,YAAY,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,OAAO,EAAE,gBAAgB,CAAC;AACrH,YAAY,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,YAAY,CAAC,gBAAgB,EAAE,aAAa,EAAE,KAAK,EAAE,SAAS,CAAC;AAC1G;AACA;AACA;AACA;AACA;AACA,IAAI,UAAU,CAAC,SAAS,EAAE,KAAK,EAAE;AACjC,QAAQ,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE;AAC1D,YAAY,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,cAAc,EAAE,SAAS,EAAE,KAAK,CAAC;AACrE,YAAY,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,cAAc,EAAE,SAAS,CAAC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,MAAM,GAAG;AACb,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE;AAC3B,YAAY,IAAI,CAAC,OAAO,EAAE;AAC1B;AACA,QAAQ,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE;AAC1D,YAAY,IAAI,CAAC,gBAAgB,EAAE;AACnC;AACA,YAAY,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,iBAAiB,CAAC;AAChE,YAAY,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC;AACpE,YAAY,IAAI,IAAI,CAAC,gCAAgC,EAAE;AACvD,gBAAgB,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,sBAAsB,CAAC;AACzE,gBAAgB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC;AAC7E;AACA;AACA,YAAY,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,mBAAmB,CAAC;AAClE;AACA;AACA;AACA,IAAI,gBAAgB,GAAG;AACvB,QAAQ,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE;AAC1D,YAAY,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE;AAC5C,YAAY,MAAM,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY;AACpE,YAAY,IAAI,eAAe,EAAE;AACjC,gBAAgB,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,eAAe,CAAC;AAC7D;AACA;AACA;AACA,IAAI,WAAW,CAAC,OAAO,EAAE;AACzB,QAAQ,IAAI,CAAC,QAAQ,GAAG,OAAO;AAC/B;AACA,IAAI,uBAAuB,CAAC,mBAAmB,EAAE,OAAO,EAAE;AAC1D,QAAQ,mBAAmB,CAAC,OAAO,GAAG,OAAO;AAC7C,QAAQ,IAAI,CAAC,OAAO,EAAE;AACtB,YAAY,IAAI,CAAC,sBAAsB,CAAC,mBAAmB,CAAC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,sBAAsB,CAAC,GAAG,EAAE;AAChC;AACA,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACpE,YAAY,IAAI,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,IAAI,EAAE;AACjE,gBAAgB,OAAO,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;AACpD;AACA;AACA,QAAQ,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,GAAG,CAAC;AAC5C,QAAQ,IAAI,GAAG,CAAC,UAAU,EAAE;AAC5B,YAAY,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC;AACrD;AACA,QAAQ,OAAO,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,sBAAsB,CAAC,IAAI,EAAE;AACjC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACpE,YAAY,IAAI,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,EAAE;AAC7D,gBAAgB,OAAO,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;AACpD;AACA;AACA,QAAQ,OAAO,IAAI;AACnB;AACA,IAAI,OAAO,GAAG;AACd,QAAQ,MAAM,gBAAgB,GAAG,IAAI,CAAC,QAAQ;AAC9C,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACpE,YAAY,IAAI,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE;AACvD,gBAAgB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC;AACpF;AACA;AACA,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC5D,YAAY,IAAI,IAAI,CAAC,QAAQ,KAAK,gBAAgB,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,QAAQ,EAAE;AACrG,gBAAgB,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;AACpK;AACA,YAAY,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,sBAAsB,EAAE;AAC1D,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACxE,gBAAgB,IAAI,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE;AAC3D;AACA;AACA;AACA,oBAAoB,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,WAAW,IAAI,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,iBAAiB,EAAE;AACvH,wBAAwB,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,iBAAiB,EAAE;AACzE;AACA,oBAAoB,IAAI,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE;AACnE,wBAAwB,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,+BAA+B,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC;AAC7H;AACA;AACA;AACA;AACA,QAAQ,IAAI,CAAC,wBAAwB,EAAE;AACvC,QAAQ,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;AAC9B,QAAQ,IAAI,CAAC,2BAA2B,EAAE;AAC1C;AACA,IAAI,QAAQ,GAAG;AACf,QAAQ,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;AAC/B,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC5D,YAAY,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;AACtE;AACA,QAAQ,IAAI,CAAC,YAAY,EAAE;AAC3B,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACpE,YAAY,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,KAAK;AACzD;AACA;AACA,IAAI,uBAAuB,CAAC,mBAAmB,EAAE,MAAM,EAAE;AACzD,QAAQ,IAAI,MAAM,EAAE;AACpB,YAAY,OAAO,MAAM,CAAC,cAAc;AACxC;AACA,aAAa,IAAI,mBAAmB,CAAC,mBAAmB,EAAE;AAC1D,YAAY,IAAI,mBAAmB,CAAC,mBAAmB,CAAC,sBAAsB,EAAE;AAChF,gBAAgB,MAAM,MAAM,GAAG,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,GAAG,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY;AACrK,gBAAgB,OAAO,MAAM,GAAG,MAAM,CAAC,cAAc,GAAG,EAAE;AAC1D;AACA,iBAAiB,IAAI,mBAAmB,CAAC,mBAAmB,CAAC,aAAa,EAAE;AAC5E,gBAAgB,OAAO,mBAAmB,CAAC,mBAAmB,CAAC,aAAa;AAC5E;AACA,iBAAiB;AACjB,gBAAgB,OAAO,EAAE;AACzB;AACA;AACA,aAAa;AACb,YAAY,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,cAAc,GAAG,EAAE;AAC1F;AACA;AACA,IAAI,uBAAuB,CAAC,mBAAmB,EAAE,MAAM,EAAE;AACzD;AACA,QAAQ,MAAM,eAAe,GAAG,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC;AAC5J,QAAQ,IAAI,CAAC,+BAA+B,GAAG,IAAI,CAAC,uBAAuB,CAAC,mBAAmB,EAAE,MAAM,CAAC;AACxG,QAAQ,IAAI,CAAC,+BAA+B,GAAG,IAAI,CAAC,+BAA+B,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK;AACnG,YAAY,OAAO,EAAE,IAAI,IAAI;AAC7B,SAAS,CAAC;AACV,QAAQ,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,IAAI;AACpC,QAAQ,MAAM,wBAAwB,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,+BAA+B,CAAC;AACvG,QAAQ,IAAI,CAAC,4BAA4B,GAAG,CAAC,wBAAwB,IAAI,CAAC,IAAI,CAAC,qBAAqB,IAAI,IAAI,CAAC,qBAAqB,EAAE,IAAI,CAAC,eAAe;AACxJ,QAAQ,MAAM,aAAa,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,+BAA+B,CAAC;AAC7F,QAAQ,MAAM,cAAc,GAAG,mBAAmB,CAAC,+BAA+B,IAAI,mBAAmB,CAAC,+BAA+B,CAAC,CAAC,CAAC;AAC5I,QAAQ,IAAI,OAAO,GAAG,IAAI;AAC1B;AACA,QAAQ,IAAI,CAAC,MAAM,CAAC,4BAA4B,CAAC,kBAAkB,GAAG,IAAI,CAAC,4BAA4B,IAAI,wBAAwB;AACnI;AACA,QAAQ,IAAI,IAAI,CAAC,4BAA4B,IAAI,CAAC,mBAAmB,CAAC,0BAA0B,EAAE;AAClG,YAAY,mBAAmB,CAAC,wBAAwB,EAAE;AAC1D;AACA;AACA,QAAQ,IAAI,cAAc,EAAE;AAC5B,YAAY,OAAO,GAAG,cAAc;AACpC;AACA,aAAa,IAAI,IAAI,CAAC,4BAA4B,EAAE;AACpD,YAAY,OAAO,GAAG,mBAAmB,CAAC,0BAA0B;AACpE;AACA,aAAa,IAAI,aAAa,EAAE;AAChC,YAAY,OAAO,GAAG,aAAa;AACnC;AACA,QAAQ,IAAI,CAAC,gBAAgB,EAAE;AAC/B,QAAQ,IAAI,CAAC,oBAAoB,CAAC,mBAAmB,EAAE,OAAO,CAAC;AAC/D;AACA,IAAI,oBAAoB,CAAC,mBAAmB,EAAE,WAAW,EAAE;AAC3D,QAAQ,IAAI,WAAW,EAAE;AACzB,YAAY,WAAW,CAAC,SAAS,GAAG,KAAK;AACzC,YAAY,WAAW,CAAC,YAAY,GAAG,mBAAmB,CAAC,YAAY;AACvE;AACA,QAAQ,IAAI,mBAAmB,CAAC,kBAAkB,KAAK,WAAW,EAAE;AACpE,YAAY,IAAI,mBAAmB,CAAC,kBAAkB,EAAE;AACxD,gBAAgB,IAAI,CAAC,sBAAsB,CAAC,mBAAmB,CAAC;AAChE;AACA,YAAY,mBAAmB,CAAC,kBAAkB,GAAG,WAAW;AAChE;AACA,QAAQ,IAAI,mBAAmB,CAAC,qBAAqB,EAAE;AACvD,YAAY,IAAI,CAAC,2BAA2B,EAAE;AAC9C,YAAY,mBAAmB,CAAC,qBAAqB,GAAG,KAAK;AAC7D;AACA;AACA;AACA;AACA;AACA,IAAI,sBAAsB,CAAC,mBAAmB,EAAE;AAChD,QAAQ,IAAI,mBAAmB,CAAC,kBAAkB,EAAE;AACpD,YAAY,mBAAmB,CAAC,kBAAkB,CAAC,SAAS,GAAG,IAAI;AACnE,YAAY,mBAAmB,CAAC,kBAAkB,CAAC,0BAA0B,EAAE;AAC/E,YAAY,mBAAmB,CAAC,kBAAkB,GAAG,IAAI;AACzD;AACA;AACA,IAAI,qBAAqB,GAAG;AAC5B,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACpE,YAAY,IAAI,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,oBAAoB,EAAE;AAC7G,gBAAgB,OAAO,IAAI;AAC3B;AACA;AACA,QAAQ,OAAO,KAAK;AACpB;AACA,IAAI,mBAAmB,CAAC,aAAa,EAAE;AACvC,QAAQ,IAAI,mBAAmB,GAAG,KAAK;AACvC,QAAQ,IAAI,aAAa,EAAE;AAC3B,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC3D,gBAAgB,IAAI,aAAa,CAAC,CAAC,CAAC,EAAE,YAAY,EAAE,KAAK,4BAA4B,EAAE;AACvF,oBAAoB,mBAAmB,GAAG,IAAI;AAC9C,oBAAoB;AACpB;AACA;AACA;AACA,QAAQ,OAAO,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,oBAAoB,CAAC,aAAa,EAAE;AACxC,QAAQ,KAAK,IAAI,OAAO,GAAG,CAAC,EAAE,OAAO,GAAG,aAAa,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE;AACzE,YAAY,IAAI,aAAa,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE;AACjD,gBAAgB,OAAO,aAAa,CAAC,OAAO,CAAC;AAC7C;AACA;AACA,QAAQ,OAAO,IAAI;AACnB;AACA;AACA;AACA;AACA,IAAI,WAAW,GAAG;AAClB,QAAQ,IAAI,CAAC,QAAQ,GAAG,IAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,IAAI,eAAe,CAAC,KAAK,EAAE;AAC3B;AACA,QAAQ,IAAI,CAAC,MAAM,CAAC,0BAA0B,GAAG,KAAK;AACtD,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC/C,YAAY,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC;AACjC,YAAY,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE;AACnD,gBAAgB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM;AACnE,gBAAgB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC;AAC1C,gBAAgB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;AAC9E,gBAAgB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;AAClF,gBAAgB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;AAC9E,gBAAgB,IAAI,CAAC,QAAQ,EAAE;AAC/B;AACA,YAAY,IAAI,IAAI,KAAK,SAAS,CAAC,6BAA6B,IAAI,IAAI,KAAK,SAAS,CAAC,oCAAoC,EAAE;AAC7H,gBAAgB,IAAI,CAAC,MAAM,CAAC,0BAA0B,GAAG,IAAI;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,MAAM,GAAG;AACb,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE;AAC3B,YAAY,IAAI,CAAC,OAAO,EAAE;AAC1B;AACA;AACA,IAAI,OAAO,GAAG;AACd,QAAQ,IAAI,CAAC,QAAQ,EAAE;AACvB,QAAQ,IAAI,aAAa,GAAG,KAAK;AACjC,QAAQ,IAAI,CAAC,MAAM,CAAC,4BAA4B,CAAC,kBAAkB,GAAG,KAAK;AAC3E,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,qBAAqB,IAAI,IAAI,CAAC,MAAM,CAAC,+BAA+B,EAAE;AAC9F,YAAY,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,IAAI,CAAC;AACtE,YAAY,aAAa,GAAG,IAAI;AAChC;AACA,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC/D,YAAY,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE;AACnE,gBAAgB,aAAa,GAAG,IAAI;AACpC;AACA;AACA,QAAQ,IAAI,aAAa,EAAE;AAC3B,YAAY,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC;AAC9D;AACA,QAAQ,IAAI,aAAa;AACzB,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC5D,YAAY,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE;AAC3D,gBAAgB,aAAa,GAAG,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;AACnF;AACA,iBAAiB;AACjB,gBAAgB,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY;AACvD,gBAAgB,IAAI,CAAC,MAAM,EAAE;AAC7B,oBAAoB;AACpB;AACA,gBAAgB,aAAa,GAAG,MAAM,CAAC,cAAc;AACrD;AACA,YAAY,IAAI,CAAC,aAAa,EAAE;AAChC,gBAAgB;AAChB;AACA,YAAY,aAAa,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK;AACzD,gBAAgB,OAAO,EAAE,IAAI,IAAI;AACjC,aAAa,CAAC;AACd,YAAY,IAAI,aAAa,EAAE;AAC/B,gBAAgB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC/D,oBAAoB,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE;AACnE,wBAAwB,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;AACjF,wBAAwB,aAAa,GAAG,IAAI;AAC5C;AACA;AACA,gBAAgB,IAAI,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,EAAE;AAC7D,oBAAoB,IAAI,CAAC,MAAM,CAAC,4BAA4B,CAAC,kBAAkB,GAAG,IAAI;AACtF;AACA;AACA;AACA,QAAQ,IAAI,CAAC,+BAA+B,EAAE;AAC9C,QAAQ,IAAI,CAAC,QAAQ,GAAG,KAAK;AAC7B,QAAQ,IAAI,aAAa,EAAE;AAC3B,YAAY,IAAI,CAAC,OAAO,EAAE;AAC1B;AACA;AACA,IAAI,+BAA+B,GAAG;AACtC,QAAQ,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS;AAC/C,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACnD,YAAY,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,gBAAgB,CAAC;AAC/D;AACA;AACA;AACA;AACA;AACA,IAAI,OAAO,GAAG;AACd,QAAQ,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;AACjE,YAAY,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE;AAC3C;AACA,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACpE,YAAY,IAAI,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE;AACvD,gBAAgB,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,CAAC,6BAA6B,GAAG,CAAC,CAAC,KAAK;AACvD,IAAI,MAAM,WAAW,CAAC,+BAA+B,CAAC;AACtD,CAAC;AACD;AACA;AACA;AACA,eAAe,CAAC,cAAc,GAAG;AACjC,IAAI;AACJ,QAAQ,OAAO,EAAE,SAAS,CAAC,+BAA+B;AAC1D,QAAQ,IAAI,EAAE,SAAS,CAAC,sBAAsB;AAC9C,QAAQ,MAAM,EAAE,SAAS,CAAC,kBAAkB;AAC5C,QAAQ,IAAI,EAAE,oBAAoB;AAClC,KAAK;AACL,IAAI;AACJ,QAAQ,OAAO,EAAE,SAAS,CAAC,6BAA6B;AACxD,QAAQ,IAAI,EAAE,SAAS,CAAC,sBAAsB;AAC9C,QAAQ,MAAM,EAAE,SAAS,CAAC,kBAAkB;AAC5C,QAAQ,IAAI,EAAE,kBAAkB;AAChC,KAAK;AACL,IAAI;AACJ,QAAQ,OAAO,EAAE,SAAS,CAAC,6BAA6B;AACxD,QAAQ,IAAI,EAAE,SAAS,CAAC,yBAAyB;AACjD,QAAQ,MAAM,EAAE,SAAS,CAAC,kBAAkB;AAC5C,QAAQ,IAAI,EAAE,kBAAkB;AAChC,KAAK;AACL,IAAI;AACJ,QAAQ,OAAO,EAAE,SAAS,CAAC,iCAAiC;AAC5D,QAAQ,IAAI,EAAE,SAAS,CAAC,yBAAyB;AACjD,QAAQ,MAAM,EAAE,SAAS,CAAC,kBAAkB;AAC5C,QAAQ,IAAI,EAAE,sBAAsB;AACpC,KAAK;AACL,IAAI;AACJ,QAAQ,OAAO,EAAE,SAAS,CAAC,0BAA0B;AACrD,QAAQ,IAAI,EAAE,SAAS,CAAC,sBAAsB;AAC9C,QAAQ,MAAM,EAAE,SAAS,CAAC,kBAAkB;AAC5C,QAAQ,IAAI,EAAE,eAAe;AAC7B,KAAK;AACL,IAAI;AACJ,QAAQ,OAAO,EAAE,SAAS,CAAC,0BAA0B;AACrD,QAAQ,IAAI,EAAE,SAAS,CAAC,iBAAiB;AACzC,QAAQ,MAAM,EAAE,SAAS,CAAC,eAAe;AACzC,QAAQ,IAAI,EAAE,eAAe;AAC7B,KAAK;AACL,IAAI;AACJ,QAAQ,OAAO,EAAE,SAAS,CAAC,2BAA2B;AACtD,QAAQ,IAAI,EAAE,SAAS,CAAC,sBAAsB;AAC9C,QAAQ,MAAM,EAAE,SAAS,CAAC,kBAAkB;AAC5C,QAAQ,IAAI,EAAE,gBAAgB;AAC9B,KAAK;AACL,IAAI;AACJ,QAAQ,OAAO,EAAE,SAAS,CAAC,gCAAgC;AAC3D,QAAQ,IAAI,EAAE,SAAS,CAAC,yBAAyB;AACjD,QAAQ,MAAM,EAAE,SAAS,CAAC,kBAAkB;AAC5C,QAAQ,IAAI,EAAE,gBAAgB;AAC9B,KAAK;AACL,IAAI;AACJ,QAAQ,OAAO,EAAE,SAAS,CAAC,iCAAiC;AAC5D,QAAQ,IAAI,EAAE,SAAS,CAAC,yBAAyB;AACjD,QAAQ,MAAM,EAAE,SAAS,CAAC,kBAAkB;AAC5C,QAAQ,IAAI,EAAE,qBAAqB;AACnC,KAAK;AACL,IAAI;AACJ,QAAQ,OAAO,EAAE,SAAS,CAAC,mCAAmC;AAC9D,QAAQ,IAAI,EAAE,SAAS,CAAC,sBAAsB;AAC9C,QAAQ,MAAM,EAAE,SAAS,CAAC,kBAAkB;AAC5C,QAAQ,IAAI,EAAE,uBAAuB;AACrC,KAAK;AACL,IAAI;AACJ,QAAQ,OAAO,EAAE,SAAS,CAAC,sCAAsC;AACjE,QAAQ,IAAI,EAAE,SAAS,CAAC,iBAAiB;AACzC,QAAQ,MAAM,EAAE,SAAS,CAAC,eAAe;AACzC,QAAQ,IAAI,EAAE,qBAAqB;AACnC,KAAK;AACL,IAAI;AACJ,QAAQ,OAAO,EAAE,SAAS,CAAC,oCAAoC;AAC/D,QAAQ,IAAI,EAAE,SAAS,CAAC,sBAAsB;AAC9C,QAAQ,MAAM,EAAE,SAAS,CAAC,kBAAkB;AAC5C,QAAQ,IAAI,EAAE,wBAAwB;AACtC,KAAK;AACL,CAAC;;ACtyBD,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,SAAS,EAAE,iBAAiB,EAAE;AAC1D,IAAI,GAAG,EAAE,YAAY;AACrB,QAAQ,OAAO,IAAI,CAAC,gBAAgB;AACpC,KAAK;AACL,IAAI,GAAG,EAAE,UAAU,KAAK,EAAE;AAC1B,QAAQ,IAAI,KAAK,IAAI,KAAK,CAAC,WAAW,EAAE;AACxC,YAAY,IAAI,CAAC,gBAAgB,GAAG,KAAK;AACzC;AACA,KAAK;AACL,IAAI,UAAU,EAAE,IAAI;AACpB,IAAI,YAAY,EAAE,IAAI;AACtB,CAAC,CAAC;AACF,KAAK,CAAC,SAAS,CAAC,qBAAqB,GAAG,YAAY;AACpD,IAAI,IAAI,IAAI,CAAC,gBAAgB,EAAE;AAC/B,QAAQ,OAAO,IAAI,CAAC,gBAAgB;AACpC;AACA,IAAI,IAAI,CAAC,gBAAgB,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC;AACrD,IAAI,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE;AAC5C,QAAQ,IAAI,CAAC,gBAAgB,GAAG,IAAI;AACpC,QAAQ,MAAM,CAAC,KAAK,CAAC,0CAA0C,GAAG,iFAAiF,GAAG,0BAA0B,CAAC;AACjL;AACA,IAAI,OAAO,IAAI,CAAC,gBAAgB;AAChC,CAAC;AACD,KAAK,CAAC,SAAS,CAAC,sBAAsB,GAAG,YAAY;AACrD,IAAI,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;AAChC,QAAQ;AACR;AACA,IAAI,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE;AACnC,IAAI,IAAI,CAAC,gBAAgB,GAAG,IAAI;AAChC,CAAC;AACD;AACA;AACA;AACA;AACO,MAAM,6BAA6B,CAAC;AAC3C;AACA;AACA;AACA;AACA,IAAI,WAAW,CAAC,KAAK,EAAE;AACvB;AACA;AACA;AACA,QAAQ,IAAI,CAAC,IAAI,GAAG,uBAAuB,CAAC,oBAAoB;AAChE,QAAQ,IAAI,CAAC,KAAK,GAAG,KAAK;AAC1B;AACA;AACA;AACA;AACA,IAAI,QAAQ,GAAG;AACf,QAAQ,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC,YAAY,CAAC,uBAAuB,CAAC,6BAA6B,EAAE,IAAI,EAAE,IAAI,CAAC,iBAAiB,CAAC;AAC3I,QAAQ,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,YAAY,CAAC,uBAAuB,CAAC,4BAA4B,EAAE,IAAI,EAAE,IAAI,CAAC,gBAAgB,CAAC;AACxI,QAAQ,IAAI,CAAC,KAAK,CAAC,4BAA4B,CAAC,YAAY,CAAC,uBAAuB,CAAC,mCAAmC,EAAE,IAAI,EAAE,IAAI,CAAC,uBAAuB,CAAC;AAC7J,QAAQ,IAAI,CAAC,KAAK,CAAC,2BAA2B,CAAC,YAAY,CAAC,uBAAuB,CAAC,4BAA4B,EAAE,IAAI,EAAE,IAAI,CAAC,sBAAsB,CAAC;AACpJ,QAAQ,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,YAAY,CAAC,uBAAuB,CAAC,wBAAwB,EAAE,IAAI,EAAE,IAAI,CAAC,iBAAiB,CAAC;AACjI,QAAQ,IAAI,CAAC,KAAK,CAAC,6BAA6B,CAAC,YAAY,CAAC,uBAAuB,CAAC,oCAAoC,EAAE,IAAI,EAAE,IAAI,CAAC,6BAA6B,CAAC;AACrK,QAAQ,IAAI,CAAC,KAAK,CAAC,yBAAyB,CAAC,YAAY,CAAC,uBAAuB,CAAC,gCAAgC,EAAE,IAAI,EAAE,IAAI,CAAC,yBAAyB,CAAC;AACzJ,QAAQ,IAAI,CAAC,KAAK,CAAC,wBAAwB,CAAC,YAAY,CAAC,uBAAuB,CAAC,+BAA+B,EAAE,IAAI,EAAE,IAAI,CAAC,wBAAwB,CAAC;AACtJ;AACA,IAAI,uBAAuB,CAAC,YAAY,EAAE,SAAS,EAAE,KAAK,EAAE;AAC5D,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE;AAC3E,YAAY,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,gBAAgB,CAAC,YAAY,CAAC,oBAAoB,CAAC;AAC1F,YAAY,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,WAAW,CAAC,SAAS,EAAE,SAAS,EAAE,KAAK,CAAC;AAC/E;AACA;AACA,IAAI,sBAAsB,CAAC,YAAY,EAAE,SAAS,EAAE,KAAK,EAAE;AAC3D,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE;AAC3E,YAAY,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,EAAE,KAAK,CAAC;AACnE;AACA;AACA,IAAI,6BAA6B,CAAC,YAAY,EAAE;AAChD,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE;AAC3E,YAAY,IAAI,CAAC,YAAY,CAAC,oBAAoB,EAAE;AACpD,gBAAgB,YAAY,CAAC,oBAAoB,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,mBAAmB,CAAC,YAAY,CAAC,IAAI,GAAG,aAAa,EAAE,YAAY,CAAC;AACnJ;AACA,YAAY,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,gBAAgB,CAAC,YAAY,CAAC,oBAAoB,CAAC;AAC1F,YAAY,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,MAAM,EAAE;AAC/C;AACA;AACA,IAAI,iBAAiB,CAAC,MAAM,EAAE;AAC9B,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE;AACxC,YAAY,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,gBAAgB,CAAC,IAAI,CAAC;AAC7D,YAAY,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,WAAW,CAAC,MAAM,CAAC;AAC1D;AACA;AACA,IAAI,gBAAgB,GAAG;AACvB,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE;AACxC,YAAY,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,UAAU,EAAE;AACnD;AACA;AACA,IAAI,iBAAiB,GAAG;AACxB,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE;AACxC,YAAY,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,gBAAgB,CAAC,IAAI,CAAC;AAC7D,YAAY,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,MAAM,EAAE;AAC/C;AACA;AACA,IAAI,yBAAyB,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE;AAC5D,QAAQ,IAAI,CAAC,MAAM,EAAE;AACrB,YAAY;AACZ;AACA;AACA,QAAQ,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE;AACrC,QAAQ,IAAI,KAAK,CAAC,eAAe,EAAE;AACnC,YAAY,KAAK,CAAC,eAAe,CAAC,wBAAwB,CAAC,MAAM,EAAE,OAAO,CAAC;AAC3E;AACA;AACA,IAAI,wBAAwB,CAAC,IAAI,EAAE;AACnC,QAAQ,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE;AACrC,QAAQ,IAAI,KAAK,CAAC,eAAe,EAAE;AACnC,YAAY,KAAK,CAAC,eAAe,CAAC,kBAAkB,EAAE;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,OAAO,GAAG;AACd;AACA;AACA;AACA;AACA;AACA,IAAI,OAAO,GAAG;AACd,QAAQ,IAAI,CAAC,KAAK,CAAC,sBAAsB,EAAE;AAC3C;AACA;AACA,eAAe,CAAC,6BAA6B,GAAG,CAAC,KAAK,KAAK;AAC3D;AACA,IAAI,IAAI,SAAS,GAAG,KAAK,CAAC,aAAa,CAAC,uBAAuB,CAAC,oBAAoB,CAAC;AACrF,IAAI,IAAI,CAAC,SAAS,EAAE;AACpB,QAAQ,SAAS,GAAG,IAAI,6BAA6B,CAAC,KAAK,CAAC;AAC5D,QAAQ,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC;AACtC;AACA,CAAC;;;;"}