{"version":3,"file":"KHR_materials_transmission-DK1j6hKV.esm.min.js","sources":["../../../../../dev/loaders/dist/glTF/2.0/Extensions/KHR_materials_transmission.js"],"sourcesContent":["import { GLTFLoader } from \"../glTFLoader\";\nimport { RenderTargetTexture } from \"core/Materials/Textures/renderTargetTexture\";\nimport { Observable } from \"core/Misc/observable\";\nimport { Constants } from \"core/Engines/constants\";\nimport { Tools } from \"core/Misc/tools\";\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\n/**\n * A class to handle setting up the rendering of opaque objects to be shown through transmissive objects.\n */\nclass TransmissionHelper {\n    /**\n     * Creates the default options for the helper.\n     * @returns the default options\n     */\n    static _GetDefaultOptions() {\n        return {\n            renderSize: 1024,\n            samples: 4,\n            lodGenerationScale: 1,\n            lodGenerationOffset: -4,\n            renderTargetTextureType: Constants.TEXTURETYPE_HALF_FLOAT,\n            generateMipmaps: true,\n        };\n    }\n    /**\n     * constructor\n     * @param options Defines the options we want to customize the helper\n     * @param scene The scene to add the material to\n     */\n    constructor(options, scene) {\n        this._opaqueRenderTarget = null;\n        this._opaqueMeshesCache = [];\n        this._transparentMeshesCache = [];\n        this._materialObservers = {};\n        this._options = {\n            ...TransmissionHelper._GetDefaultOptions(),\n            ...options,\n        };\n        this._scene = scene;\n        this._scene._transmissionHelper = this;\n        this.onErrorObservable = new Observable();\n        this._scene.onDisposeObservable.addOnce(() => {\n            this.dispose();\n        });\n        this._parseScene();\n        this._setupRenderTargets();\n    }\n    /**\n     * Updates the background according to the new options\n     * @param options\n     */\n    updateOptions(options) {\n        // First check if any options are actually being changed. If not, exit.\n        const newValues = Object.keys(options).filter((key) => this._options[key] !== options[key]);\n        if (!newValues.length) {\n            return;\n        }\n        const newOptions = {\n            ...this._options,\n            ...options,\n        };\n        const oldOptions = this._options;\n        this._options = newOptions;\n        // If size changes, recreate everything\n        if (newOptions.renderSize !== oldOptions.renderSize ||\n            newOptions.renderTargetTextureType !== oldOptions.renderTargetTextureType ||\n            newOptions.generateMipmaps !== oldOptions.generateMipmaps ||\n            !this._opaqueRenderTarget) {\n            this._setupRenderTargets();\n        }\n        else {\n            this._opaqueRenderTarget.samples = newOptions.samples;\n            this._opaqueRenderTarget.lodGenerationScale = newOptions.lodGenerationScale;\n            this._opaqueRenderTarget.lodGenerationOffset = newOptions.lodGenerationOffset;\n        }\n    }\n    /**\n     * @returns the opaque render target texture or null if not available.\n     */\n    getOpaqueTarget() {\n        return this._opaqueRenderTarget;\n    }\n    _shouldRenderAsTransmission(material) {\n        return material?.subSurface?.isRefractionEnabled ? true : false;\n    }\n    _addMesh(mesh) {\n        this._materialObservers[mesh.uniqueId] = mesh.onMaterialChangedObservable.add(this._onMeshMaterialChanged.bind(this));\n        // we need to defer the processing because _addMesh may be called as part as an instance mesh creation, in which case some\n        // internal properties are not setup yet, like _sourceMesh (needed when doing mesh.material below)\n        Tools.SetImmediate(() => {\n            if (this._shouldRenderAsTransmission(mesh.material)) {\n                mesh.material.refractionTexture = this._opaqueRenderTarget;\n                if (this._transparentMeshesCache.indexOf(mesh) === -1) {\n                    this._transparentMeshesCache.push(mesh);\n                }\n            }\n            else {\n                if (this._opaqueMeshesCache.indexOf(mesh) === -1) {\n                    this._opaqueMeshesCache.push(mesh);\n                }\n            }\n        });\n    }\n    _removeMesh(mesh) {\n        mesh.onMaterialChangedObservable.remove(this._materialObservers[mesh.uniqueId]);\n        delete this._materialObservers[mesh.uniqueId];\n        let idx = this._transparentMeshesCache.indexOf(mesh);\n        if (idx !== -1) {\n            this._transparentMeshesCache.splice(idx, 1);\n        }\n        idx = this._opaqueMeshesCache.indexOf(mesh);\n        if (idx !== -1) {\n            this._opaqueMeshesCache.splice(idx, 1);\n        }\n    }\n    _parseScene() {\n        this._scene.meshes.forEach(this._addMesh.bind(this));\n        // Listen for when a mesh is added to the scene and add it to our cache lists.\n        this._scene.onNewMeshAddedObservable.add(this._addMesh.bind(this));\n        // Listen for when a mesh is removed from to the scene and remove it from our cache lists.\n        this._scene.onMeshRemovedObservable.add(this._removeMesh.bind(this));\n    }\n    // When one of the meshes in the scene has its material changed, make sure that it's in the correct cache list.\n    _onMeshMaterialChanged(mesh) {\n        const transparentIdx = this._transparentMeshesCache.indexOf(mesh);\n        const opaqueIdx = this._opaqueMeshesCache.indexOf(mesh);\n        // If the material is transparent, make sure that it's added to the transparent list and removed from the opaque list\n        const useTransmission = this._shouldRenderAsTransmission(mesh.material);\n        if (useTransmission) {\n            if (mesh.material) {\n                const subSurface = mesh.material.subSurface;\n                if (subSurface) {\n                    subSurface.refractionTexture = this._opaqueRenderTarget;\n                }\n            }\n            if (opaqueIdx !== -1) {\n                this._opaqueMeshesCache.splice(opaqueIdx, 1);\n                this._transparentMeshesCache.push(mesh);\n            }\n            else if (transparentIdx === -1) {\n                this._transparentMeshesCache.push(mesh);\n            }\n            // If the material is opaque, make sure that it's added to the opaque list and removed from the transparent list\n        }\n        else {\n            if (transparentIdx !== -1) {\n                this._transparentMeshesCache.splice(transparentIdx, 1);\n                this._opaqueMeshesCache.push(mesh);\n            }\n            else if (opaqueIdx === -1) {\n                this._opaqueMeshesCache.push(mesh);\n            }\n        }\n    }\n    /**\n     * @internal\n     * Check if the opaque render target has not been disposed and can still be used.\n     * @returns\n     */\n    _isRenderTargetValid() {\n        return this._opaqueRenderTarget?.getInternalTexture() !== null;\n    }\n    /**\n     * @internal\n     * Setup the render targets according to the specified options.\n     */\n    _setupRenderTargets() {\n        if (this._opaqueRenderTarget) {\n            this._opaqueRenderTarget.dispose();\n        }\n        this._opaqueRenderTarget = new RenderTargetTexture(\"opaqueSceneTexture\", this._options.renderSize, this._scene, this._options.generateMipmaps, undefined, this._options.renderTargetTextureType);\n        this._opaqueRenderTarget.ignoreCameraViewport = true;\n        this._opaqueRenderTarget.renderList = this._opaqueMeshesCache;\n        this._opaqueRenderTarget.clearColor = this._options.clearColor?.clone() ?? this._scene.clearColor.clone();\n        this._opaqueRenderTarget.gammaSpace = false;\n        this._opaqueRenderTarget.lodGenerationScale = this._options.lodGenerationScale;\n        this._opaqueRenderTarget.lodGenerationOffset = this._options.lodGenerationOffset;\n        this._opaqueRenderTarget.samples = this._options.samples;\n        this._opaqueRenderTarget.renderSprites = true;\n        this._opaqueRenderTarget.renderParticles = true;\n        this._opaqueRenderTarget.disableImageProcessing = true;\n        let saveSceneEnvIntensity;\n        this._opaqueRenderTarget.onBeforeBindObservable.add((opaqueRenderTarget) => {\n            saveSceneEnvIntensity = this._scene.environmentIntensity;\n            this._scene.environmentIntensity = 1.0;\n            if (!this._options.clearColor) {\n                this._scene.clearColor.toLinearSpaceToRef(opaqueRenderTarget.clearColor, this._scene.getEngine().useExactSrgbConversions);\n            }\n            else {\n                opaqueRenderTarget.clearColor.copyFrom(this._options.clearColor);\n            }\n        });\n        this._opaqueRenderTarget.onAfterUnbindObservable.add(() => {\n            this._scene.environmentIntensity = saveSceneEnvIntensity;\n        });\n        for (const mesh of this._transparentMeshesCache) {\n            if (this._shouldRenderAsTransmission(mesh.material)) {\n                mesh.material.refractionTexture = this._opaqueRenderTarget;\n            }\n        }\n    }\n    /**\n     * Dispose all the elements created by the Helper.\n     */\n    dispose() {\n        this._scene._transmissionHelper = undefined;\n        if (this._opaqueRenderTarget) {\n            this._opaqueRenderTarget.dispose();\n            this._opaqueRenderTarget = null;\n        }\n        this._transparentMeshesCache = [];\n        this._opaqueMeshesCache = [];\n    }\n}\nconst NAME = \"KHR_materials_transmission\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_transmission/README.md)\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_materials_transmission {\n    /**\n     * @internal\n     */\n    constructor(loader) {\n        /**\n         * The name of this extension.\n         */\n        this.name = NAME;\n        /**\n         * Defines a number that determines the order the extensions are applied.\n         */\n        this.order = 175;\n        this._loader = loader;\n        this.enabled = this._loader.isExtensionUsed(NAME);\n        if (this.enabled) {\n            loader.parent.transparencyAsCoverage = true;\n        }\n    }\n    /** @internal */\n    dispose() {\n        this._loader = null;\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line no-restricted-syntax\n    loadMaterialPropertiesAsync(context, material, babylonMaterial) {\n        return GLTFLoader.LoadExtensionAsync(context, material, this.name, async (extensionContext, extension) => {\n            const promises = new Array();\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n            promises.push(this._loadTransparentPropertiesAsync(extensionContext, material, babylonMaterial, extension));\n            // eslint-disable-next-line github/no-then\n            return await Promise.all(promises).then(() => { });\n        });\n    }\n    // eslint-disable-next-line no-restricted-syntax, @typescript-eslint/promise-function-async\n    _loadTransparentPropertiesAsync(context, material, babylonMaterial, extension) {\n        const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\n        const transmissionWeight = extension.transmissionFactor !== undefined ? extension.transmissionFactor : 0.0;\n        if (transmissionWeight === 0) {\n            return Promise.resolve();\n        }\n        // Set transmission properties immediately via adapter\n        adapter.configureTransmission();\n        adapter.transmissionWeight = transmissionWeight;\n        // Handle transmission helper setup (only needed for PBR materials)\n        if (transmissionWeight > 0) {\n            const scene = babylonMaterial.getScene();\n            if (!scene._transmissionHelper) {\n                new TransmissionHelper({}, babylonMaterial.getScene());\n            }\n            else if (!scene._transmissionHelper?._isRenderTargetValid()) {\n                // If the render target is not valid, recreate it.\n                scene._transmissionHelper?._setupRenderTargets();\n            }\n        }\n        // Load texture if present\n        let texturePromise = Promise.resolve(null);\n        if (extension.transmissionTexture) {\n            extension.transmissionTexture.nonColorData = true;\n            texturePromise = this._loader.loadTextureInfoAsync(`${context}/transmissionTexture`, extension.transmissionTexture, (texture) => {\n                texture.name = `${babylonMaterial.name} (Transmission)`;\n                adapter.transmissionWeightTexture = texture;\n            });\n        }\n        // eslint-disable-next-line github/no-then\n        return texturePromise.then(() => { });\n    }\n}\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_transmission(loader));\n//# sourceMappingURL=KHR_materials_transmission.js.map"],"names":["TransmissionHelper","_GetDefaultOptions","renderSize","samples","lodGenerationScale","lodGenerationOffset","renderTargetTextureType","Constants","TEXTURETYPE_HALF_FLOAT","generateMipmaps","constructor","options","scene","this","_opaqueRenderTarget","_opaqueMeshesCache","_transparentMeshesCache","_materialObservers","_options","_scene","_transmissionHelper","onErrorObservable","Observable","onDisposeObservable","addOnce","dispose","_parseScene","_setupRenderTargets","updateOptions","Object","keys","filter","key","length","newOptions","oldOptions","getOpaqueTarget","_shouldRenderAsTransmission","material","subSurface","isRefractionEnabled","_addMesh","mesh","uniqueId","onMaterialChangedObservable","add","_onMeshMaterialChanged","bind","Tools","SetImmediate","refractionTexture","indexOf","push","_removeMesh","remove","idx","splice","meshes","forEach","onNewMeshAddedObservable","onMeshRemovedObservable","transparentIdx","opaqueIdx","_isRenderTargetValid","getInternalTexture","saveSceneEnvIntensity","RenderTargetTexture","undefined","ignoreCameraViewport","renderList","clearColor","clone","gammaSpace","renderSprites","renderParticles","disableImageProcessing","onBeforeBindObservable","opaqueRenderTarget","environmentIntensity","copyFrom","toLinearSpaceToRef","getEngine","useExactSrgbConversions","onAfterUnbindObservable","NAME","KHR_materials_transmission","loader","name","order","_loader","enabled","isExtensionUsed","parent","transparencyAsCoverage","loadMaterialPropertiesAsync","context","babylonMaterial","GLTFLoader","LoadExtensionAsync","async","extensionContext","extension","promises","Array","_loadTransparentPropertiesAsync","Promise","all","then","adapter","_getOrCreateMaterialAdapter","transmissionWeight","transmissionFactor","resolve","configureTransmission","getScene","texturePromise","transmissionTexture","nonColorData","loadTextureInfoAsync","texture","transmissionWeightTexture","unregisterGLTFExtension","registerGLTFExtension"],"mappings":"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"}