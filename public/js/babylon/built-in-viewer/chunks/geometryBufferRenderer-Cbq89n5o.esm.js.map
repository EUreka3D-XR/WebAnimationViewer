{"version":3,"file":"geometryBufferRenderer-Cbq89n5o.esm.js","sources":["../../../../../dev/core/dist/Materials/Textures/multiRenderTarget.js","../../../../../dev/core/dist/Shaders/ShadersInclude/mrtFragmentDeclaration.js","../../../../../dev/core/dist/Shaders/geometry.fragment.js","../../../../../dev/core/dist/Shaders/ShadersInclude/geometryVertexDeclaration.js","../../../../../dev/core/dist/Shaders/ShadersInclude/geometryUboDeclaration.js","../../../../../dev/core/dist/Shaders/geometry.vertex.js","../../../../../dev/core/dist/Rendering/geometryBufferRenderer.js"],"sourcesContent":["import { Texture } from \"../../Materials/Textures/texture\";\nimport { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture\";\nimport { Constants } from \"../../Engines/constants\";\nimport \"../../Engines/Extensions/engine.multiRender\";\n/**\n * A multi render target, like a render target provides the ability to render to a texture.\n * Unlike the render target, it can render to several draw buffers (render textures) in one draw.\n * This is specially interesting in deferred rendering or for any effects requiring more than\n * just one color from a single pass.\n */\nexport class MultiRenderTarget extends RenderTargetTexture {\n    /**\n     * Get if draw buffers (render textures) are currently supported by the used hardware and browser.\n     */\n    get isSupported() {\n        return this._engine?.getCaps().drawBuffersExtension ?? false;\n    }\n    /**\n     * Get the list of textures generated by the multi render target.\n     */\n    get textures() {\n        return this._textures;\n    }\n    /**\n     * Gets the number of textures in this MRT. This number can be different from `_textures.length` in case a depth texture is generated.\n     */\n    get count() {\n        return this._count;\n    }\n    /**\n     * Get the depth texture generated by the multi render target if options.generateDepthTexture has been set\n     */\n    get depthTexture() {\n        return this._textures[this._textures.length - 1];\n    }\n    /**\n     * Set the wrapping mode on U of all the textures we are rendering to.\n     * Can be any of the Texture. (CLAMP_ADDRESSMODE, MIRROR_ADDRESSMODE or WRAP_ADDRESSMODE)\n     */\n    set wrapU(wrap) {\n        if (this._textures) {\n            for (let i = 0; i < this._textures.length; i++) {\n                this._textures[i].wrapU = wrap;\n            }\n        }\n    }\n    /**\n     * Set the wrapping mode on V of all the textures we are rendering to.\n     * Can be any of the Texture. (CLAMP_ADDRESSMODE, MIRROR_ADDRESSMODE or WRAP_ADDRESSMODE)\n     */\n    set wrapV(wrap) {\n        if (this._textures) {\n            for (let i = 0; i < this._textures.length; i++) {\n                this._textures[i].wrapV = wrap;\n            }\n        }\n    }\n    /**\n     * Instantiate a new multi render target texture.\n     * A multi render target, like a render target provides the ability to render to a texture.\n     * Unlike the render target, it can render to several draw buffers (render textures) in one draw.\n     * This is specially interesting in deferred rendering or for any effects requiring more than\n     * just one color from a single pass.\n     * @param name Define the name of the texture\n     * @param size Define the size of the buffers to render to\n     * @param count Define the number of target we are rendering into\n     * @param scene Define the scene the texture belongs to\n     * @param options Define the options used to create the multi render target\n     * @param textureNames Define the names to set to the textures (if count \\> 0 - optional)\n     */\n    constructor(name, size, count, scene, options, textureNames) {\n        const generateMipMaps = options && options.generateMipMaps ? options.generateMipMaps : false;\n        const generateDepthTexture = options && options.generateDepthTexture ? options.generateDepthTexture : false;\n        const depthTextureFormat = options && options.depthTextureFormat ? options.depthTextureFormat : Constants.TEXTUREFORMAT_DEPTH16;\n        const doNotChangeAspectRatio = !options || options.doNotChangeAspectRatio === undefined ? true : options.doNotChangeAspectRatio;\n        const drawOnlyOnFirstAttachmentByDefault = options && options.drawOnlyOnFirstAttachmentByDefault ? options.drawOnlyOnFirstAttachmentByDefault : false;\n        super(name, size, scene, generateMipMaps, doNotChangeAspectRatio, undefined, undefined, undefined, undefined, undefined, undefined, undefined, true);\n        if (!this.isSupported) {\n            this.dispose();\n            return;\n        }\n        this._textureNames = textureNames;\n        const types = [];\n        const samplingModes = [];\n        const useSRGBBuffers = [];\n        const formats = [];\n        const targetTypes = [];\n        const faceIndex = [];\n        const layerIndex = [];\n        const layerCounts = [];\n        this._initTypes(count, types, samplingModes, useSRGBBuffers, formats, targetTypes, faceIndex, layerIndex, layerCounts, options);\n        const generateDepthBuffer = !options || options.generateDepthBuffer === undefined ? true : options.generateDepthBuffer;\n        const generateStencilBuffer = !options || options.generateStencilBuffer === undefined ? false : options.generateStencilBuffer;\n        const samples = options && options.samples ? options.samples : 1;\n        this._multiRenderTargetOptions = {\n            samplingModes: samplingModes,\n            generateMipMaps: generateMipMaps,\n            generateDepthBuffer: generateDepthBuffer,\n            generateStencilBuffer: generateStencilBuffer,\n            generateDepthTexture: generateDepthTexture,\n            depthTextureFormat: depthTextureFormat,\n            types: types,\n            textureCount: count,\n            useSRGBBuffers: useSRGBBuffers,\n            samples,\n            formats: formats,\n            targetTypes: targetTypes,\n            faceIndex: faceIndex,\n            layerIndex: layerIndex,\n            layerCounts: layerCounts,\n            labels: textureNames,\n            label: name,\n        };\n        this._count = count;\n        this._drawOnlyOnFirstAttachmentByDefault = drawOnlyOnFirstAttachmentByDefault;\n        if (count > 0) {\n            this._createInternalTextures();\n            this._createTextures(textureNames);\n        }\n    }\n    _initTypes(count, types, samplingModes, useSRGBBuffers, formats, targets, faceIndex, layerIndex, layerCounts, options) {\n        for (let i = 0; i < count; i++) {\n            if (options && options.types && options.types[i] !== undefined) {\n                types.push(options.types[i]);\n            }\n            else {\n                types.push(options && options.defaultType ? options.defaultType : Constants.TEXTURETYPE_UNSIGNED_BYTE);\n            }\n            if (options && options.samplingModes && options.samplingModes[i] !== undefined) {\n                samplingModes.push(options.samplingModes[i]);\n            }\n            else {\n                samplingModes.push(Texture.BILINEAR_SAMPLINGMODE);\n            }\n            if (options && options.useSRGBBuffers && options.useSRGBBuffers[i] !== undefined) {\n                useSRGBBuffers.push(options.useSRGBBuffers[i]);\n            }\n            else {\n                useSRGBBuffers.push(false);\n            }\n            if (options && options.formats && options.formats[i] !== undefined) {\n                formats.push(options.formats[i]);\n            }\n            else {\n                formats.push(Constants.TEXTUREFORMAT_RGBA);\n            }\n            if (options && options.targetTypes && options.targetTypes[i] !== undefined) {\n                targets.push(options.targetTypes[i]);\n            }\n            else {\n                targets.push(Constants.TEXTURE_2D);\n            }\n            if (options && options.faceIndex && options.faceIndex[i] !== undefined) {\n                faceIndex.push(options.faceIndex[i]);\n            }\n            else {\n                faceIndex.push(0);\n            }\n            if (options && options.layerIndex && options.layerIndex[i] !== undefined) {\n                layerIndex.push(options.layerIndex[i]);\n            }\n            else {\n                layerIndex.push(0);\n            }\n            if (options && options.layerCounts && options.layerCounts[i] !== undefined) {\n                layerCounts.push(options.layerCounts[i]);\n            }\n            else {\n                layerCounts.push(1);\n            }\n        }\n    }\n    _createInternaTextureIndexMapping() {\n        const mapMainInternalTexture2Index = {};\n        const mapInternalTexture2MainIndex = [];\n        if (!this._renderTarget) {\n            return mapInternalTexture2MainIndex;\n        }\n        const internalTextures = this._renderTarget.textures;\n        for (let i = 0; i < internalTextures.length; i++) {\n            const texture = internalTextures[i];\n            if (!texture) {\n                continue;\n            }\n            const mainIndex = mapMainInternalTexture2Index[texture.uniqueId];\n            if (mainIndex !== undefined) {\n                mapInternalTexture2MainIndex[i] = mainIndex;\n            }\n            else {\n                mapMainInternalTexture2Index[texture.uniqueId] = i;\n            }\n        }\n        return mapInternalTexture2MainIndex;\n    }\n    /**\n     * @internal\n     */\n    _rebuild(fromContextLost = false, forceFullRebuild = false, textureNames) {\n        if (this._count < 1 || fromContextLost) {\n            return;\n        }\n        const mapInternalTexture2MainIndex = this._createInternaTextureIndexMapping();\n        this.releaseInternalTextures();\n        this._createInternalTextures();\n        if (forceFullRebuild) {\n            this._releaseTextures();\n            this._createTextures(textureNames);\n        }\n        const internalTextures = this._renderTarget.textures;\n        for (let i = 0; i < internalTextures.length; i++) {\n            const texture = this._textures[i];\n            if (mapInternalTexture2MainIndex[i] !== undefined) {\n                this._renderTarget.setTexture(internalTextures[mapInternalTexture2MainIndex[i]], i);\n            }\n            texture._texture = internalTextures[i];\n            if (texture._texture) {\n                texture._noMipmap = !texture._texture.useMipMaps;\n                texture._useSRGBBuffer = texture._texture._useSRGBBuffer;\n            }\n        }\n        if (this.samples !== 1) {\n            this._renderTarget.setSamples(this.samples, !this._drawOnlyOnFirstAttachmentByDefault, true);\n        }\n    }\n    _createInternalTextures() {\n        this._renderTarget = this._getEngine().createMultipleRenderTarget(this._size, this._multiRenderTargetOptions, !this._drawOnlyOnFirstAttachmentByDefault);\n        this._texture = this._renderTarget.texture;\n    }\n    _releaseTextures() {\n        if (this._textures) {\n            for (let i = 0; i < this._textures.length; i++) {\n                this._textures[i]._texture = null; // internal textures are released by a call to releaseInternalTextures()\n                this._textures[i].dispose();\n            }\n        }\n    }\n    _createTextures(textureNames) {\n        const internalTextures = this._renderTarget.textures;\n        this._textures = [];\n        for (let i = 0; i < internalTextures.length; i++) {\n            const texture = new Texture(null, this.getScene());\n            if (textureNames?.[i]) {\n                texture.name = textureNames[i];\n            }\n            texture._texture = internalTextures[i];\n            if (texture._texture) {\n                texture._noMipmap = !texture._texture.useMipMaps;\n                texture._useSRGBBuffer = texture._texture._useSRGBBuffer;\n            }\n            this._textures.push(texture);\n        }\n    }\n    /**\n     * Replaces an internal texture within the MRT. Useful to share textures between MultiRenderTarget.\n     * @param texture The new texture to set in the MRT\n     * @param index The index of the texture to replace\n     * @param disposePrevious Set to true if the previous internal texture should be disposed\n     */\n    setInternalTexture(texture, index, disposePrevious = true) {\n        if (!this.renderTarget) {\n            return;\n        }\n        if (index === 0) {\n            this._texture = texture;\n        }\n        this.renderTarget.setTexture(texture, index, disposePrevious);\n        if (!this.textures[index]) {\n            this.textures[index] = new Texture(null, this.getScene());\n            this.textures[index].name = this._textureNames?.[index] ?? this.textures[index].name;\n        }\n        this.textures[index]._texture = texture;\n        this.textures[index]._noMipmap = !texture.useMipMaps;\n        this.textures[index]._useSRGBBuffer = texture._useSRGBBuffer;\n        this._count = this.renderTarget.textures ? this.renderTarget.textures.length : 0;\n        if (this._multiRenderTargetOptions.types) {\n            this._multiRenderTargetOptions.types[index] = texture.type;\n        }\n        if (this._multiRenderTargetOptions.samplingModes) {\n            this._multiRenderTargetOptions.samplingModes[index] = texture.samplingMode;\n        }\n        if (this._multiRenderTargetOptions.useSRGBBuffers) {\n            this._multiRenderTargetOptions.useSRGBBuffers[index] = texture._useSRGBBuffer;\n        }\n        if (this._multiRenderTargetOptions.targetTypes && this._multiRenderTargetOptions.targetTypes[index] !== -1) {\n            let target = 0;\n            if (texture.is2DArray) {\n                target = Constants.TEXTURE_2D_ARRAY;\n            }\n            else if (texture.isCube) {\n                target = Constants.TEXTURE_CUBE_MAP;\n            } /*else if (texture.isCubeArray) {\n                target = Constants.TEXTURE_CUBE_MAP_ARRAY;\n            }*/\n            else if (texture.is3D) {\n                target = Constants.TEXTURE_3D;\n            }\n            else {\n                target = Constants.TEXTURE_2D;\n            }\n            this._multiRenderTargetOptions.targetTypes[index] = target;\n        }\n    }\n    /**\n     * Changes an attached texture's face index or layer.\n     * @param index The index of the texture to modify the attachment of\n     * @param layerIndex The layer index of the texture to be attached to the framebuffer\n     * @param faceIndex The face index of the texture to be attached to the framebuffer\n     */\n    setLayerAndFaceIndex(index, layerIndex = -1, faceIndex = -1) {\n        if (!this.textures[index] || !this.renderTarget) {\n            return;\n        }\n        if (this._multiRenderTargetOptions.layerIndex) {\n            this._multiRenderTargetOptions.layerIndex[index] = layerIndex;\n        }\n        if (this._multiRenderTargetOptions.faceIndex) {\n            this._multiRenderTargetOptions.faceIndex[index] = faceIndex;\n        }\n        this.renderTarget.setLayerAndFaceIndex(index, layerIndex, faceIndex);\n    }\n    /**\n     * Changes every attached texture's face index or layer.\n     * @param layerIndices The layer indices of the texture to be attached to the framebuffer\n     * @param faceIndices The face indices of the texture to be attached to the framebuffer\n     */\n    setLayerAndFaceIndices(layerIndices, faceIndices) {\n        if (!this.renderTarget) {\n            return;\n        }\n        this._multiRenderTargetOptions.layerIndex = layerIndices;\n        this._multiRenderTargetOptions.faceIndex = faceIndices;\n        this.renderTarget.setLayerAndFaceIndices(layerIndices, faceIndices);\n    }\n    /**\n     * Define the number of samples used if MSAA is enabled.\n     */\n    get samples() {\n        return this._samples;\n    }\n    set samples(value) {\n        if (this._renderTarget) {\n            this._samples = this._renderTarget.setSamples(value);\n        }\n        else {\n            // In case samples are set with 0 textures created, we must save the desired samples value\n            this._samples = value;\n        }\n    }\n    /**\n     * Resize all the textures in the multi render target.\n     * Be careful as it will recreate all the data in the new texture.\n     * @param size Define the new size\n     */\n    resize(size) {\n        this._processSizeParameter(size);\n        this._rebuild(false, undefined, this._textureNames);\n    }\n    /**\n     * Changes the number of render targets in this MRT\n     * Be careful as it will recreate all the data in the new texture.\n     * @param count new texture count\n     * @param options Specifies texture types and sampling modes for new textures\n     * @param textureNames Specifies the names of the textures (optional)\n     */\n    updateCount(count, options, textureNames) {\n        this._multiRenderTargetOptions.textureCount = count;\n        this._count = count;\n        const types = [];\n        const samplingModes = [];\n        const useSRGBBuffers = [];\n        const formats = [];\n        const targetTypes = [];\n        const faceIndex = [];\n        const layerIndex = [];\n        const layerCounts = [];\n        this._textureNames = textureNames;\n        this._initTypes(count, types, samplingModes, useSRGBBuffers, formats, targetTypes, faceIndex, layerIndex, layerCounts, options);\n        this._multiRenderTargetOptions.types = types;\n        this._multiRenderTargetOptions.samplingModes = samplingModes;\n        this._multiRenderTargetOptions.useSRGBBuffers = useSRGBBuffers;\n        this._multiRenderTargetOptions.formats = formats;\n        this._multiRenderTargetOptions.targetTypes = targetTypes;\n        this._multiRenderTargetOptions.faceIndex = faceIndex;\n        this._multiRenderTargetOptions.layerIndex = layerIndex;\n        this._multiRenderTargetOptions.layerCounts = layerCounts;\n        this._multiRenderTargetOptions.labels = textureNames;\n        this._rebuild(false, true, textureNames);\n    }\n    _unbindFrameBuffer(engine, faceIndex) {\n        if (this._renderTarget) {\n            engine.unBindMultiColorAttachmentFramebuffer(this._renderTarget, this.isCube, () => {\n                this.onAfterRenderObservable.notifyObservers(faceIndex);\n            });\n        }\n    }\n    /**\n     * Dispose the render targets and their associated resources\n     * @param doNotDisposeInternalTextures if set to true, internal textures won't be disposed (default: false).\n     */\n    dispose(doNotDisposeInternalTextures = false) {\n        this._releaseTextures();\n        if (!doNotDisposeInternalTextures) {\n            this.releaseInternalTextures();\n        }\n        else {\n            // Prevent internal texture dispose in super.dispose\n            this._texture = null;\n        }\n        super.dispose();\n    }\n    /**\n     * Release all the underlying texture used as draw buffers (render textures).\n     */\n    releaseInternalTextures() {\n        const internalTextures = this._renderTarget?.textures;\n        if (!internalTextures) {\n            return;\n        }\n        for (let i = internalTextures.length - 1; i >= 0; i--) {\n            this._textures[i]._texture = null;\n        }\n        this._renderTarget?.dispose();\n        this._renderTarget = null;\n    }\n}\n//# sourceMappingURL=multiRenderTarget.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\nconst name = \"mrtFragmentDeclaration\";\nconst shader = `#if defined(WEBGL2) || defined(WEBGPU) || defined(NATIVE)\nlayout(location=0) out vec4 glFragData[{X}];\n#endif\n`;\n// Sideeffect\nif (!ShaderStore.IncludesShadersStore[name]) {\n    ShaderStore.IncludesShadersStore[name] = shader;\n}\n/** @internal */\nexport const mrtFragmentDeclaration = { name, shader };\n//# sourceMappingURL=mrtFragmentDeclaration.js.map","// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"./ShadersInclude/mrtFragmentDeclaration\";\nimport \"./ShadersInclude/bumpFragmentMainFunctions\";\nimport \"./ShadersInclude/bumpFragmentFunctions\";\nimport \"./ShadersInclude/helperFunctions\";\nimport \"./ShadersInclude/clipPlaneFragment\";\nimport \"./ShadersInclude/bumpFragment\";\nconst name = \"geometryPixelShader\";\nconst shader = `#extension GL_EXT_draw_buffers : require\n#if defined(BUMP) || !defined(NORMAL)\n#extension GL_OES_standard_derivatives : enable\n#endif\nprecision highp float;\n#ifdef BUMP\nvarying mat4 vWorldView;varying vec3 vNormalW;\n#else\nvarying vec3 vNormalV;\n#endif\nvarying vec4 vViewPos;\n#if defined(POSITION) || defined(BUMP)\nvarying vec3 vPositionW;\n#endif\n#if defined(VELOCITY) || defined(VELOCITY_LINEAR)\nvarying vec4 vCurrentPosition;varying vec4 vPreviousPosition;\n#endif\n#ifdef NEED_UV\nvarying vec2 vUV;\n#endif\n#ifdef BUMP\nuniform vec3 vBumpInfos;uniform vec2 vTangentSpaceParams;\n#endif\n#if defined(REFLECTIVITY)\n#if defined(ORMTEXTURE) || defined(SPECULARGLOSSINESSTEXTURE) || defined(REFLECTIVITYTEXTURE)\nuniform sampler2D reflectivitySampler;varying vec2 vReflectivityUV;\n#else\n#ifdef METALLIC_TEXTURE\nuniform sampler2D metallicSampler;varying vec2 vMetallicUV;\n#endif\n#ifdef ROUGHNESS_TEXTURE\nuniform sampler2D roughnessSampler;varying vec2 vRoughnessUV;\n#endif\n#endif\n#ifdef ALBEDOTEXTURE\nvarying vec2 vAlbedoUV;uniform sampler2D albedoSampler;\n#endif\n#ifdef REFLECTIVITYCOLOR\nuniform vec3 reflectivityColor;\n#endif\n#ifdef ALBEDOCOLOR\nuniform vec3 albedoColor;\n#endif\n#ifdef METALLIC\nuniform float metallic;\n#endif\n#if defined(ROUGHNESS) || defined(GLOSSINESS)\nuniform float glossiness;\n#endif\n#endif\n#if defined(ALPHATEST) && defined(NEED_UV)\nuniform sampler2D diffuseSampler;\n#endif\n#include<clipPlaneFragmentDeclaration>\n#include<mrtFragmentDeclaration>[SCENE_MRT_COUNT]\n#include<bumpFragmentMainFunctions>\n#include<bumpFragmentFunctions>\n#include<helperFunctions>\nvoid main() {\n#include<clipPlaneFragment>\n#ifdef ALPHATEST\nif (texture2D(diffuseSampler,vUV).a<0.4)\ndiscard;\n#endif\nvec3 normalOutput;\n#ifdef BUMP\nvec3 normalW=normalize(vNormalW);\n#include<bumpFragment>\n#ifdef NORMAL_WORLDSPACE\nnormalOutput=normalW;\n#else\nnormalOutput=normalize(vec3(vWorldView*vec4(normalW,0.0)));\n#endif\n#elif defined(HAS_NORMAL_ATTRIBUTE)\nnormalOutput=normalize(vNormalV);\n#elif defined(POSITION)\nnormalOutput=normalize(-cross(dFdx(vPositionW),dFdy(vPositionW)));\n#endif\n#ifdef ENCODE_NORMAL\nnormalOutput=normalOutput*0.5+0.5;\n#endif\n#ifdef DEPTH\ngl_FragData[DEPTH_INDEX]=vec4(vViewPos.z/vViewPos.w,0.0,0.0,1.0);\n#endif\n#ifdef NORMAL\ngl_FragData[NORMAL_INDEX]=vec4(normalOutput,1.0);\n#endif\n#ifdef SCREENSPACE_DEPTH\ngl_FragData[SCREENSPACE_DEPTH_INDEX]=vec4(gl_FragCoord.z,0.0,0.0,1.0);\n#endif\n#ifdef POSITION\ngl_FragData[POSITION_INDEX]=vec4(vPositionW,1.0);\n#endif\n#ifdef VELOCITY\nvec2 a=(vCurrentPosition.xy/vCurrentPosition.w)*0.5+0.5;vec2 b=(vPreviousPosition.xy/vPreviousPosition.w)*0.5+0.5;vec2 velocity=abs(a-b);velocity=vec2(pow(velocity.x,1.0/3.0),pow(velocity.y,1.0/3.0))*sign(a-b)*0.5+0.5;gl_FragData[VELOCITY_INDEX]=vec4(velocity,0.0,1.0);\n#endif\n#ifdef VELOCITY_LINEAR\nvec2 velocity=vec2(0.5)*((vPreviousPosition.xy/vPreviousPosition.w) -\n(vCurrentPosition.xy/vCurrentPosition.w));gl_FragData[VELOCITY_LINEAR_INDEX]=vec4(velocity,0.0,1.0);\n#endif\n#ifdef REFLECTIVITY\nvec4 reflectivity=vec4(0.0,0.0,0.0,1.0);\n#ifdef METALLICWORKFLOW\nfloat metal=1.0;float roughness=1.0;\n#ifdef ORMTEXTURE\nmetal*=texture2D(reflectivitySampler,vReflectivityUV).b;roughness*=texture2D(reflectivitySampler,vReflectivityUV).g;\n#else\n#ifdef METALLIC_TEXTURE\nmetal*=texture2D(metallicSampler,vMetallicUV).r;\n#endif\n#ifdef ROUGHNESS_TEXTURE\nroughness*=texture2D(roughnessSampler,vRoughnessUV).r;\n#endif\n#endif\n#ifdef METALLIC\nmetal*=metallic;\n#endif\n#ifdef ROUGHNESS\nroughness*=(1.0-glossiness); \n#endif\nreflectivity.a-=roughness;vec3 color=vec3(1.0);\n#ifdef ALBEDOTEXTURE\ncolor=texture2D(albedoSampler,vAlbedoUV).rgb;\n#ifdef GAMMAALBEDO\ncolor=toLinearSpace(color);\n#endif\n#endif\n#ifdef ALBEDOCOLOR\ncolor*=albedoColor.xyz;\n#endif\nreflectivity.rgb=mix(vec3(0.04),color,metal);\n#else\n#if defined(SPECULARGLOSSINESSTEXTURE) || defined(REFLECTIVITYTEXTURE)\nreflectivity=texture2D(reflectivitySampler,vReflectivityUV);\n#ifdef GAMMAREFLECTIVITYTEXTURE\nreflectivity.rgb=toLinearSpace(reflectivity.rgb);\n#endif\n#else \n#ifdef REFLECTIVITYCOLOR\nreflectivity.rgb=toLinearSpace(reflectivityColor.xyz);reflectivity.a=1.0;\n#endif\n#endif\n#ifdef GLOSSINESSS\nreflectivity.a*=glossiness; \n#endif\n#endif\ngl_FragData[REFLECTIVITY_INDEX]=reflectivity;\n#endif\n}\n`;\n// Sideeffect\nif (!ShaderStore.ShadersStore[name]) {\n    ShaderStore.ShadersStore[name] = shader;\n}\n/** @internal */\nexport const geometryPixelShader = { name, shader };\n//# sourceMappingURL=geometry.fragment.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\nconst name = \"geometryVertexDeclaration\";\nconst shader = `uniform mat4 viewProjection;uniform mat4 view;`;\n// Sideeffect\nif (!ShaderStore.IncludesShadersStore[name]) {\n    ShaderStore.IncludesShadersStore[name] = shader;\n}\n/** @internal */\nexport const geometryVertexDeclaration = { name, shader };\n//# sourceMappingURL=geometryVertexDeclaration.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\nimport \"./sceneUboDeclaration\";\nconst name = \"geometryUboDeclaration\";\nconst shader = `#include<sceneUboDeclaration>\n`;\n// Sideeffect\nif (!ShaderStore.IncludesShadersStore[name]) {\n    ShaderStore.IncludesShadersStore[name] = shader;\n}\n/** @internal */\nexport const geometryUboDeclaration = { name, shader };\n//# sourceMappingURL=geometryUboDeclaration.js.map","// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/bonesDeclaration\";\nimport \"./ShadersInclude/bakedVertexAnimationDeclaration\";\nimport \"./ShadersInclude/morphTargetsVertexGlobalDeclaration\";\nimport \"./ShadersInclude/morphTargetsVertexDeclaration\";\nimport \"./ShadersInclude/instancesDeclaration\";\nimport \"./ShadersInclude/geometryVertexDeclaration\";\nimport \"./ShadersInclude/geometryUboDeclaration\";\nimport \"./ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"./ShadersInclude/morphTargetsVertexGlobal\";\nimport \"./ShadersInclude/morphTargetsVertex\";\nimport \"./ShadersInclude/instancesVertex\";\nimport \"./ShadersInclude/bonesVertex\";\nimport \"./ShadersInclude/bakedVertexAnimation\";\nimport \"./ShadersInclude/clipPlaneVertex\";\nimport \"./ShadersInclude/bumpVertex\";\nconst name = \"geometryVertexShader\";\nconst shader = `precision highp float;\n#include<bonesDeclaration>\n#include<bakedVertexAnimationDeclaration>\n#include<morphTargetsVertexGlobalDeclaration>\n#include<morphTargetsVertexDeclaration>[0..maxSimultaneousMorphTargets]\n#include<instancesDeclaration>\n#include<__decl__geometryVertex>\n#include<clipPlaneVertexDeclaration>\nattribute vec3 position;\n#ifdef HAS_NORMAL_ATTRIBUTE\nattribute vec3 normal;\n#endif\n#ifdef NEED_UV\nvarying vec2 vUV;\n#ifdef ALPHATEST\nuniform mat4 diffuseMatrix;\n#endif\n#ifdef BUMP\nuniform mat4 bumpMatrix;varying vec2 vBumpUV;\n#endif\n#ifdef REFLECTIVITY\nuniform mat4 reflectivityMatrix;uniform mat4 albedoMatrix;varying vec2 vReflectivityUV;varying vec2 vAlbedoUV;\n#endif\n#ifdef METALLIC_TEXTURE\nvarying vec2 vMetallicUV;uniform mat4 metallicMatrix;\n#endif\n#ifdef ROUGHNESS_TEXTURE\nvarying vec2 vRoughnessUV;uniform mat4 roughnessMatrix;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#endif\n#ifdef BUMP\nvarying mat4 vWorldView;\n#endif\n#ifdef BUMP\nvarying vec3 vNormalW;\n#else\nvarying vec3 vNormalV;\n#endif\nvarying vec4 vViewPos;\n#if defined(POSITION) || defined(BUMP)\nvarying vec3 vPositionW;\n#endif\n#if defined(VELOCITY) || defined(VELOCITY_LINEAR)\nuniform mat4 previousViewProjection;varying vec4 vCurrentPosition;varying vec4 vPreviousPosition;\n#endif\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void)\n{vec3 positionUpdated=position;\n#ifdef HAS_NORMAL_ATTRIBUTE\nvec3 normalUpdated=normal;\n#else\nvec3 normalUpdated=vec3(0.0,0.0,0.0);\n#endif\n#ifdef UV1\nvec2 uvUpdated=uv;\n#endif\n#ifdef UV2\nvec2 uv2Updated=uv2;\n#endif\n#include<morphTargetsVertexGlobal>\n#include<morphTargetsVertex>[0..maxSimultaneousMorphTargets]\n#include<instancesVertex>\n#if (defined(VELOCITY) || defined(VELOCITY_LINEAR)) && !defined(BONES_VELOCITY_ENABLED)\nvCurrentPosition=viewProjection*finalWorld*vec4(positionUpdated,1.0);vPreviousPosition=previousViewProjection*finalPreviousWorld*vec4(positionUpdated,1.0);\n#endif\n#include<bonesVertex>\n#include<bakedVertexAnimation>\nvec4 worldPos=vec4(finalWorld*vec4(positionUpdated,1.0));\n#ifdef BUMP\nvWorldView=view*finalWorld;mat3 normalWorld=mat3(finalWorld);vNormalW=normalize(normalWorld*normalUpdated);\n#else\n#ifdef NORMAL_WORLDSPACE\nvNormalV=normalize(vec3(finalWorld*vec4(normalUpdated,0.0)));\n#else\nvNormalV=normalize(vec3((view*finalWorld)*vec4(normalUpdated,0.0)));\n#endif\n#endif\nvViewPos=view*worldPos;\n#if (defined(VELOCITY) || defined(VELOCITY_LINEAR)) && defined(BONES_VELOCITY_ENABLED)\nvCurrentPosition=viewProjection*finalWorld*vec4(positionUpdated,1.0);\n#if NUM_BONE_INFLUENCERS>0\nmat4 previousInfluence;previousInfluence=mPreviousBones[int(matricesIndices[0])]*matricesWeights[0];\n#if NUM_BONE_INFLUENCERS>1\npreviousInfluence+=mPreviousBones[int(matricesIndices[1])]*matricesWeights[1];\n#endif\n#if NUM_BONE_INFLUENCERS>2\npreviousInfluence+=mPreviousBones[int(matricesIndices[2])]*matricesWeights[2];\n#endif\n#if NUM_BONE_INFLUENCERS>3\npreviousInfluence+=mPreviousBones[int(matricesIndices[3])]*matricesWeights[3];\n#endif\n#if NUM_BONE_INFLUENCERS>4\npreviousInfluence+=mPreviousBones[int(matricesIndicesExtra[0])]*matricesWeightsExtra[0];\n#endif\n#if NUM_BONE_INFLUENCERS>5\npreviousInfluence+=mPreviousBones[int(matricesIndicesExtra[1])]*matricesWeightsExtra[1];\n#endif\n#if NUM_BONE_INFLUENCERS>6\npreviousInfluence+=mPreviousBones[int(matricesIndicesExtra[2])]*matricesWeightsExtra[2];\n#endif\n#if NUM_BONE_INFLUENCERS>7\npreviousInfluence+=mPreviousBones[int(matricesIndicesExtra[3])]*matricesWeightsExtra[3];\n#endif\nvPreviousPosition=previousViewProjection*finalPreviousWorld*previousInfluence*vec4(positionUpdated,1.0);\n#else\nvPreviousPosition=previousViewProjection*finalPreviousWorld*vec4(positionUpdated,1.0);\n#endif\n#endif\n#if defined(POSITION) || defined(BUMP)\nvPositionW=worldPos.xyz/worldPos.w;\n#endif\ngl_Position=viewProjection*finalWorld*vec4(positionUpdated,1.0);\n#include<clipPlaneVertex>\n#ifdef NEED_UV\n#ifdef UV1\n#if defined(ALPHATEST) && defined(ALPHATEST_UV1)\nvUV=vec2(diffuseMatrix*vec4(uvUpdated,1.0,0.0));\n#else\nvUV=uvUpdated;\n#endif\n#ifdef BUMP_UV1\nvBumpUV=vec2(bumpMatrix*vec4(uvUpdated,1.0,0.0));\n#endif\n#ifdef REFLECTIVITY_UV1\nvReflectivityUV=vec2(reflectivityMatrix*vec4(uvUpdated,1.0,0.0));\n#else\n#ifdef METALLIC_UV1\nvMetallicUV=vec2(metallicMatrix*vec4(uvUpdated,1.0,0.0));\n#endif\n#ifdef ROUGHNESS_UV1\nvRoughnessUV=vec2(roughnessMatrix*vec4(uvUpdated,1.0,0.0));\n#endif\n#endif\n#ifdef ALBEDO_UV1\nvAlbedoUV=vec2(albedoMatrix*vec4(uvUpdated,1.0,0.0));\n#endif\n#endif\n#ifdef UV2\n#if defined(ALPHATEST) && defined(ALPHATEST_UV2)\nvUV=vec2(diffuseMatrix*vec4(uv2Updated,1.0,0.0));\n#else\nvUV=uv2Updated;\n#endif\n#ifdef BUMP_UV2\nvBumpUV=vec2(bumpMatrix*vec4(uv2Updated,1.0,0.0));\n#endif\n#ifdef REFLECTIVITY_UV2\nvReflectivityUV=vec2(reflectivityMatrix*vec4(uv2Updated,1.0,0.0));\n#else\n#ifdef METALLIC_UV2\nvMetallicUV=vec2(metallicMatrix*vec4(uv2Updated,1.0,0.0));\n#endif\n#ifdef ROUGHNESS_UV2\nvRoughnessUV=vec2(roughnessMatrix*vec4(uv2Updated,1.0,0.0));\n#endif\n#endif\n#ifdef ALBEDO_UV2\nvAlbedoUV=vec2(albedoMatrix*vec4(uv2Updated,1.0,0.0));\n#endif\n#endif\n#endif\n#include<bumpVertex>\n}\n`;\n// Sideeffect\nif (!ShaderStore.ShadersStore[name]) {\n    ShaderStore.ShadersStore[name] = shader;\n}\n/** @internal */\nexport const geometryVertexShader = { name, shader };\n//# sourceMappingURL=geometry.vertex.js.map","import { Matrix } from \"../Maths/math.vector\";\nimport { VertexBuffer } from \"../Buffers/buffer\";\nimport { Constants } from \"../Engines/constants\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { MultiRenderTarget } from \"../Materials/Textures/multiRenderTarget\";\nimport { Color4 } from \"../Maths/math.color\";\nimport { _WarnImport } from \"../Misc/devTools\";\nimport { Material } from \"../Materials/material\";\nimport \"../Shaders/geometry.fragment\";\nimport \"../Shaders/geometry.vertex\";\nimport { MaterialFlags } from \"../Materials/materialFlags\";\nimport { AddClipPlaneUniforms, BindClipPlane, PrepareStringDefinesForClipPlanes } from \"../Materials/clipPlaneMaterialHelper\";\nimport { BindMorphTargetParameters, BindSceneUniformBuffer, PrepareDefinesAndAttributesForMorphTargets, PushAttributesForInstances } from \"../Materials/materialHelper.functions\";\nimport \"../Engines/Extensions/engine.multiRender\";\n/** list the uniforms used by the geometry renderer */\nconst Uniforms = [\n    \"world\",\n    \"mBones\",\n    \"viewProjection\",\n    \"diffuseMatrix\",\n    \"view\",\n    \"previousWorld\",\n    \"previousViewProjection\",\n    \"mPreviousBones\",\n    \"bumpMatrix\",\n    \"reflectivityMatrix\",\n    \"albedoMatrix\",\n    \"reflectivityColor\",\n    \"albedoColor\",\n    \"metallic\",\n    \"glossiness\",\n    \"vTangentSpaceParams\",\n    \"vBumpInfos\",\n    \"morphTargetInfluences\",\n    \"morphTargetCount\",\n    \"morphTargetTextureInfo\",\n    \"morphTargetTextureIndices\",\n    \"boneTextureWidth\",\n];\nAddClipPlaneUniforms(Uniforms);\n/**\n * This renderer is helpful to fill one of the render target with a geometry buffer.\n */\nexport class GeometryBufferRenderer {\n    /**\n     * Gets a boolean indicating if normals are encoded in the [0,1] range in the render target. If true, you should do `normal = normal_rt * 2.0 - 1.0` to get the right normal\n     */\n    get normalsAreUnsigned() {\n        return this._normalsAreUnsigned;\n    }\n    /**\n     * @internal\n     * Sets up internal structures to share outputs with PrePassRenderer\n     * This method should only be called by the PrePassRenderer itself\n     */\n    _linkPrePassRenderer(prePassRenderer) {\n        this._linkedWithPrePass = true;\n        this._prePassRenderer = prePassRenderer;\n        if (this._multiRenderTarget) {\n            // prevents clearing of the RT since it's done by prepass\n            this._multiRenderTarget.onClearObservable.clear();\n            this._multiRenderTarget.onClearObservable.add(() => {\n                // pass\n            });\n        }\n    }\n    /**\n     * @internal\n     * Separates internal structures from PrePassRenderer so the geometry buffer can now operate by itself.\n     * This method should only be called by the PrePassRenderer itself\n     */\n    _unlinkPrePassRenderer() {\n        this._linkedWithPrePass = false;\n        this._createRenderTargets();\n    }\n    /**\n     * @internal\n     * Resets the geometry buffer layout\n     */\n    _resetLayout() {\n        this._enableDepth = true;\n        this._enableNormal = true;\n        this._enablePosition = false;\n        this._enableReflectivity = false;\n        this._enableVelocity = false;\n        this._enableVelocityLinear = false;\n        this._enableScreenspaceDepth = false;\n        this._attachmentsFromPrePass = [];\n    }\n    /**\n     * @internal\n     * Replaces a texture in the geometry buffer renderer\n     * Useful when linking textures of the prepass renderer\n     */\n    _forceTextureType(geometryBufferType, index) {\n        if (geometryBufferType === GeometryBufferRenderer.POSITION_TEXTURE_TYPE) {\n            this._positionIndex = index;\n            this._enablePosition = true;\n        }\n        else if (geometryBufferType === GeometryBufferRenderer.VELOCITY_TEXTURE_TYPE) {\n            this._velocityIndex = index;\n            this._enableVelocity = true;\n        }\n        else if (geometryBufferType === GeometryBufferRenderer.VELOCITY_LINEAR_TEXTURE_TYPE) {\n            this._velocityLinearIndex = index;\n            this._enableVelocityLinear = true;\n        }\n        else if (geometryBufferType === GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE) {\n            this._reflectivityIndex = index;\n            this._enableReflectivity = true;\n        }\n        else if (geometryBufferType === GeometryBufferRenderer.DEPTH_TEXTURE_TYPE) {\n            this._depthIndex = index;\n            this._enableDepth = true;\n        }\n        else if (geometryBufferType === GeometryBufferRenderer.NORMAL_TEXTURE_TYPE) {\n            this._normalIndex = index;\n            this._enableNormal = true;\n        }\n        else if (geometryBufferType === GeometryBufferRenderer.SCREENSPACE_DEPTH_TEXTURE_TYPE) {\n            this._screenspaceDepthIndex = index;\n            this._enableScreenspaceDepth = true;\n        }\n    }\n    /**\n     * @internal\n     * Sets texture attachments\n     * Useful when linking textures of the prepass renderer\n     */\n    _setAttachments(attachments) {\n        this._attachmentsFromPrePass = attachments;\n    }\n    /**\n     * @internal\n     * Replaces the first texture which is hard coded as a depth texture in the geometry buffer\n     * Useful when linking textures of the prepass renderer\n     */\n    _linkInternalTexture(internalTexture) {\n        this._multiRenderTarget.setInternalTexture(internalTexture, 0, false);\n    }\n    /**\n     * Gets the render list (meshes to be rendered) used in the G buffer.\n     */\n    get renderList() {\n        return this._multiRenderTarget.renderList;\n    }\n    /**\n     * Set the render list (meshes to be rendered) used in the G buffer.\n     */\n    set renderList(meshes) {\n        this._multiRenderTarget.renderList = meshes;\n    }\n    /**\n     * Gets whether or not G buffer are supported by the running hardware.\n     * This requires draw buffer supports\n     */\n    get isSupported() {\n        return this._multiRenderTarget.isSupported;\n    }\n    /**\n     * Returns the index of the given texture type in the G-Buffer textures array\n     * @param textureType The texture type constant. For example GeometryBufferRenderer.POSITION_TEXTURE_INDEX\n     * @returns the index of the given texture type in the G-Buffer textures array\n     */\n    getTextureIndex(textureType) {\n        switch (textureType) {\n            case GeometryBufferRenderer.POSITION_TEXTURE_TYPE:\n                return this._positionIndex;\n            case GeometryBufferRenderer.VELOCITY_TEXTURE_TYPE:\n                return this._velocityIndex;\n            case GeometryBufferRenderer.VELOCITY_LINEAR_TEXTURE_TYPE:\n                return this._velocityLinearIndex;\n            case GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE:\n                return this._reflectivityIndex;\n            case GeometryBufferRenderer.DEPTH_TEXTURE_TYPE:\n                return this._depthIndex;\n            case GeometryBufferRenderer.NORMAL_TEXTURE_TYPE:\n                return this._normalIndex;\n            case GeometryBufferRenderer.SCREENSPACE_DEPTH_TEXTURE_TYPE:\n                return this._screenspaceDepthIndex;\n            default:\n                return -1;\n        }\n    }\n    /**\n     * @returns a boolean indicating if object's depths are enabled for the G buffer.\n     */\n    get enableDepth() {\n        return this._enableDepth;\n    }\n    /**\n     * Sets whether or not object's depths are enabled for the G buffer.\n     */\n    set enableDepth(enable) {\n        this._enableDepth = enable;\n        if (!this._linkedWithPrePass) {\n            this.dispose();\n            this._createRenderTargets();\n        }\n    }\n    /**\n     * @returns a boolean indicating if object's normals are enabled for the G buffer.\n     */\n    get enableNormal() {\n        return this._enableNormal;\n    }\n    /**\n     * Sets whether or not object's normals are enabled for the G buffer.\n     */\n    set enableNormal(enable) {\n        this._enableNormal = enable;\n        if (!this._linkedWithPrePass) {\n            this.dispose();\n            this._createRenderTargets();\n        }\n    }\n    /**\n     * @returns a boolean indicating if objects positions are enabled for the G buffer.\n     */\n    get enablePosition() {\n        return this._enablePosition;\n    }\n    /**\n     * Sets whether or not objects positions are enabled for the G buffer.\n     */\n    set enablePosition(enable) {\n        this._enablePosition = enable;\n        // PrePass handles index and texture links\n        if (!this._linkedWithPrePass) {\n            this.dispose();\n            this._createRenderTargets();\n        }\n    }\n    /**\n     * @returns a boolean indicating if objects velocities are enabled for the G buffer.\n     */\n    get enableVelocity() {\n        return this._enableVelocity;\n    }\n    /**\n     * Sets whether or not objects velocities are enabled for the G buffer.\n     */\n    set enableVelocity(enable) {\n        this._enableVelocity = enable;\n        if (!enable) {\n            this._previousTransformationMatrices = {};\n        }\n        if (!this._linkedWithPrePass) {\n            this.dispose();\n            this._createRenderTargets();\n        }\n        this._scene.needsPreviousWorldMatrices = enable;\n    }\n    /**\n     * @returns a boolean indicating if object's linear velocities are enabled for the G buffer.\n     */\n    get enableVelocityLinear() {\n        return this._enableVelocityLinear;\n    }\n    /**\n     * Sets whether or not object's linear velocities are enabled for the G buffer.\n     */\n    set enableVelocityLinear(enable) {\n        this._enableVelocityLinear = enable;\n        if (!this._linkedWithPrePass) {\n            this.dispose();\n            this._createRenderTargets();\n        }\n    }\n    /**\n     * Gets a boolean indicating if objects reflectivity are enabled in the G buffer.\n     */\n    get enableReflectivity() {\n        return this._enableReflectivity;\n    }\n    /**\n     * Sets whether or not objects reflectivity are enabled for the G buffer.\n     * For Metallic-Roughness workflow with ORM texture, we assume that ORM texture is defined according to the default layout:\n     * pbr.useRoughnessFromMetallicTextureAlpha = false;\n     * pbr.useRoughnessFromMetallicTextureGreen = true;\n     * pbr.useMetallnessFromMetallicTextureBlue = true;\n     */\n    set enableReflectivity(enable) {\n        this._enableReflectivity = enable;\n        if (!this._linkedWithPrePass) {\n            this.dispose();\n            this._createRenderTargets();\n        }\n    }\n    /**\n     * Sets whether or not objects screenspace depth are enabled for the G buffer.\n     */\n    get enableScreenspaceDepth() {\n        return this._enableScreenspaceDepth;\n    }\n    set enableScreenspaceDepth(enable) {\n        this._enableScreenspaceDepth = enable;\n        if (!this._linkedWithPrePass) {\n            this.dispose();\n            this._createRenderTargets();\n        }\n    }\n    /**\n     * Gets the scene associated with the buffer.\n     */\n    get scene() {\n        return this._scene;\n    }\n    /**\n     * Gets the ratio used by the buffer during its creation.\n     * How big is the buffer related to the main canvas.\n     */\n    get ratio() {\n        return typeof this._ratioOrDimensions === \"object\" ? 1 : this._ratioOrDimensions;\n    }\n    /**\n     * Gets the shader language used in this material.\n     */\n    get shaderLanguage() {\n        return this._shaderLanguage;\n    }\n    /**\n     * Creates a new G Buffer for the scene\n     * @param scene The scene the buffer belongs to\n     * @param ratioOrDimensions How big is the buffer related to the main canvas (default: 1). You can also directly pass a width and height for the generated textures\n     * @param depthFormat Format of the depth texture (default: Constants.TEXTUREFORMAT_DEPTH16)\n     * @param textureTypesAndFormats The types and formats of textures to create as render targets. If not provided, all textures will be RGBA and float or half float, depending on the engine capabilities.\n     */\n    constructor(scene, ratioOrDimensions = 1, depthFormat = Constants.TEXTUREFORMAT_DEPTH16, textureTypesAndFormats) {\n        /**\n         * Dictionary used to store the previous transformation matrices of each rendered mesh\n         * in order to compute objects velocities when enableVelocity is set to \"true\"\n         * @internal\n         */\n        this._previousTransformationMatrices = {};\n        /**\n         * Dictionary used to store the previous bones transformation matrices of each rendered mesh\n         * in order to compute objects velocities when enableVelocity is set to \"true\"\n         * @internal\n         */\n        this._previousBonesTransformationMatrices = {};\n        /**\n         * Array used to store the ignored skinned meshes while computing velocity map (typically used by the motion blur post-process).\n         * Avoids computing bones velocities and computes only mesh's velocity itself (position, rotation, scaling).\n         */\n        this.excludedSkinnedMeshesFromVelocity = [];\n        /** Gets or sets a boolean indicating if transparent meshes should be rendered */\n        this.renderTransparentMeshes = true;\n        /**\n         * Gets or sets a boolean indicating if normals should be generated in world space (default: false, meaning normals are generated in view space)\n         */\n        this.generateNormalsInWorldSpace = false;\n        this._normalsAreUnsigned = false;\n        this._resizeObserver = null;\n        this._enableDepth = true;\n        this._enableNormal = true;\n        this._enablePosition = false;\n        this._enableVelocity = false;\n        this._enableVelocityLinear = false;\n        this._enableReflectivity = false;\n        this._enableScreenspaceDepth = false;\n        this._clearColor = new Color4(0, 0, 0, 0);\n        this._clearDepthColor = new Color4(0, 0, 0, 1); // sets an invalid value by default - depth in the depth texture is view.z, so 0 is not possible because view.z can't be less than camera.minZ\n        this._positionIndex = -1;\n        this._velocityIndex = -1;\n        this._velocityLinearIndex = -1;\n        this._reflectivityIndex = -1;\n        this._depthIndex = -1;\n        this._normalIndex = -1;\n        this._screenspaceDepthIndex = -1;\n        this._linkedWithPrePass = false;\n        /**\n         * If set to true (default: false), the depth texture will be cleared with the depth value corresponding to the far plane (1 in normal mode, 0 in reverse depth buffer mode)\n         * If set to false, the depth texture is always cleared with 0.\n         */\n        this.useSpecificClearForDepthTexture = false;\n        /** Shader language used by the material */\n        this._shaderLanguage = 0 /* ShaderLanguage.GLSL */;\n        this._shadersLoaded = false;\n        this._scene = scene;\n        this._ratioOrDimensions = ratioOrDimensions;\n        this._useUbo = scene.getEngine().supportsUniformBuffers;\n        this._depthFormat = depthFormat;\n        this._textureTypesAndFormats = textureTypesAndFormats || {};\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this._initShaderSourceAsync();\n        GeometryBufferRenderer._SceneComponentInitialization(this._scene);\n        // Render target\n        this._createRenderTargets();\n    }\n    async _initShaderSourceAsync() {\n        const engine = this._scene.getEngine();\n        if (engine.isWebGPU && !GeometryBufferRenderer.ForceGLSL) {\n            this._shaderLanguage = 1 /* ShaderLanguage.WGSL */;\n            await Promise.all([import(\"../ShadersWGSL/geometry.vertex\"), import(\"../ShadersWGSL/geometry.fragment\")]);\n        }\n        else {\n            await Promise.all([import(\"../Shaders/geometry.vertex\"), import(\"../Shaders/geometry.fragment\")]);\n        }\n        this._shadersLoaded = true;\n    }\n    /**\n     * Checks whether everything is ready to render a submesh to the G buffer.\n     * @param subMesh the submesh to check readiness for\n     * @param useInstances is the mesh drawn using instance or not\n     * @returns true if ready otherwise false\n     */\n    isReady(subMesh, useInstances) {\n        if (!this._shadersLoaded) {\n            return false;\n        }\n        const material = subMesh.getMaterial();\n        if (material && material.disableDepthWrite) {\n            return false;\n        }\n        const defines = [];\n        const attribs = [VertexBuffer.PositionKind];\n        const mesh = subMesh.getMesh();\n        const hasNormals = mesh.isVerticesDataPresent(VertexBuffer.NormalKind);\n        if (hasNormals) {\n            defines.push(\"#define HAS_NORMAL_ATTRIBUTE\");\n            attribs.push(VertexBuffer.NormalKind);\n        }\n        let uv1 = false;\n        let uv2 = false;\n        const color = false;\n        if (material) {\n            let needUv = false;\n            // Alpha test\n            if (material.needAlphaTestingForMesh(mesh) && material.getAlphaTestTexture()) {\n                defines.push(\"#define ALPHATEST\");\n                defines.push(`#define ALPHATEST_UV${material.getAlphaTestTexture().coordinatesIndex + 1}`);\n                needUv = true;\n            }\n            // Normal map texture\n            if ((material.bumpTexture || material.normalTexture || material.geometryNormalTexture) && MaterialFlags.BumpTextureEnabled) {\n                const texture = material.bumpTexture || material.normalTexture || material.geometryNormalTexture;\n                defines.push(\"#define BUMP\");\n                defines.push(`#define BUMP_UV${texture.coordinatesIndex + 1}`);\n                needUv = true;\n            }\n            if (this._enableReflectivity) {\n                let metallicWorkflow = false;\n                // for PBR materials: cf. https://doc.babylonjs.com/features/featuresDeepDive/materials/using/masterPBR\n                if (material.getClassName() === \"PBRMetallicRoughnessMaterial\") {\n                    // if it is a PBR material in MetallicRoughness Mode:\n                    if (material.metallicRoughnessTexture) {\n                        defines.push(\"#define ORMTEXTURE\");\n                        defines.push(`#define REFLECTIVITY_UV${material.metallicRoughnessTexture.coordinatesIndex + 1}`);\n                        defines.push(\"#define METALLICWORKFLOW\");\n                        needUv = true;\n                        metallicWorkflow = true;\n                    }\n                    // null or undefined\n                    if (material.metallic != null) {\n                        defines.push(\"#define METALLIC\");\n                        defines.push(\"#define METALLICWORKFLOW\");\n                        metallicWorkflow = true;\n                    }\n                    // null or undefined\n                    if (material.roughness != null) {\n                        defines.push(\"#define ROUGHNESS\");\n                        defines.push(\"#define METALLICWORKFLOW\");\n                        metallicWorkflow = true;\n                    }\n                    if (metallicWorkflow) {\n                        if (material.baseTexture) {\n                            defines.push(\"#define ALBEDOTEXTURE\");\n                            defines.push(`#define ALBEDO_UV${material.baseTexture.coordinatesIndex + 1}`);\n                            if (material.baseTexture.gammaSpace) {\n                                defines.push(\"#define GAMMAALBEDO\");\n                            }\n                            needUv = true;\n                        }\n                        if (material.baseColor) {\n                            defines.push(\"#define ALBEDOCOLOR\");\n                        }\n                    }\n                }\n                else if (material.getClassName() === \"PBRSpecularGlossinessMaterial\") {\n                    // if it is a PBR material in Specular/Glossiness Mode:\n                    if (material.specularGlossinessTexture) {\n                        defines.push(\"#define SPECULARGLOSSINESSTEXTURE\");\n                        defines.push(`#define REFLECTIVITY_UV${material.specularGlossinessTexture.coordinatesIndex + 1}`);\n                        needUv = true;\n                        if (material.specularGlossinessTexture.gammaSpace) {\n                            defines.push(\"#define GAMMAREFLECTIVITYTEXTURE\");\n                        }\n                    }\n                    else {\n                        if (material.specularColor) {\n                            defines.push(\"#define REFLECTIVITYCOLOR\");\n                        }\n                    }\n                    // null or undefined\n                    if (material.glossiness != null) {\n                        defines.push(\"#define GLOSSINESS\");\n                    }\n                }\n                else if (material.getClassName() === \"PBRMaterial\") {\n                    // if it is the bigger PBRMaterial\n                    if (material.metallicTexture) {\n                        defines.push(\"#define ORMTEXTURE\");\n                        defines.push(`#define REFLECTIVITY_UV${material.metallicTexture.coordinatesIndex + 1}`);\n                        defines.push(\"#define METALLICWORKFLOW\");\n                        needUv = true;\n                        metallicWorkflow = true;\n                    }\n                    // null or undefined\n                    if (material.metallic != null) {\n                        defines.push(\"#define METALLIC\");\n                        defines.push(\"#define METALLICWORKFLOW\");\n                        metallicWorkflow = true;\n                    }\n                    // null or undefined\n                    if (material.roughness != null) {\n                        defines.push(\"#define ROUGHNESS\");\n                        defines.push(\"#define METALLICWORKFLOW\");\n                        metallicWorkflow = true;\n                    }\n                    if (metallicWorkflow) {\n                        if (material.albedoTexture) {\n                            defines.push(\"#define ALBEDOTEXTURE\");\n                            defines.push(`#define ALBEDO_UV${material.albedoTexture.coordinatesIndex + 1}`);\n                            if (material.albedoTexture.gammaSpace) {\n                                defines.push(\"#define GAMMAALBEDO\");\n                            }\n                            needUv = true;\n                        }\n                        if (material.albedoColor) {\n                            defines.push(\"#define ALBEDOCOLOR\");\n                        }\n                    }\n                    else {\n                        // SpecularGlossiness Model\n                        if (material.reflectivityTexture) {\n                            defines.push(\"#define SPECULARGLOSSINESSTEXTURE\");\n                            defines.push(`#define REFLECTIVITY_UV${material.reflectivityTexture.coordinatesIndex + 1}`);\n                            if (material.reflectivityTexture.gammaSpace) {\n                                defines.push(\"#define GAMMAREFLECTIVITYTEXTURE\");\n                            }\n                            needUv = true;\n                        }\n                        else if (material.reflectivityColor) {\n                            defines.push(\"#define REFLECTIVITYCOLOR\");\n                        }\n                        // null or undefined\n                        if (material.microSurface != null) {\n                            defines.push(\"#define GLOSSINESS\");\n                        }\n                    }\n                }\n                else if (material.getClassName() === \"StandardMaterial\") {\n                    // if StandardMaterial:\n                    if (material.specularTexture) {\n                        defines.push(\"#define REFLECTIVITYTEXTURE\");\n                        defines.push(`#define REFLECTIVITY_UV${material.specularTexture.coordinatesIndex + 1}`);\n                        if (material.specularTexture.gammaSpace) {\n                            defines.push(\"#define GAMMAREFLECTIVITYTEXTURE\");\n                        }\n                        needUv = true;\n                    }\n                    if (material.specularColor) {\n                        defines.push(\"#define REFLECTIVITYCOLOR\");\n                    }\n                }\n                else if (material.getClassName() === \"OpenPBRMaterial\") {\n                    const pbrMaterial = material;\n                    defines.push(\"#define METALLICWORKFLOW\");\n                    metallicWorkflow = true;\n                    defines.push(\"#define METALLIC\");\n                    defines.push(\"#define ROUGHNESS\");\n                    if (pbrMaterial._useRoughnessFromMetallicTextureGreen && pbrMaterial.baseMetalnessTexture) {\n                        defines.push(\"#define ORMTEXTURE\");\n                        defines.push(`#define REFLECTIVITY_UV${pbrMaterial.baseMetalnessTexture.coordinatesIndex + 1}`);\n                        needUv = true;\n                    }\n                    else if (pbrMaterial.baseMetalnessTexture) {\n                        defines.push(\"#define METALLIC_TEXTURE\");\n                        defines.push(`#define METALLIC_UV${pbrMaterial.baseMetalnessTexture.coordinatesIndex + 1}`);\n                        needUv = true;\n                    }\n                    else if (pbrMaterial.specularRoughnessTexture) {\n                        defines.push(\"#define ROUGHNESS_TEXTURE\");\n                        defines.push(`#define ROUGHNESS_UV${pbrMaterial.specularRoughnessTexture.coordinatesIndex + 1}`);\n                        needUv = true;\n                    }\n                    if (pbrMaterial.baseColorTexture) {\n                        defines.push(\"#define ALBEDOTEXTURE\");\n                        defines.push(`#define ALBEDO_UV${pbrMaterial.baseColorTexture.coordinatesIndex + 1}`);\n                        if (pbrMaterial.baseColorTexture.gammaSpace) {\n                            defines.push(\"#define GAMMAALBEDO\");\n                        }\n                        needUv = true;\n                    }\n                    if (pbrMaterial.baseColor) {\n                        defines.push(\"#define ALBEDOCOLOR\");\n                    }\n                }\n            }\n            if (needUv) {\n                defines.push(\"#define NEED_UV\");\n                if (mesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\n                    attribs.push(VertexBuffer.UVKind);\n                    defines.push(\"#define UV1\");\n                    uv1 = true;\n                }\n                if (mesh.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\n                    attribs.push(VertexBuffer.UV2Kind);\n                    defines.push(\"#define UV2\");\n                    uv2 = true;\n                }\n            }\n        }\n        // Buffers\n        if (this._enableDepth) {\n            defines.push(\"#define DEPTH\");\n            defines.push(\"#define DEPTH_INDEX \" + this._depthIndex);\n        }\n        if (this._enableNormal) {\n            defines.push(\"#define NORMAL\");\n            defines.push(\"#define NORMAL_INDEX \" + this._normalIndex);\n        }\n        if (this._enablePosition) {\n            defines.push(\"#define POSITION\");\n            defines.push(\"#define POSITION_INDEX \" + this._positionIndex);\n        }\n        if (this._enableVelocity) {\n            defines.push(\"#define VELOCITY\");\n            defines.push(\"#define VELOCITY_INDEX \" + this._velocityIndex);\n            if (this.excludedSkinnedMeshesFromVelocity.indexOf(mesh) === -1) {\n                defines.push(\"#define BONES_VELOCITY_ENABLED\");\n            }\n        }\n        if (this._enableVelocityLinear) {\n            defines.push(\"#define VELOCITY_LINEAR\");\n            defines.push(\"#define VELOCITY_LINEAR_INDEX \" + this._velocityLinearIndex);\n            if (this.excludedSkinnedMeshesFromVelocity.indexOf(mesh) === -1) {\n                defines.push(\"#define BONES_VELOCITY_ENABLED\");\n            }\n        }\n        if (this._enableReflectivity) {\n            defines.push(\"#define REFLECTIVITY\");\n            defines.push(\"#define REFLECTIVITY_INDEX \" + this._reflectivityIndex);\n        }\n        if (this._enableScreenspaceDepth) {\n            if (this._screenspaceDepthIndex !== -1) {\n                defines.push(\"#define SCREENSPACE_DEPTH_INDEX \" + this._screenspaceDepthIndex);\n                defines.push(\"#define SCREENSPACE_DEPTH\");\n            }\n        }\n        if (this.generateNormalsInWorldSpace) {\n            defines.push(\"#define NORMAL_WORLDSPACE\");\n        }\n        if (this._normalsAreUnsigned) {\n            defines.push(\"#define ENCODE_NORMAL\");\n        }\n        // Bones\n        if (mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\n            attribs.push(VertexBuffer.MatricesIndicesKind);\n            attribs.push(VertexBuffer.MatricesWeightsKind);\n            if (mesh.numBoneInfluencers > 4) {\n                attribs.push(VertexBuffer.MatricesIndicesExtraKind);\n                attribs.push(VertexBuffer.MatricesWeightsExtraKind);\n            }\n            defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\n            defines.push(\"#define BONETEXTURE \" + mesh.skeleton.isUsingTextureForMatrices);\n            defines.push(\"#define BonesPerMesh \" + (mesh.skeleton.bones.length + 1));\n        }\n        else {\n            defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\n            defines.push(\"#define BONETEXTURE false\");\n            defines.push(\"#define BonesPerMesh 0\");\n        }\n        // Morph targets\n        const numMorphInfluencers = mesh.morphTargetManager\n            ? PrepareDefinesAndAttributesForMorphTargets(mesh.morphTargetManager, defines, attribs, mesh, true, // usePositionMorph\n            true, // useNormalMorph\n            false, // useTangentMorph\n            uv1, // useUVMorph\n            uv2, // useUV2Morph\n            color // useColorMorph\n            )\n            : 0;\n        // Instances\n        if (useInstances) {\n            defines.push(\"#define INSTANCES\");\n            PushAttributesForInstances(attribs, this._enableVelocity || this._enableVelocityLinear);\n            if (subMesh.getRenderingMesh().hasThinInstances) {\n                defines.push(\"#define THIN_INSTANCES\");\n            }\n        }\n        // Setup textures count\n        if (this._linkedWithPrePass) {\n            defines.push(\"#define SCENE_MRT_COUNT \" + this._attachmentsFromPrePass.length);\n        }\n        else {\n            defines.push(\"#define SCENE_MRT_COUNT \" + this._multiRenderTarget.textures.length);\n        }\n        PrepareStringDefinesForClipPlanes(material, this._scene, defines);\n        // Get correct effect\n        const engine = this._scene.getEngine();\n        const drawWrapper = subMesh._getDrawWrapper(undefined, true);\n        const cachedDefines = drawWrapper.defines;\n        const join = defines.join(\"\\n\");\n        if (cachedDefines !== join) {\n            drawWrapper.setEffect(engine.createEffect(\"geometry\", {\n                attributes: attribs,\n                uniformsNames: Uniforms,\n                samplers: [\"diffuseSampler\", \"bumpSampler\", \"reflectivitySampler\", \"albedoSampler\", \"morphTargets\", \"boneSampler\"],\n                defines: join,\n                onCompiled: null,\n                fallbacks: null,\n                onError: null,\n                uniformBuffersNames: [\"Scene\"],\n                indexParameters: { buffersCount: this._multiRenderTarget.textures.length - 1, maxSimultaneousMorphTargets: numMorphInfluencers },\n                shaderLanguage: this.shaderLanguage,\n            }, engine), join);\n        }\n        return drawWrapper.effect.isReady();\n    }\n    /**\n     * Gets the current underlying G Buffer.\n     * @returns the buffer\n     */\n    getGBuffer() {\n        return this._multiRenderTarget;\n    }\n    /**\n     * Gets the number of samples used to render the buffer (anti aliasing).\n     */\n    get samples() {\n        return this._multiRenderTarget.samples;\n    }\n    /**\n     * Sets the number of samples used to render the buffer (anti aliasing).\n     */\n    set samples(value) {\n        this._multiRenderTarget.samples = value;\n    }\n    /**\n     * Disposes the renderer and frees up associated resources.\n     */\n    dispose() {\n        if (this._resizeObserver) {\n            const engine = this._scene.getEngine();\n            engine.onResizeObservable.remove(this._resizeObserver);\n            this._resizeObserver = null;\n        }\n        this.getGBuffer().dispose();\n    }\n    _assignRenderTargetIndices() {\n        const textureNames = [];\n        const textureTypesAndFormats = [];\n        let count = 0;\n        if (this._enableDepth) {\n            this._depthIndex = count;\n            count++;\n            textureNames.push(\"gBuffer_Depth\");\n            textureTypesAndFormats.push(this._textureTypesAndFormats[GeometryBufferRenderer.DEPTH_TEXTURE_TYPE]);\n        }\n        if (this._enableNormal) {\n            this._normalIndex = count;\n            count++;\n            textureNames.push(\"gBuffer_Normal\");\n            textureTypesAndFormats.push(this._textureTypesAndFormats[GeometryBufferRenderer.NORMAL_TEXTURE_TYPE]);\n        }\n        if (this._enablePosition) {\n            this._positionIndex = count;\n            count++;\n            textureNames.push(\"gBuffer_Position\");\n            textureTypesAndFormats.push(this._textureTypesAndFormats[GeometryBufferRenderer.POSITION_TEXTURE_TYPE]);\n        }\n        if (this._enableVelocity) {\n            this._velocityIndex = count;\n            count++;\n            textureNames.push(\"gBuffer_Velocity\");\n            textureTypesAndFormats.push(this._textureTypesAndFormats[GeometryBufferRenderer.VELOCITY_TEXTURE_TYPE]);\n        }\n        if (this._enableVelocityLinear) {\n            this._velocityLinearIndex = count;\n            count++;\n            textureNames.push(\"gBuffer_VelocityLinear\");\n            textureTypesAndFormats.push(this._textureTypesAndFormats[GeometryBufferRenderer.VELOCITY_LINEAR_TEXTURE_TYPE]);\n        }\n        if (this._enableReflectivity) {\n            this._reflectivityIndex = count;\n            count++;\n            textureNames.push(\"gBuffer_Reflectivity\");\n            textureTypesAndFormats.push(this._textureTypesAndFormats[GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE]);\n        }\n        if (this._enableScreenspaceDepth) {\n            this._screenspaceDepthIndex = count;\n            count++;\n            textureNames.push(\"gBuffer_ScreenspaceDepth\");\n            textureTypesAndFormats.push(this._textureTypesAndFormats[GeometryBufferRenderer.SCREENSPACE_DEPTH_TEXTURE_TYPE]);\n        }\n        return [count, textureNames, textureTypesAndFormats];\n    }\n    _createRenderTargets() {\n        const engine = this._scene.getEngine();\n        const [count, textureNames, textureTypesAndFormat] = this._assignRenderTargetIndices();\n        let type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\n        if (engine._caps.textureFloat && engine._caps.textureFloatLinearFiltering) {\n            type = Constants.TEXTURETYPE_FLOAT;\n        }\n        else if (engine._caps.textureHalfFloat && engine._caps.textureHalfFloatLinearFiltering) {\n            type = Constants.TEXTURETYPE_HALF_FLOAT;\n        }\n        const dimensions = this._ratioOrDimensions.width !== undefined\n            ? this._ratioOrDimensions\n            : { width: engine.getRenderWidth() * this._ratioOrDimensions, height: engine.getRenderHeight() * this._ratioOrDimensions };\n        const textureTypes = [];\n        const textureFormats = [];\n        for (const typeAndFormat of textureTypesAndFormat) {\n            if (typeAndFormat) {\n                textureTypes.push(typeAndFormat.textureType);\n                textureFormats.push(typeAndFormat.textureFormat);\n            }\n            else {\n                textureTypes.push(type);\n                textureFormats.push(Constants.TEXTUREFORMAT_RGBA);\n            }\n        }\n        this._normalsAreUnsigned =\n            textureTypes[GeometryBufferRenderer.NORMAL_TEXTURE_TYPE] === Constants.TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV ||\n                textureTypes[GeometryBufferRenderer.NORMAL_TEXTURE_TYPE] === Constants.TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV;\n        this._multiRenderTarget = new MultiRenderTarget(\"gBuffer\", dimensions, count, this._scene, { generateMipMaps: false, generateDepthTexture: true, types: textureTypes, formats: textureFormats, depthTextureFormat: this._depthFormat }, textureNames.concat(\"gBuffer_DepthBuffer\"));\n        if (!this.isSupported) {\n            return;\n        }\n        this._multiRenderTarget.wrapU = Texture.CLAMP_ADDRESSMODE;\n        this._multiRenderTarget.wrapV = Texture.CLAMP_ADDRESSMODE;\n        this._multiRenderTarget.refreshRate = 1;\n        this._multiRenderTarget.renderParticles = false;\n        this._multiRenderTarget.renderList = null;\n        // Depth is always the first texture in the geometry buffer renderer!\n        const layoutAttachmentsAll = [true];\n        const layoutAttachmentsAllButDepth = [false];\n        const layoutAttachmentsDepthOnly = [true];\n        for (let i = 1; i < count; ++i) {\n            layoutAttachmentsAll.push(true);\n            layoutAttachmentsDepthOnly.push(false);\n            layoutAttachmentsAllButDepth.push(true);\n        }\n        const attachmentsAll = engine.buildTextureLayout(layoutAttachmentsAll);\n        const attachmentsAllButDepth = engine.buildTextureLayout(layoutAttachmentsAllButDepth);\n        const attachmentsDepthOnly = engine.buildTextureLayout(layoutAttachmentsDepthOnly);\n        this._multiRenderTarget.onClearObservable.add((engine) => {\n            engine.bindAttachments(this.useSpecificClearForDepthTexture ? attachmentsAllButDepth : attachmentsAll);\n            engine.clear(this._clearColor, true, true, true);\n            if (this.useSpecificClearForDepthTexture) {\n                engine.bindAttachments(attachmentsDepthOnly);\n                engine.clear(this._clearDepthColor, true, true, true);\n            }\n            engine.bindAttachments(attachmentsAll);\n        });\n        this._resizeObserver = engine.onResizeObservable.add(() => {\n            if (this._multiRenderTarget) {\n                const dimensions = this._ratioOrDimensions.width !== undefined\n                    ? this._ratioOrDimensions\n                    : { width: engine.getRenderWidth() * this._ratioOrDimensions, height: engine.getRenderHeight() * this._ratioOrDimensions };\n                this._multiRenderTarget.resize(dimensions);\n            }\n        });\n        // Custom render function\n        const renderSubMesh = (subMesh) => {\n            const renderingMesh = subMesh.getRenderingMesh();\n            const effectiveMesh = subMesh.getEffectiveMesh();\n            const scene = this._scene;\n            const engine = scene.getEngine();\n            const material = subMesh.getMaterial();\n            if (!material) {\n                return;\n            }\n            effectiveMesh._internalAbstractMeshDataInfo._isActiveIntermediate = false;\n            // Velocity\n            if ((this._enableVelocity || this._enableVelocityLinear) && !this._previousTransformationMatrices[effectiveMesh.uniqueId]) {\n                this._previousTransformationMatrices[effectiveMesh.uniqueId] = {\n                    world: Matrix.Identity(),\n                    viewProjection: scene.getTransformMatrix(),\n                };\n                if (renderingMesh.skeleton) {\n                    const bonesTransformations = renderingMesh.skeleton.getTransformMatrices(renderingMesh);\n                    this._previousBonesTransformationMatrices[renderingMesh.uniqueId] = this._copyBonesTransformationMatrices(bonesTransformations, new Float32Array(bonesTransformations.length));\n                }\n            }\n            // Managing instances\n            const batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\n            if (batch.mustReturn) {\n                return;\n            }\n            const hardwareInstancedRendering = engine.getCaps().instancedArrays && (batch.visibleInstances[subMesh._id] !== null || renderingMesh.hasThinInstances);\n            const world = effectiveMesh.getWorldMatrix();\n            if (this.isReady(subMesh, hardwareInstancedRendering)) {\n                const drawWrapper = subMesh._getDrawWrapper();\n                if (!drawWrapper) {\n                    return;\n                }\n                const effect = drawWrapper.effect;\n                engine.enableEffect(drawWrapper);\n                if (!hardwareInstancedRendering) {\n                    renderingMesh._bind(subMesh, effect, material.fillMode);\n                }\n                if (!this._useUbo) {\n                    effect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n                    effect.setMatrix(\"view\", scene.getViewMatrix());\n                }\n                else {\n                    BindSceneUniformBuffer(effect, this._scene.getSceneUniformBuffer());\n                    this._scene.finalizeSceneUbo();\n                }\n                let sideOrientation;\n                const instanceDataStorage = renderingMesh._instanceDataStorage;\n                if (!instanceDataStorage.isFrozen && (material.backFaceCulling || material.sideOrientation !== null)) {\n                    const mainDeterminant = effectiveMesh._getWorldMatrixDeterminant();\n                    sideOrientation = material._getEffectiveOrientation(renderingMesh);\n                    if (mainDeterminant < 0) {\n                        sideOrientation = sideOrientation === Material.ClockWiseSideOrientation ? Material.CounterClockWiseSideOrientation : Material.ClockWiseSideOrientation;\n                    }\n                }\n                else {\n                    sideOrientation = renderingMesh._effectiveSideOrientation;\n                }\n                material._preBind(drawWrapper, sideOrientation);\n                // Alpha test\n                if (material.needAlphaTestingForMesh(effectiveMesh)) {\n                    const alphaTexture = material.getAlphaTestTexture();\n                    if (alphaTexture) {\n                        effect.setTexture(\"diffuseSampler\", alphaTexture);\n                        effect.setMatrix(\"diffuseMatrix\", alphaTexture.getTextureMatrix());\n                    }\n                }\n                // Bump\n                if ((material.bumpTexture || material.normalTexture || material.geometryNormalTexture) &&\n                    scene.getEngine().getCaps().standardDerivatives &&\n                    MaterialFlags.BumpTextureEnabled) {\n                    const texture = material.bumpTexture || material.normalTexture || material.geometryNormalTexture;\n                    effect.setFloat3(\"vBumpInfos\", texture.coordinatesIndex, 1.0 / texture.level, material.parallaxScaleBias);\n                    effect.setMatrix(\"bumpMatrix\", texture.getTextureMatrix());\n                    effect.setTexture(\"bumpSampler\", texture);\n                    effect.setFloat2(\"vTangentSpaceParams\", material.invertNormalMapX ? -1.0 : 1.0, material.invertNormalMapY ? -1.0 : 1.0);\n                }\n                // Reflectivity\n                if (this._enableReflectivity) {\n                    // for PBR materials: cf. https://doc.babylonjs.com/features/featuresDeepDive/materials/using/masterPBR\n                    if (material.getClassName() === \"PBRMetallicRoughnessMaterial\") {\n                        // if it is a PBR material in MetallicRoughness Mode:\n                        if (material.metallicRoughnessTexture !== null) {\n                            effect.setTexture(\"reflectivitySampler\", material.metallicRoughnessTexture);\n                            effect.setMatrix(\"reflectivityMatrix\", material.metallicRoughnessTexture.getTextureMatrix());\n                        }\n                        if (material.metallic !== null) {\n                            effect.setFloat(\"metallic\", material.metallic);\n                        }\n                        if (material.roughness !== null) {\n                            effect.setFloat(\"glossiness\", 1.0 - material.roughness);\n                        }\n                        if (material.baseTexture !== null) {\n                            effect.setTexture(\"albedoSampler\", material.baseTexture);\n                            effect.setMatrix(\"albedoMatrix\", material.baseTexture.getTextureMatrix());\n                        }\n                        if (material.baseColor !== null) {\n                            effect.setColor3(\"albedoColor\", material.baseColor);\n                        }\n                    }\n                    else if (material.getClassName() === \"PBRSpecularGlossinessMaterial\") {\n                        // if it is a PBR material in Specular/Glossiness Mode:\n                        if (material.specularGlossinessTexture !== null) {\n                            effect.setTexture(\"reflectivitySampler\", material.specularGlossinessTexture);\n                            effect.setMatrix(\"reflectivityMatrix\", material.specularGlossinessTexture.getTextureMatrix());\n                        }\n                        else {\n                            if (material.specularColor !== null) {\n                                effect.setColor3(\"reflectivityColor\", material.specularColor);\n                            }\n                        }\n                        if (material.glossiness !== null) {\n                            effect.setFloat(\"glossiness\", material.glossiness);\n                        }\n                    }\n                    else if (material.getClassName() === \"PBRMaterial\") {\n                        // if it is the bigger PBRMaterial\n                        if (material.metallicTexture !== null) {\n                            effect.setTexture(\"reflectivitySampler\", material.metallicTexture);\n                            effect.setMatrix(\"reflectivityMatrix\", material.metallicTexture.getTextureMatrix());\n                        }\n                        if (material.metallic !== null) {\n                            effect.setFloat(\"metallic\", material.metallic);\n                        }\n                        if (material.roughness !== null) {\n                            effect.setFloat(\"glossiness\", 1.0 - material.roughness);\n                        }\n                        if (material.roughness !== null || material.metallic !== null || material.metallicTexture !== null) {\n                            // MetallicRoughness Model\n                            if (material.albedoTexture !== null) {\n                                effect.setTexture(\"albedoSampler\", material.albedoTexture);\n                                effect.setMatrix(\"albedoMatrix\", material.albedoTexture.getTextureMatrix());\n                            }\n                            if (material.albedoColor !== null) {\n                                effect.setColor3(\"albedoColor\", material.albedoColor);\n                            }\n                        }\n                        else {\n                            // SpecularGlossiness Model\n                            if (material.reflectivityTexture !== null) {\n                                effect.setTexture(\"reflectivitySampler\", material.reflectivityTexture);\n                                effect.setMatrix(\"reflectivityMatrix\", material.reflectivityTexture.getTextureMatrix());\n                            }\n                            else if (material.reflectivityColor !== null) {\n                                effect.setColor3(\"reflectivityColor\", material.reflectivityColor);\n                            }\n                            if (material.microSurface !== null) {\n                                effect.setFloat(\"glossiness\", material.microSurface);\n                            }\n                        }\n                    }\n                    else if (material.getClassName() === \"StandardMaterial\") {\n                        // if StandardMaterial:\n                        if (material.specularTexture !== null) {\n                            effect.setTexture(\"reflectivitySampler\", material.specularTexture);\n                            effect.setMatrix(\"reflectivityMatrix\", material.specularTexture.getTextureMatrix());\n                        }\n                        if (material.specularColor !== null) {\n                            effect.setColor3(\"reflectivityColor\", material.specularColor);\n                        }\n                    }\n                    else if (material.getClassName() === \"OpenPBRMaterial\") {\n                        // if it is a OpenPBR material:\n                        const openpbrMaterial = material;\n                        if (openpbrMaterial._useRoughnessFromMetallicTextureGreen && openpbrMaterial.baseMetalnessTexture) {\n                            effect.setTexture(\"reflectivitySampler\", openpbrMaterial.baseMetalnessTexture);\n                            effect.setMatrix(\"reflectivityMatrix\", openpbrMaterial.baseMetalnessTexture.getTextureMatrix());\n                        }\n                        else if (openpbrMaterial.baseMetalnessTexture) {\n                            effect.setTexture(\"metallicSampler\", openpbrMaterial.baseMetalnessTexture);\n                            effect.setMatrix(\"metallicMatrix\", openpbrMaterial.baseMetalnessTexture.getTextureMatrix());\n                        }\n                        else if (openpbrMaterial.specularRoughnessTexture) {\n                            effect.setTexture(\"roughnessSampler\", openpbrMaterial.specularRoughnessTexture);\n                            effect.setMatrix(\"roughnessMatrix\", openpbrMaterial.specularRoughnessTexture.getTextureMatrix());\n                        }\n                        effect.setFloat(\"metallic\", openpbrMaterial.baseMetalness);\n                        effect.setFloat(\"glossiness\", 1.0 - openpbrMaterial.specularRoughness);\n                        if (openpbrMaterial.baseColorTexture !== null) {\n                            effect.setTexture(\"albedoSampler\", openpbrMaterial.baseColorTexture);\n                            effect.setMatrix(\"albedoMatrix\", openpbrMaterial.baseColorTexture.getTextureMatrix());\n                        }\n                        if (openpbrMaterial.baseColor !== null) {\n                            effect.setColor3(\"albedoColor\", openpbrMaterial.baseColor);\n                        }\n                    }\n                }\n                // Clip plane\n                BindClipPlane(effect, material, this._scene);\n                // Bones\n                if (renderingMesh.useBones && renderingMesh.computeBonesUsingShaders && renderingMesh.skeleton) {\n                    const skeleton = renderingMesh.skeleton;\n                    if (skeleton.isUsingTextureForMatrices && effect.getUniformIndex(\"boneTextureWidth\") > -1) {\n                        const boneTexture = skeleton.getTransformMatrixTexture(renderingMesh);\n                        effect.setTexture(\"boneSampler\", boneTexture);\n                        effect.setFloat(\"boneTextureWidth\", 4.0 * (skeleton.bones.length + 1));\n                    }\n                    else {\n                        effect.setMatrices(\"mBones\", renderingMesh.skeleton.getTransformMatrices(renderingMesh));\n                    }\n                    if (this._enableVelocity || this._enableVelocityLinear) {\n                        effect.setMatrices(\"mPreviousBones\", this._previousBonesTransformationMatrices[renderingMesh.uniqueId]);\n                    }\n                }\n                // Morph targets\n                BindMorphTargetParameters(renderingMesh, effect);\n                if (renderingMesh.morphTargetManager && renderingMesh.morphTargetManager.isUsingTextureForTargets) {\n                    renderingMesh.morphTargetManager._bind(effect);\n                }\n                // Velocity\n                if (this._enableVelocity || this._enableVelocityLinear) {\n                    effect.setMatrix(\"previousWorld\", this._previousTransformationMatrices[effectiveMesh.uniqueId].world);\n                    effect.setMatrix(\"previousViewProjection\", this._previousTransformationMatrices[effectiveMesh.uniqueId].viewProjection);\n                }\n                if (hardwareInstancedRendering && renderingMesh.hasThinInstances) {\n                    effect.setMatrix(\"world\", world);\n                }\n                // Draw\n                renderingMesh._processRendering(effectiveMesh, subMesh, effect, material.fillMode, batch, hardwareInstancedRendering, (isInstance, w) => {\n                    if (!isInstance) {\n                        effect.setMatrix(\"world\", w);\n                    }\n                });\n            }\n            // Velocity\n            if (this._enableVelocity || this._enableVelocityLinear) {\n                this._previousTransformationMatrices[effectiveMesh.uniqueId].world = world.clone();\n                this._previousTransformationMatrices[effectiveMesh.uniqueId].viewProjection = this._scene.getTransformMatrix().clone();\n                if (renderingMesh.skeleton) {\n                    this._copyBonesTransformationMatrices(renderingMesh.skeleton.getTransformMatrices(renderingMesh), this._previousBonesTransformationMatrices[effectiveMesh.uniqueId]);\n                }\n            }\n        };\n        this._multiRenderTarget.customIsReadyFunction = (mesh, refreshRate, preWarm) => {\n            if ((preWarm || refreshRate === 0) && mesh.subMeshes) {\n                for (let i = 0; i < mesh.subMeshes.length; ++i) {\n                    const subMesh = mesh.subMeshes[i];\n                    const material = subMesh.getMaterial();\n                    const renderingMesh = subMesh.getRenderingMesh();\n                    if (!material) {\n                        continue;\n                    }\n                    const batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\n                    const hardwareInstancedRendering = engine.getCaps().instancedArrays && (batch.visibleInstances[subMesh._id] !== null || renderingMesh.hasThinInstances);\n                    if (!this.isReady(subMesh, hardwareInstancedRendering)) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        };\n        this._multiRenderTarget.customRenderFunction = (opaqueSubMeshes, alphaTestSubMeshes, transparentSubMeshes, depthOnlySubMeshes) => {\n            let index;\n            if (this._linkedWithPrePass) {\n                if (!this._prePassRenderer.enabled) {\n                    return;\n                }\n                this._scene.getEngine().bindAttachments(this._attachmentsFromPrePass);\n            }\n            if (depthOnlySubMeshes.length) {\n                engine.setColorWrite(false);\n                for (index = 0; index < depthOnlySubMeshes.length; index++) {\n                    renderSubMesh(depthOnlySubMeshes.data[index]);\n                }\n                engine.setColorWrite(true);\n            }\n            for (index = 0; index < opaqueSubMeshes.length; index++) {\n                renderSubMesh(opaqueSubMeshes.data[index]);\n            }\n            engine.setDepthWrite(false);\n            for (index = 0; index < alphaTestSubMeshes.length; index++) {\n                renderSubMesh(alphaTestSubMeshes.data[index]);\n            }\n            if (this.renderTransparentMeshes) {\n                for (index = 0; index < transparentSubMeshes.length; index++) {\n                    renderSubMesh(transparentSubMeshes.data[index]);\n                }\n            }\n            engine.setDepthWrite(true);\n        };\n    }\n    // Copies the bones transformation matrices into the target array and returns the target's reference\n    _copyBonesTransformationMatrices(source, target) {\n        for (let i = 0; i < source.length; i++) {\n            target[i] = source[i];\n        }\n        return target;\n    }\n}\n/**\n * Force all the standard materials to compile to glsl even on WebGPU engines.\n * False by default. This is mostly meant for backward compatibility.\n */\nGeometryBufferRenderer.ForceGLSL = false;\n/**\n * Constant used to retrieve the depth texture index in the G-Buffer textures array\n * using getIndex(GeometryBufferRenderer.DEPTH_TEXTURE_INDEX)\n */\nGeometryBufferRenderer.DEPTH_TEXTURE_TYPE = 0;\n/**\n * Constant used to retrieve the normal texture index in the G-Buffer textures array\n * using getIndex(GeometryBufferRenderer.NORMAL_TEXTURE_INDEX)\n */\nGeometryBufferRenderer.NORMAL_TEXTURE_TYPE = 1;\n/**\n * Constant used to retrieve the position texture index in the G-Buffer textures array\n * using getIndex(GeometryBufferRenderer.POSITION_TEXTURE_INDEX)\n */\nGeometryBufferRenderer.POSITION_TEXTURE_TYPE = 2;\n/**\n * Constant used to retrieve the velocity texture index in the G-Buffer textures array\n * using getIndex(GeometryBufferRenderer.VELOCITY_TEXTURE_INDEX)\n */\nGeometryBufferRenderer.VELOCITY_TEXTURE_TYPE = 3;\n/**\n * Constant used to retrieve the reflectivity texture index in the G-Buffer textures array\n * using the getIndex(GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE)\n */\nGeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE = 4;\n/**\n * Constant used to retrieve the screen-space depth texture index in the G-Buffer textures array\n * using getIndex(GeometryBufferRenderer.SCREENSPACE_DEPTH_TEXTURE_TYPE)\n */\nGeometryBufferRenderer.SCREENSPACE_DEPTH_TEXTURE_TYPE = 5;\n/**\n * Constant used to retrieve the linear velocity texture index in the G-Buffer textures array\n * using getIndex(GeometryBufferRenderer.VELOCITY_LINEAR_TEXTURE_TYPE)\n */\nGeometryBufferRenderer.VELOCITY_LINEAR_TEXTURE_TYPE = 6;\n/**\n * @internal\n */\nGeometryBufferRenderer._SceneComponentInitialization = (_) => {\n    throw _WarnImport(\"GeometryBufferRendererSceneComponent\");\n};\n//# sourceMappingURL=geometryBufferRenderer.js.map"],"names":["name","shader"],"mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE;AACrC,IAAI,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,MAAM;AAC3C;AACA;AACO,MAAM,oBAAoB,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE;;;;;;;ACnLpD;AACA,MAAM,QAAQ,GAAG;AACjB,IAAI,OAAO;AACX,IAAI,QAAQ;AACZ,IAAI,gBAAgB;AACpB,IAAI,eAAe;AACnB,IAAI,MAAM;AACV,IAAI,eAAe;AACnB,IAAI,wBAAwB;AAC5B,IAAI,gBAAgB;AACpB,IAAI,YAAY;AAChB,IAAI,oBAAoB;AACxB,IAAI,cAAc;AAClB,IAAI,mBAAmB;AACvB,IAAI,aAAa;AACjB,IAAI,UAAU;AACd,IAAI,YAAY;AAChB,IAAI,qBAAqB;AACzB,IAAI,YAAY;AAChB,IAAI,uBAAuB;AAC3B,IAAI,kBAAkB;AACtB,IAAI,wBAAwB;AAC5B,IAAI,2BAA2B;AAC/B,IAAI,kBAAkB;AACtB,CAAC;AACD,oBAAoB,CAAC,QAAQ,CAAC;AAC9B;AACA;AACA;AACO,MAAM,sBAAs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"}