{"version":3,"file":"pbrMaterialLoadingAdapter-CtnSnrCk.esm.js","sources":["../../../../../dev/loaders/dist/glTF/2.0/pbrMaterialLoadingAdapter.js"],"sourcesContent":["import { Color3 } from \"core/Maths/math.color\";\nimport { Constants } from \"core/Engines/constants\";\n/**\n * Material Loading Adapter for PBR materials that provides a unified OpenPBR-like interface.\n */\nexport class PBRMaterialLoadingAdapter {\n    /**\n     * Creates a new instance of the PBRMaterialLoadingAdapter.\n     * @param material - The PBR material to adapt.\n     */\n    constructor(material) {\n        this._material = material;\n        this._material.enableSpecularAntiAliasing = true;\n    }\n    /**\n     * Gets the underlying material\n     */\n    get material() {\n        return this._material;\n    }\n    /**\n     * Whether the material should be treated as unlit\n     */\n    get isUnlit() {\n        return this._material.unlit;\n    }\n    /**\n     * Sets whether the material should be treated as unlit\n     */\n    set isUnlit(value) {\n        this._material.unlit = value;\n    }\n    // ========================================\n    // CULLING PROPERTIES\n    // ========================================\n    /**\n     * Sets whether back face culling is enabled.\n     * @param value True to enable back face culling\n     */\n    set backFaceCulling(value) {\n        this._material.backFaceCulling = value;\n    }\n    /**\n     * Gets whether back face culling is enabled.\n     * @returns True if back face culling is enabled\n     */\n    get backFaceCulling() {\n        return this._material.backFaceCulling;\n    }\n    /**\n     * Sets whether two-sided lighting is enabled.\n     * @param value True to enable two-sided lighting\n     */\n    set twoSidedLighting(value) {\n        this._material.twoSidedLighting = value;\n    }\n    /**\n     * Gets whether two-sided lighting is enabled.\n     * @returns True if two-sided lighting is enabled\n     */\n    get twoSidedLighting() {\n        return this._material.twoSidedLighting;\n    }\n    // ========================================\n    // ALPHA PROPERTIES\n    // ========================================\n    /**\n     * Sets the alpha cutoff value for alpha testing.\n     * @param value The alpha cutoff threshold (0-1)\n     */\n    set alphaCutOff(value) {\n        this._material.alphaCutOff = value;\n    }\n    /**\n     * Gets the alpha cutoff value.\n     * @returns The alpha cutoff threshold (0-1)\n     */\n    get alphaCutOff() {\n        return this._material.alphaCutOff;\n    }\n    /**\n     * Sets whether to use alpha from the albedo texture.\n     * @param value True to use alpha from albedo texture\n     */\n    set useAlphaFromBaseColorTexture(value) {\n        this._material.useAlphaFromAlbedoTexture = value;\n    }\n    /**\n     * Gets whether alpha is used from the albedo texture.\n     * @returns True if using alpha from albedo texture\n     */\n    get useAlphaFromBaseColorTexture() {\n        return this._material.useAlphaFromAlbedoTexture;\n    }\n    /**\n     * Gets whether the transparency is treated as alpha coverage.\n     */\n    get transparencyAsAlphaCoverage() {\n        return this._material.useRadianceOverAlpha || this._material.useSpecularOverAlpha;\n    }\n    /**\n     * Sets/Gets whether the transparency is treated as alpha coverage\n     */\n    set transparencyAsAlphaCoverage(value) {\n        this._material.useRadianceOverAlpha = !value;\n        this._material.useSpecularOverAlpha = !value;\n    }\n    // ========================================\n    // BASE PARAMETERS\n    // ========================================\n    /**\n     * Sets the base color of the material (mapped to PBR albedoColor).\n     * @param value The base color as a Color3\n     */\n    set baseColor(value) {\n        this._material.albedoColor = value;\n    }\n    /**\n     * Gets the base color of the material.\n     * @returns The base color as a Color3\n     */\n    get baseColor() {\n        return this._material.albedoColor;\n    }\n    /**\n     * Sets the base color texture of the material (mapped to PBR albedoTexture).\n     * @param value The base color texture or null\n     */\n    set baseColorTexture(value) {\n        this._material.albedoTexture = value;\n    }\n    /**\n     * Gets the base color texture of the material.\n     * @returns The base color texture or null\n     */\n    get baseColorTexture() {\n        return this._material.albedoTexture;\n    }\n    /**\n     * Sets the base diffuse roughness of the material.\n     * @param value The diffuse roughness value (0-1)\n     */\n    set baseDiffuseRoughness(value) {\n        this._material.baseDiffuseRoughness = value;\n        if (value > 0) {\n            this._material.brdf.baseDiffuseModel = Constants.MATERIAL_DIFFUSE_MODEL_E_OREN_NAYAR;\n        }\n    }\n    /**\n     * Gets the base diffuse roughness of the material.\n     * @returns The diffuse roughness value (0-1), defaults to 0 if not set\n     */\n    get baseDiffuseRoughness() {\n        return this._material.baseDiffuseRoughness ?? 0;\n    }\n    /**\n     * Sets the base diffuse roughness texture of the material.\n     * @param value The diffuse roughness texture or null\n     */\n    set baseDiffuseRoughnessTexture(value) {\n        this._material.baseDiffuseRoughnessTexture = value;\n    }\n    /**\n     * Gets the base diffuse roughness texture of the material.\n     * @returns The diffuse roughness texture or null\n     */\n    get baseDiffuseRoughnessTexture() {\n        return this._material.baseDiffuseRoughnessTexture;\n    }\n    /**\n     * Sets the base metalness value of the material (mapped to PBR metallic).\n     * @param value The metalness value (0-1)\n     */\n    set baseMetalness(value) {\n        this._material.metallic = value;\n    }\n    /**\n     * Gets the base metalness value of the material.\n     * @returns The metalness value (0-1), defaults to 1 if not set\n     */\n    get baseMetalness() {\n        return this._material.metallic ?? 1;\n    }\n    /**\n     * Sets the base metalness texture of the material (mapped to PBR metallicTexture).\n     * @param value The metalness texture or null\n     */\n    set baseMetalnessTexture(value) {\n        this._material.metallicTexture = value;\n    }\n    /**\n     * Gets the base metalness texture of the material.\n     * @returns The metalness texture or null\n     */\n    get baseMetalnessTexture() {\n        return this._material.metallicTexture;\n    }\n    /**\n     * Sets whether to use roughness from the metallic texture's green channel.\n     * Also disables using roughness from the alpha channel when enabled.\n     * @param value True to use green channel for roughness\n     */\n    set useRoughnessFromMetallicTextureGreen(value) {\n        this._material.useRoughnessFromMetallicTextureGreen = value;\n        this._material.useRoughnessFromMetallicTextureAlpha = !value;\n    }\n    /**\n     * Sets whether to use metalness from the metallic texture's blue channel.\n     * @param value True to use blue channel for metalness\n     */\n    set useMetallicFromMetallicTextureBlue(value) {\n        this._material.useMetallnessFromMetallicTextureBlue = value;\n    }\n    // ========================================\n    // SPECULAR PARAMETERS\n    // ========================================\n    /**\n     * Configures specular properties and optionally enables OpenPBR BRDF model for edge color support.\n     * @param enableEdgeColor Whether to enable OpenPBR BRDF models for edge color support\n     */\n    enableSpecularEdgeColor(enableEdgeColor = false) {\n        if (enableEdgeColor) {\n            this._material.brdf.dielectricSpecularModel = Constants.MATERIAL_DIELECTRIC_SPECULAR_MODEL_OPENPBR;\n            this._material.brdf.conductorSpecularModel = Constants.MATERIAL_CONDUCTOR_SPECULAR_MODEL_OPENPBR;\n        }\n    }\n    /**\n     * Sets the specular weight (mapped to PBR metallicF0Factor).\n     * @param value The specular weight value\n     */\n    set specularWeight(value) {\n        this._material.metallicF0Factor = value;\n    }\n    /**\n     * Gets the specular weight.\n     * @returns The specular weight value, defaults to 1 if not set\n     */\n    get specularWeight() {\n        return this._material.metallicF0Factor ?? 1;\n    }\n    /**\n     * Sets the specular weight texture (mapped to PBR metallicReflectanceTexture).\n     * Configures the material to use only metalness from this texture when set.\n     * @param value The specular weight texture or null\n     */\n    set specularWeightTexture(value) {\n        if (value) {\n            this._material.metallicReflectanceTexture = value;\n            this._material.useOnlyMetallicFromMetallicReflectanceTexture = true;\n        }\n        else {\n            this._material.metallicReflectanceTexture = null;\n            this._material.useOnlyMetallicFromMetallicReflectanceTexture = false;\n        }\n    }\n    /**\n     * Gets the specular weight texture.\n     * @returns The specular weight texture or null\n     */\n    get specularWeightTexture() {\n        return this._material.metallicReflectanceTexture;\n    }\n    /**\n     * Sets the specular color (mapped to PBR metallicReflectanceColor).\n     * @param value The specular color as a Color3\n     */\n    set specularColor(value) {\n        this._material.metallicReflectanceColor = value;\n    }\n    /**\n     * Gets the specular color.\n     * @returns The specular color as a Color3\n     */\n    get specularColor() {\n        return this._material.metallicReflectanceColor;\n    }\n    /**\n     * Sets the specular color texture (mapped to PBR reflectanceTexture).\n     * @param value The specular color texture or null\n     */\n    set specularColorTexture(value) {\n        this._material.reflectanceTexture = value;\n    }\n    /**\n     * Gets the specular color texture.\n     * @returns The specular color texture or null\n     */\n    get specularColorTexture() {\n        return this._material.reflectanceTexture;\n    }\n    /**\n     * Sets the specular roughness (mapped to PBR roughness).\n     * @param value The roughness value (0-1)\n     */\n    set specularRoughness(value) {\n        this._material.roughness = value;\n    }\n    /**\n     * Gets the specular roughness.\n     * @returns The roughness value (0-1), defaults to 1 if not set\n     */\n    get specularRoughness() {\n        return this._material.roughness ?? 1;\n    }\n    /**\n     * Sets the specular roughness texture.\n     * Note: PBR uses the same texture for both metallic and roughness,\n     * so this only sets the texture if no base metalness texture exists.\n     * @param value The roughness texture or null\n     */\n    set specularRoughnessTexture(value) {\n        // PBR uses the same texture for both metallic and roughness\n        if (!this.baseMetalnessTexture) {\n            this._material.metallicTexture = value;\n        }\n    }\n    /**\n     * Gets the specular roughness texture.\n     * @returns The roughness texture (same as metallic texture for PBR) or null\n     */\n    get specularRoughnessTexture() {\n        return this._material.metallicTexture;\n    }\n    /**\n     * Sets the specular index of refraction (mapped to PBR indexOfRefraction).\n     * @param value The IOR value\n     */\n    set specularIor(value) {\n        this._material.indexOfRefraction = value;\n    }\n    /**\n     * Gets the specular index of refraction.\n     * @returns The IOR value\n     */\n    get specularIor() {\n        return this._material.indexOfRefraction;\n    }\n    // ========================================\n    // EMISSION PARAMETERS\n    // ========================================\n    /**\n     * Sets the emission color (mapped to PBR emissiveColor).\n     * @param value The emission color as a Color3\n     */\n    set emissionColor(value) {\n        this._material.emissiveColor = value;\n    }\n    /**\n     * Gets the emission color.\n     * @returns The emission color as a Color3\n     */\n    get emissionColor() {\n        return this._material.emissiveColor;\n    }\n    /**\n     * Sets the emission luminance/intensity (mapped to PBR emissiveIntensity).\n     * @param value The emission intensity value\n     */\n    set emissionLuminance(value) {\n        this._material.emissiveIntensity = value;\n    }\n    /**\n     * Gets the emission luminance/intensity.\n     * @returns The emission intensity value\n     */\n    get emissionLuminance() {\n        return this._material.emissiveIntensity;\n    }\n    /**\n     * Sets the emission color texture (mapped to PBR emissiveTexture).\n     * @param value The emission texture or null\n     */\n    set emissionColorTexture(value) {\n        this._material.emissiveTexture = value;\n    }\n    /**\n     * Gets the emission color texture.\n     * @returns The emission texture or null\n     */\n    get emissionColorTexture() {\n        return this._material.emissiveTexture;\n    }\n    // ========================================\n    // AMBIENT OCCLUSION\n    // ========================================\n    /**\n     * Sets the ambient occlusion texture (mapped to PBR ambientTexture).\n     * Automatically enables grayscale mode when set.\n     * @param value The ambient occlusion texture or null\n     */\n    set ambientOcclusionTexture(value) {\n        this._material.ambientTexture = value;\n        if (value) {\n            this._material.useAmbientInGrayScale = true;\n        }\n    }\n    /**\n     * Gets the ambient occlusion texture.\n     * @returns The ambient occlusion texture or null\n     */\n    get ambientOcclusionTexture() {\n        return this._material.ambientTexture;\n    }\n    /**\n     * Sets the ambient occlusion texture strength.\n     * @param value The strength value (typically 0-1)\n     */\n    set ambientOcclusionTextureStrength(value) {\n        this._material.ambientTextureStrength = value;\n    }\n    /**\n     * Gets the ambient occlusion texture strength.\n     * @returns The strength value, defaults to 1.0 if not set\n     */\n    get ambientOcclusionTextureStrength() {\n        return this._material.ambientTextureStrength ?? 1.0;\n    }\n    // ========================================\n    // COAT PARAMETERS\n    // ========================================\n    /**\n     * Configures clear coat for PBR material.\n     * Enables clear coat and sets up proper configuration.\n     */\n    configureCoat() {\n        this._material.clearCoat.isEnabled = true;\n        this._material.clearCoat.useRoughnessFromMainTexture = false;\n        this._material.clearCoat.remapF0OnInterfaceChange = false;\n    }\n    /**\n     * Sets the coat weight (mapped to PBR clearCoat.intensity).\n     * Automatically enables clear coat.\n     * @param value The coat weight value (0-1)\n     */\n    set coatWeight(value) {\n        this._material.clearCoat.isEnabled = true;\n        this._material.clearCoat.intensity = value;\n    }\n    /**\n     * Gets the coat weight.\n     * @returns The coat weight value\n     */\n    get coatWeight() {\n        return this._material.clearCoat.intensity;\n    }\n    /**\n     * Sets the coat weight texture (mapped to PBR clearCoat.texture).\n     * Automatically enables clear coat.\n     * @param value The coat weight texture or null\n     */\n    set coatWeightTexture(value) {\n        this._material.clearCoat.isEnabled = true;\n        this._material.clearCoat.texture = value;\n    }\n    /**\n     * Gets the coat weight texture.\n     * @returns The coat weight texture or null\n     */\n    get coatWeightTexture() {\n        return this._material.clearCoat.texture;\n    }\n    /**\n     * Sets the coat color (mapped to PBR clearCoat.tintColor).\n     * @param value The coat tint color as a Color3\n     */\n    set coatColor(value) {\n        this._material.clearCoat.isTintEnabled = value != Color3.White();\n        this._material.clearCoat.tintColor = value;\n    }\n    /**\n     * Sets the coat color texture (mapped to PBR clearCoat.tintTexture).\n     * @param value The coat color texture or null\n     */\n    set coatColorTexture(value) {\n        this._material.clearCoat.tintTexture = value;\n    }\n    /**\n     * Sets the coat roughness (mapped to PBR clearCoat.roughness).\n     * Automatically enables clear coat.\n     * @param value The coat roughness value (0-1)\n     */\n    set coatRoughness(value) {\n        this._material.clearCoat.isEnabled = true;\n        this._material.clearCoat.roughness = value;\n    }\n    /**\n     * Gets the coat roughness.\n     * @returns The coat roughness value, defaults to 0 if not set\n     */\n    get coatRoughness() {\n        return this._material.clearCoat.roughness ?? 0;\n    }\n    /**\n     * Sets the coat roughness texture (mapped to PBR clearCoat.textureRoughness).\n     * Automatically enables clear coat and disables using roughness from main texture.\n     * @param value The coat roughness texture or null\n     */\n    set coatRoughnessTexture(value) {\n        this._material.clearCoat.isEnabled = true;\n        this._material.clearCoat.useRoughnessFromMainTexture = false;\n        this._material.clearCoat.textureRoughness = value;\n    }\n    /**\n     * Gets the coat roughness texture.\n     * @returns The coat roughness texture or null\n     */\n    get coatRoughnessTexture() {\n        return this._material.clearCoat.textureRoughness;\n    }\n    /**\n     * Sets the coat index of refraction (IOR).\n     */\n    set coatIor(value) {\n        this._material.clearCoat.indexOfRefraction = value;\n    }\n    /**\n     * Sets the coat darkening value.\n     * Note: PBR doesn't have a direct coat darkening property, so this is a no-op.\n     * @param value The coat darkening value (ignored for PBR)\n     */\n    set coatDarkening(value) {\n        // PBR doesn't have a coat darkening property\n    }\n    /**\n     * Sets the coat darkening texture\n     * @param value The coat darkening texture or null\n     */\n    set coatDarkeningTexture(value) {\n        // PBR doesn't have a coat darkening property\n    }\n    /**\n     * Sets the coat roughness anisotropy.\n     * Note: PBR clearCoat doesn't support anisotropy yet, so this is a placeholder.\n     * @param value The coat anisotropy intensity value (currently ignored)\n     */\n    set coatRoughnessAnisotropy(value) {\n        // TODO: Implement when PBR clearCoat anisotropy becomes available\n        // this._material.clearCoat.anisotropy = value;\n    }\n    /**\n     * Gets the coat roughness anisotropy.\n     * Note: PBR clearCoat doesn't support anisotropy yet, so this returns 0.\n     * @returns Currently returns 0 as clearCoat anisotropy is not yet available\n     */\n    get coatRoughnessAnisotropy() {\n        // TODO: Implement when PBR clearCoat anisotropy becomes available\n        // return this._material.clearCoat.anisotropy ?? 0;\n        return 0;\n    }\n    /**\n     * Sets the coat tangent angle for anisotropy.\n     * Note: PBR clearCoat doesn't support anisotropy yet, so this is a placeholder.\n     * @param value The coat anisotropy rotation angle in radians (currently ignored)\n     */\n    set geometryCoatTangentAngle(value) {\n        // TODO: Implement when PBR clearCoat anisotropy becomes available\n        // this._material.clearCoat.anisotropyAngle = value;\n    }\n    /**\n     * Sets the coat tangent texture for anisotropy.\n     * Note: PBR clearCoat doesn't support anisotropy textures yet, so this is a placeholder.\n     * @param value The coat anisotropy texture (currently ignored)\n     */\n    set geometryCoatTangentTexture(value) {\n        // TODO: Implement when PBR clearCoat anisotropy becomes available\n        // this._material.clearCoat.anisotropyTangentTexture = value;\n    }\n    /**\n     * Gets the coat tangent texture for anisotropy.\n     * Note: PBR clearCoat doesn't support anisotropy textures yet, so this returns null.\n     * @returns Currently returns null as clearCoat anisotropy is not yet available\n     */\n    get geometryCoatTangentTexture() {\n        // TODO: Implement when PBR clearCoat anisotropy becomes available\n        // return this._material.clearCoat.anisotropyTangentTexture;\n        return null;\n    }\n    // ========================================\n    // TRANSMISSION LAYER\n    // ========================================\n    /**\n     * Sets the transmission weight (mapped to PBR subSurface.refractionIntensity).\n     * Enables refraction when value \\> 0.\n     * @param value The transmission weight value (0-1)\n     */\n    set transmissionWeight(value) {\n        this._material.subSurface.isRefractionEnabled = value > 0;\n        this._material.subSurface.refractionIntensity = value;\n    }\n    /**\n     * Gets the transmission weight.\n     * @returns The transmission weight value\n     */\n    get transmissionWeight() {\n        return this._material.subSurface.refractionIntensity;\n    }\n    /**\n     * Sets the transmission weight texture (mapped to PBR subSurface.refractionIntensityTexture).\n     * Automatically enables refraction and glTF-style textures.\n     * @param value The transmission weight texture or null\n     */\n    set transmissionWeightTexture(value) {\n        this._material.subSurface.isRefractionEnabled = true;\n        this._material.subSurface.refractionIntensityTexture = value;\n        this._material.subSurface.useGltfStyleTextures = true;\n    }\n    /**\n     * Sets the attenuation distance for volume scattering.\n     * @param value The attenuation distance value\n     */\n    set transmissionDepth(value) {\n        this._material.subSurface.tintColorAtDistance = value;\n    }\n    /**\n     * Sets the attenuation color (mapped to PBR subSurface.tintColor).\n     * @param value The attenuation color as a Color3\n     */\n    set transmissionColor(value) {\n        this._material.subSurface.tintColor = value;\n    }\n    /**\n     * Gets the transmission dispersion Abbe number.\n     * @param value The Abbe number value\n     */\n    set transmissionDispersionAbbeNumber(value) {\n        if (value > 0) {\n            this._material.subSurface.isDispersionEnabled = true;\n            this._material.subSurface.dispersion = 20.0 / value;\n        }\n        else {\n            this._material.subSurface.isDispersionEnabled = false;\n            this._material.subSurface.dispersion = 0;\n        }\n    }\n    /**\n     * Configures transmission for thin-surface transmission (KHR_materials_transmission).\n     * Sets up the material for proper thin-surface transmission behavior.\n     */\n    configureTransmission() {\n        // Since this extension models thin-surface transmission only, we must make IOR = 1.0\n        this._material.subSurface.volumeIndexOfRefraction = 1.0;\n        // Albedo colour will tint transmission.\n        this._material.subSurface.useAlbedoToTintRefraction = true;\n        this._material.subSurface.minimumThickness = 0.0;\n        this._material.subSurface.maximumThickness = 0.0;\n    }\n    // ========================================\n    // VOLUME PROPERTIES\n    // ========================================\n    /**\n     * Sets the thickness texture (mapped to PBR subSurface.thicknessTexture).\n     * Automatically enables refraction.\n     * @param value The thickness texture or null\n     */\n    set volumeThicknessTexture(value) {\n        this._material.subSurface.thicknessTexture = value;\n        this._material.subSurface.useGltfStyleTextures = true;\n    }\n    /**\n     * Sets the thickness factor (mapped to PBR subSurface.maximumThickness).\n     * Automatically enables refraction.\n     * @param value The thickness value\n     */\n    set volumeThickness(value) {\n        this._material.subSurface.minimumThickness = 0.0;\n        this._material.subSurface.maximumThickness = value;\n        this._material.subSurface.useThicknessAsDepth = true;\n        if (value > 0) {\n            this._material.subSurface.volumeIndexOfRefraction = this._material.indexOfRefraction;\n        }\n    }\n    // ========================================\n    // SUBSURFACE PROPERTIES (Subsurface Scattering)\n    // ========================================\n    /**\n     * Configures subsurface properties for PBR material\n     */\n    configureSubsurface() {\n        this._material.subSurface.useGltfStyleTextures = true;\n        // Since this extension models thin-surface transmission only, we must make the\n        // internal IOR == 1.0 and set the thickness to 0.\n        this._material.subSurface.volumeIndexOfRefraction = 1.0;\n        this._material.subSurface.minimumThickness = 0.0;\n        this._material.subSurface.maximumThickness = 0.0;\n        // Tint color will be used for transmission.\n        this._material.subSurface.useAlbedoToTintTranslucency = false;\n    }\n    /**\n     * Sets the subsurface weight\n     */\n    set subsurfaceWeight(value) {\n        this._material.subSurface.isTranslucencyEnabled = value > 0;\n        this._material.subSurface.translucencyIntensity = value;\n    }\n    /**\n     * Gets the subsurface weight\n     * @returns The subsurface weight value\n     */\n    get subsurfaceWeight() {\n        return this._material.subSurface.isTranslucencyEnabled ? this._material.subSurface.translucencyIntensity : 0;\n    }\n    /**\n     * Sets the subsurface weight texture\n     */\n    set subsurfaceWeightTexture(value) {\n        this._material.subSurface.translucencyIntensityTexture = value;\n    }\n    /**\n     * Sets the subsurface color.\n     * @param value The subsurface tint color as a Color3\n     */\n    set subsurfaceColor(value) {\n        this._material.subSurface.tintColor = value;\n    }\n    /**\n     * Sets the subsurface color texture.\n     * @param value The subsurface tint texture or null\n     */\n    set subsurfaceColorTexture(value) {\n        this._material.subSurface.translucencyColorTexture = value;\n    }\n    // ========================================\n    // FUZZ LAYER (Sheen)\n    // ========================================\n    /**\n     * Configures sheen for PBR material.\n     * Enables sheen and sets up proper configuration.\n     */\n    configureFuzz() {\n        this._material.sheen.isEnabled = true;\n        this._material.sheen.useRoughnessFromMainTexture = false;\n        this._material.sheen.albedoScaling = true;\n    }\n    /**\n     * Sets the sheen weight (mapped to PBR sheen.intensity).\n     * Automatically enables sheen.\n     * @param value The sheen weight value\n     */\n    set fuzzWeight(value) {\n        this._material.sheen.isEnabled = true;\n        this._material.sheen.intensity = value;\n    }\n    /**\n     * Sets the sheen color (mapped to PBR sheen.color).\n     * Automatically enables sheen.\n     * @param value The sheen color as a Color3\n     */\n    set fuzzColor(value) {\n        this._material.sheen.isEnabled = true;\n        this._material.sheen.color = value;\n    }\n    /**\n     * Sets the sheen color texture (mapped to PBR sheen.texture).\n     * Automatically enables sheen.\n     * @param value The sheen color texture or null\n     */\n    set fuzzColorTexture(value) {\n        this._material.sheen.isEnabled = true;\n        this._material.sheen.texture = value;\n    }\n    /**\n     * Sets the sheen roughness (mapped to PBR sheen.roughness).\n     * Automatically enables sheen.\n     * @param value The sheen roughness value (0-1)\n     */\n    set fuzzRoughness(value) {\n        this._material.sheen.isEnabled = true;\n        this._material.sheen.roughness = value;\n    }\n    /**\n     * Sets the sheen roughness texture (mapped to PBR sheen.textureRoughness).\n     * Automatically enables sheen.\n     * @param value The sheen roughness texture or null\n     */\n    set fuzzRoughnessTexture(value) {\n        this._material.sheen.isEnabled = true;\n        this._material.sheen.textureRoughness = value;\n    }\n    // ========================================\n    // ANISOTROPY\n    // ========================================\n    /**\n     * Sets the specular roughness anisotropy (mapped to PBR anisotropy.intensity).\n     * Automatically enables anisotropy.\n     * @param value The anisotropy intensity value\n     */\n    set specularRoughnessAnisotropy(value) {\n        this._material.anisotropy.isEnabled = true;\n        this._material.anisotropy.intensity = value;\n    }\n    /**\n     * Gets the specular roughness anisotropy.\n     * @returns The anisotropy intensity value\n     */\n    get specularRoughnessAnisotropy() {\n        return this._material.anisotropy.intensity;\n    }\n    /**\n     * Sets the anisotropy rotation (mapped to PBR anisotropy.angle).\n     * Automatically enables anisotropy.\n     * @param value The anisotropy rotation angle in radians\n     */\n    set geometryTangentAngle(value) {\n        this._material.anisotropy.isEnabled = true;\n        this._material.anisotropy.angle = value;\n    }\n    /**\n     * Sets the geometry tangent texture (mapped to PBR anisotropy.texture).\n     * Automatically enables anisotropy.\n     * @param value The anisotropy texture or null\n     */\n    set geometryTangentTexture(value) {\n        this._material.anisotropy.isEnabled = true;\n        this._material.anisotropy.texture = value;\n    }\n    /**\n     * Gets the geometry tangent texture.\n     * @returns The anisotropy texture or null\n     */\n    get geometryTangentTexture() {\n        return this._material.anisotropy.texture;\n    }\n    /**\n     * Configures glTF-style anisotropy for the material.\n     * Note: PBR materials don't need this configuration, so this is a no-op.\n     * @param useGltfStyle Whether to use glTF-style anisotropy (ignored for PBR)\n     */\n    configureGltfStyleAnisotropy(useGltfStyle = true) {\n        // PBR materials don't need this configuration\n    }\n    // ========================================\n    // THIN FILM IRIDESCENCE\n    // ========================================\n    /**\n     * Sets the iridescence weight (mapped to PBR iridescence.intensity).\n     * Automatically enables iridescence.\n     * @param value The iridescence intensity value\n     */\n    set thinFilmWeight(value) {\n        this._material.iridescence.isEnabled = value > 0;\n        this._material.iridescence.intensity = value;\n    }\n    /**\n     * Sets the iridescence IOR (mapped to PBR iridescence.indexOfRefraction).\n     * @param value The iridescence IOR value\n     */\n    set thinFilmIor(value) {\n        this._material.iridescence.indexOfRefraction = value;\n    }\n    /**\n     * Sets the iridescence thickness minimum (mapped to PBR iridescence.minimumThickness).\n     * @param value The minimum thickness value in nanometers\n     */\n    set thinFilmThicknessMinimum(value) {\n        this._material.iridescence.minimumThickness = value;\n    }\n    /**\n     * Sets the iridescence thickness maximum (mapped to PBR iridescence.maximumThickness).\n     * @param value The maximum thickness value in nanometers\n     */\n    set thinFilmThicknessMaximum(value) {\n        this._material.iridescence.maximumThickness = value;\n    }\n    /**\n     * Sets the thin film weight texture (mapped to PBR iridescence.texture).\n     * @param value The thin film weight texture or null\n     */\n    set thinFilmWeightTexture(value) {\n        this._material.iridescence.texture = value;\n    }\n    /**\n     * Sets the iridescence thickness texture (mapped to PBR iridescence.thicknessTexture).\n     * @param value The iridescence thickness texture or null\n     */\n    set thinFilmThicknessTexture(value) {\n        this._material.iridescence.thicknessTexture = value;\n    }\n    // ========================================\n    // DISPERSION\n    // ========================================\n    /**\n     * Sets the transmission dispersion value.\n     * Note: PBR doesn't have direct dispersion support, so this stores it as metadata.\n     * @param value The dispersion value (stored as metadata)\n     */\n    set transmissionDispersion(value) {\n        // PBR doesn't have a direct dispersion property, this would need custom shader modification\n        // For now, we'll store it as metadata\n        this._material._dispersion = value;\n    }\n    // ========================================\n    // UNLIT MATERIALS\n    // ========================================\n    /**\n     * Sets whether the material is unlit.\n     * @param value True to make the material unlit\n     */\n    set unlit(value) {\n        this._material.unlit = value;\n    }\n    // ========================================\n    // GEOMETRY PARAMETERS\n    // ========================================\n    /**\n     * Sets the geometry opacity (mapped to PBR alpha).\n     * @param value The opacity value (0-1)\n     */\n    set geometryOpacity(value) {\n        this._material.alpha = value;\n    }\n    /**\n     * Gets the geometry opacity.\n     * @returns The opacity value (0-1)\n     */\n    get geometryOpacity() {\n        return this._material.alpha;\n    }\n    /**\n     * Sets the geometry normal texture (mapped to PBR bumpTexture).\n     * Also forces irradiance computation in fragment shader for better lighting.\n     * @param value The normal texture or null\n     */\n    set geometryNormalTexture(value) {\n        this._material.bumpTexture = value;\n        this._material.forceIrradianceInFragment = true;\n    }\n    /**\n     * Gets the geometry normal texture.\n     * @returns The normal texture or null\n     */\n    get geometryNormalTexture() {\n        return this._material.bumpTexture;\n    }\n    /**\n     * Sets the normal map inversions for the material.\n     * @param invertX Whether to invert the normal map on the X axis\n     * @param invertY Whether to invert the normal map on the Y axis\n     */\n    setNormalMapInversions(invertX, invertY) {\n        this._material.invertNormalMapX = invertX;\n        this._material.invertNormalMapY = invertY;\n    }\n    /**\n     * Sets the geometry coat normal texture (mapped to PBR clearCoat.bumpTexture).\n     * Automatically enables clear coat.\n     * @param value The coat normal texture or null\n     */\n    set geometryCoatNormalTexture(value) {\n        this._material.clearCoat.isEnabled = true;\n        this._material.clearCoat.bumpTexture = value;\n    }\n    /**\n     * Gets the geometry coat normal texture.\n     * @returns The coat normal texture or null\n     */\n    get geometryCoatNormalTexture() {\n        return this._material.clearCoat.bumpTexture;\n    }\n    /**\n     * Sets the geometry coat normal texture scale.\n     * @param value The scale value for the coat normal texture\n     */\n    set geometryCoatNormalTextureScale(value) {\n        if (this._material.clearCoat.bumpTexture) {\n            this._material.clearCoat.bumpTexture.level = value;\n        }\n    }\n}\n//# sourceMappingURL=pbrMaterialLoadingAdapter.js.map"],"names":[],"mappings":"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"}